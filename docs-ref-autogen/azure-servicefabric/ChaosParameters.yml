### YamlMime:UniversalReference
ms.openlocfilehash: ab15ed7cbbeacca663fe05ea36bf237ea7258053
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 12/13/2018
ms.locfileid: "52035489"
items:
- uid: azure-servicefabric.ChaosParameters
  name: ChaosParameters
  fullName: ChaosParameters
  children:
  - azure-servicefabric.ChaosParameters.chaosTargetFilter
  - azure-servicefabric.ChaosParameters.clusterHealthPolicy
  - azure-servicefabric.ChaosParameters.context
  - azure-servicefabric.ChaosParameters.enableMoveReplicaFaults
  - azure-servicefabric.ChaosParameters.maxClusterStabilizationTimeoutInSeconds
  - azure-servicefabric.ChaosParameters.maxConcurrentFaults
  - azure-servicefabric.ChaosParameters.timeToRunInSeconds
  - azure-servicefabric.ChaosParameters.waitTimeBetweenFaultsInSeconds
  - azure-servicefabric.ChaosParameters.waitTimeBetweenIterationsInSeconds
  langs:
  - typeScript
  type: interface
  summary: Определяет параметры, чтобы настроить запуск Chaos.
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.chaosTargetFilter
  name: chaosTargetFilter
  fullName: chaosTargetFilter
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    Список сущностей кластеров для ошибки Chaos.

    Этот фильтр можно использовать, чтобы направлять ошибки Chaos только для определенных типов узлов или только для определенных экземпляров приложения. Если фильтр ChaosTargetFilter не используется, Chaos создает ошибки во всех сущностях кластера.

    Если фильтр ChaosTargetFilter используется, Chaos создает ошибки только в тех сущностях, которые соответствуют параметрам ChaosTargetFilter.
  optional: true
  syntax:
    content: 'chaosTargetFilter?: ChaosTargetFilter'
    return:
      type:
      - azure-servicefabric.ChaosTargetFilter
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.clusterHealthPolicy
  name: clusterHealthPolicy
  fullName: clusterHealthPolicy
  children: []
  langs:
  - typeScript
  type: property
  summary: Политика работоспособности кластера в переданном используется для проверки работоспособности кластера между итерациями Chaos. Если работоспособность кластера находится в ошибки или происходит непредвиденное исключение во время выполнения ошибки — дать кластеру время в состоянии--Chaos ожидает 30 минут до следующей проверки работоспособности.
  optional: true
  syntax:
    content: 'clusterHealthPolicy?: ClusterHealthPolicy'
    return:
      type:
      - azure-servicefabric.ClusterHealthPolicy
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.context
  name: context
  fullName: context
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    Описывает сопоставление, которое является коллекцией (строка, строка) введите пары "ключ значение". Для записи сведений о запуске Chaos можно использовать карту. Максимальное число таких пар — 100. Каждая строка (ключ или значение) может содержать не более 4095 символов.

    Эту карту настраивает стартер запуска Chaos, чтобы при необходимости сохранять контекст конкретного выполнения.
  optional: true
  syntax:
    content: 'context?: ChaosContext'
    return:
      type:
      - azure-servicefabric.ChaosContext
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.enableMoveReplicaFaults
  name: enableMoveReplicaFaults
  fullName: enableMoveReplicaFaults
  children: []
  langs:
  - typeScript
  type: property
  summary: Включает или отключает перемещении первичной реплики и перемещение вторичной ошибок.
  optional: true
  syntax:
    content: 'enableMoveReplicaFaults?: boolean'
    return:
      type:
      - boolean
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.maxClusterStabilizationTimeoutInSeconds
  name: maxClusterStabilizationTimeoutInSeconds
  fullName: maxClusterStabilizationTimeoutInSeconds
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    Максимальное время ожидания перехода всех сущностей кластера в устойчивое работоспособное состояние.

    Выполнение в Chaos проходит в режиме итераций. В начале каждой итерации выполняется проверка работоспособности сущностей кластера.

    Если сущность кластера не стабильна и не работоспособна в течение периода, заданного в MaxClusterStabilizationTimeoutInSeconds, Chaos генерирует событие сбоя проверки.
  optional: true
  syntax:
    content: 'maxClusterStabilizationTimeoutInSeconds?: number'
    return:
      type:
      - number
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.maxConcurrentFaults
  name: maxConcurrentFaults
  fullName: maxConcurrentFaults
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    MaxConcurrentFaults — максимальное количество одновременных ошибок, вызываемых при итерации.

    Выполнение в Chaos проходит в режиме итераций. Две последующие итерации отделены этапом проверки.

    Чем выше уровень параллелизма, тем более интенсивное внедрение ошибок, что приводит к инициирования более сложные ряд состояний для выявления ошибок.

    Рекомендуется начать со значения 2 или 3 и соблюдать осторожность при его увеличении.
  optional: true
  syntax:
    content: 'maxConcurrentFaults?: number'
    return:
      type:
      - number
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.timeToRunInSeconds
  name: timeToRunInSeconds
  fullName: timeToRunInSeconds
  children: []
  langs:
  - typeScript
  type: property
  summary: 'Общее время выполнения службы Chaos (в секундах) до того, как она будет автоматически остановлена. Максимально допустимое значение: 4 294 967 295 (System.UInt32.MaxValue).'
  optional: true
  syntax:
    content: 'timeToRunInSeconds?: string'
    return:
      type:
      - string
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.waitTimeBetweenFaultsInSeconds
  name: waitTimeBetweenFaultsInSeconds
  fullName: waitTimeBetweenFaultsInSeconds
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    Время ожидания (в секундах) между последовательными сбоями в пределах одной итерации.

    Чем больше значение, тем меньше перекрытие между сбоями и проще последовательность переходов состояний, которым подвергается кластер.

    Рекомендуется начать со значения 1–5 и соблюдать осторожность при его увеличении.
  optional: true
  syntax:
    content: 'waitTimeBetweenFaultsInSeconds?: number'
    return:
      type:
      - number
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.waitTimeBetweenIterationsInSeconds
  name: waitTimeBetweenIterationsInSeconds
  fullName: waitTimeBetweenIterationsInSeconds
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    Интервал времени (в секундах) между двумя последовательными итерациями службы Chaos.

    Чем больше значение этого параметра, тем ниже скорость внедрения ошибок.
  optional: true
  syntax:
    content: 'waitTimeBetweenIterationsInSeconds?: number'
    return:
      type:
      - number
  package: azure-servicefabric
references:
- uid: azure-servicefabric.ChaosTargetFilter
  name: ChaosTargetFilter
  spec.typeScript:
  - name: ChaosTargetFilter
    fullName: ChaosTargetFilter
    uid: azure-servicefabric.ChaosTargetFilter
- uid: azure-servicefabric.ClusterHealthPolicy
  name: ClusterHealthPolicy
  spec.typeScript:
  - name: ClusterHealthPolicy
    fullName: ClusterHealthPolicy
    uid: azure-servicefabric.ClusterHealthPolicy
- uid: azure-servicefabric.ChaosContext
  name: ChaosContext
  spec.typeScript:
  - name: ChaosContext
    fullName: ChaosContext
    uid: azure-servicefabric.ChaosContext
