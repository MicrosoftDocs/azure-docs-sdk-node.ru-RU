### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-monitor.MonitorManagementClientContext'
    name: MonitorManagementClientContext
    fullName: MonitorManagementClientContext
    children:
      - '@azure/arm-monitor.MonitorManagementClientContext.acceptLanguage'
      - '@azure/arm-monitor.MonitorManagementClientContext.beginLongRunningRequest'
      - '@azure/arm-monitor.MonitorManagementClientContext.credentials'
      - '@azure/arm-monitor.MonitorManagementClientContext.longRunningOperationRetryTimeout'
      - '@azure/arm-monitor.MonitorManagementClientContext.constructor'
      - '@azure/arm-monitor.MonitorManagementClientContext.restoreLROPoller'
      - '@azure/arm-monitor.MonitorManagementClientContext.sendLongRunningRequest'
      - '@azure/arm-monitor.MonitorManagementClientContext.sendLRORequest'
      - '@azure/arm-monitor.MonitorManagementClientContext.sendOperationRequest'
      - '@azure/arm-monitor.MonitorManagementClientContext.sendRequest'
      - '@azure/arm-monitor.MonitorManagementClientContext.subscriptionId'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: AzureServiceClient
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.MonitorManagementClientContext.acceptLanguage'
    name: acceptLanguage
    fullName: acceptLanguage
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'acceptLanguage: string'
      return:
        type:
          - string
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.MonitorManagementClientContext.beginLongRunningRequest'
    name: 'beginLongRunningRequest(RequestPrepareOptions | WebResource, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="a7f51-101">Отправить первоначальный запрос LRO (длительные операции) и получить обратно HttpLongRunningOperationResponse, который предоставляет методы для опроса LRO и проверки, если завершения LRO при выполнении.</span><span class="sxs-lookup"><span data-stu-id="a7f51-101">Send the initial request of a LRO (long running operation) and get back an HttpLongRunningOperationResponse that provides methods for polling the LRO and checking if the LRO is finished.</span></span>'
    syntax:
      content: 'function beginLongRunningRequest(request: RequestPrepareOptions | WebResource, options?: RequestOptionsBase)'
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: <span data-ttu-id="a7f51-102">Объект запроса</span><span class="sxs-lookup"><span data-stu-id="a7f51-102">The request object</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.MonitorManagementClientContext.credentials'
    name: credentials
    fullName: credentials
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        type:
          - ServiceClientCredentials
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.MonitorManagementClientContext.longRunningOperationRetryTimeout'
    name: longRunningOperationRetryTimeout
    fullName: longRunningOperationRetryTimeout
    children: []
    langs:
      - typeScript
    type: property
    summary: <span data-ttu-id="a7f51-103">Время ожидания в секундах для длительных операций повтора.</span><span class="sxs-lookup"><span data-stu-id="a7f51-103">The retry timeout in seconds for Long Running Operations.</span></span> <span data-ttu-id="a7f51-104">Значение по умолчанию — 30.</span><span class="sxs-lookup"><span data-stu-id="a7f51-104">Default value is 30.</span></span>
    optional: true
    syntax:
      content: 'longRunningOperationRetryTimeout?: undefined | number'
      return:
        type:
          - undefined | number
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.MonitorManagementClientContext.constructor'
    name: 'MonitorManagementClientContext(ServiceClientCredentials, string, Models.MonitorManagementClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: <span data-ttu-id="a7f51-105">Инициализирует новый экземпляр класса MonitorManagementClient.</span><span class="sxs-lookup"><span data-stu-id="a7f51-105">Initializes a new instance of the MonitorManagementClient class.</span></span>
    syntax:
      content: 'new MonitorManagementClientContext(credentials: ServiceClientCredentials, subscriptionId: string, options?: Models.MonitorManagementClientOptions)'
      parameters:
        - id: credentials
          type:
            - ServiceClientCredentials
          description: '<span data-ttu-id="a7f51-106">Учетные данные, необходимые для клиента для подключения к Azure.</span><span class="sxs-lookup"><span data-stu-id="a7f51-106">Credentials needed for the client to connect to Azure.</span></span>'
        - id: subscriptionId
          type:
            - string
          description: <span data-ttu-id="a7f51-107">Идентификатор подписки Azure.</span><span class="sxs-lookup"><span data-stu-id="a7f51-107">The Azure subscription Id.</span></span>
        - id: options
          type:
            - Models.MonitorManagementClientOptions
          description: ''
          optional: true
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.MonitorManagementClientContext.restoreLROPoller'
    name: restoreLROPoller(LROPollState)
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="a7f51-108">Восстановите LROPoller из предоставленного LROPollState.</span><span class="sxs-lookup"><span data-stu-id="a7f51-108">Restore an LROPoller from the provided LROPollState.</span></span> <span data-ttu-id="a7f51-109">Этот метод может использоваться для повторного создания LROPoller на другом процессе или компьютере.</span><span class="sxs-lookup"><span data-stu-id="a7f51-109">This method can be used to recreate an LROPoller on a different process or machine.</span></span>
    syntax:
      content: 'function restoreLROPoller(lroPollState: LROPollState)'
      parameters:
        - id: lroPollState
          type:
            - LROPollState
          description: ''
      return:
        type:
          - LROPoller
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.MonitorManagementClientContext.sendLongRunningRequest'
    name: 'sendLongRunningRequest(RequestPrepareOptions | WebResource, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="a7f51-110">Предоставляет механизм для выполнения запроса, которая будет опрашивать и предоставляют результат.</span><span class="sxs-lookup"><span data-stu-id="a7f51-110">Provides a mechanism to make a request that will poll and provide the final result.</span></span>'
    syntax:
      content: 'function sendLongRunningRequest(request: RequestPrepareOptions | WebResource, options?: RequestOptionsBase)'
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: <span data-ttu-id="a7f51-111">Объект запроса</span><span class="sxs-lookup"><span data-stu-id="a7f51-111">The request object</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.MonitorManagementClientContext.sendLRORequest'
    name: 'sendLRORequest(OperationArguments, OperationSpec, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="a7f51-112">Отправить первоначальный запрос LRO (длительные операции) и получить обратно LROPoller, который предоставляет методы для опроса LRO и проверки, если завершения LRO при выполнении.</span><span class="sxs-lookup"><span data-stu-id="a7f51-112">Send the initial request of a LRO (long running operation) and get back an LROPoller that provides methods for polling the LRO and checking if the LRO is finished.</span></span>'
    syntax:
      content: 'function sendLRORequest(operationArguments: OperationArguments, operationSpec: OperationSpec, options?: RequestOptionsBase)'
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: <span data-ttu-id="a7f51-113">Аргументы операции.</span><span class="sxs-lookup"><span data-stu-id="a7f51-113">The arguments to the operation.</span></span>
        - id: operationSpec
          type:
            - OperationSpec
          description: <span data-ttu-id="a7f51-114">Спецификация для операции.</span><span class="sxs-lookup"><span data-stu-id="a7f51-114">The specification for the operation.</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: <span data-ttu-id="a7f51-115">Дополнительные параметры для отправляться при создании запроса.</span><span class="sxs-lookup"><span data-stu-id="a7f51-115">Additional options to be sent while making the request.</span></span>
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.MonitorManagementClientContext.sendOperationRequest'
    name: 'sendOperationRequest(OperationArguments, OperationSpec, ServiceCallback<any>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="a7f51-116">Отправьте запрос HTTP, который заполняется с помощью предоставленного OperationSpec.</span><span class="sxs-lookup"><span data-stu-id="a7f51-116">Send an HTTP request that is populated using the provided OperationSpec.</span></span>'
    syntax:
      content: 'function sendOperationRequest(operationArguments: OperationArguments, operationSpec: OperationSpec, callback?: ServiceCallback<any>)'
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: '<span data-ttu-id="a7f51-117">Аргументы, которые будут заполнены шаблонного значения HTTP-запроса из.</span><span class="sxs-lookup"><span data-stu-id="a7f51-117">The arguments that the HTTP request''s templated values will be populated from.</span></span>'
        - id: operationSpec
          type:
            - OperationSpec
          description: '<span data-ttu-id="a7f51-118">OperationSpec, используемые для заполнения httpRequest.</span><span class="sxs-lookup"><span data-stu-id="a7f51-118">The OperationSpec to use to populate the httpRequest.</span></span>'
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            <span data-ttu-id="a7f51-119">Обратный вызов, вызываемый после получения ответа.</span><span class="sxs-lookup"><span data-stu-id="a7f51-119">The callback to call when the response is received.</span></span>
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.MonitorManagementClientContext.sendRequest'
    name: sendRequest(RequestPrepareOptions | WebResource)
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="a7f51-120">Отправьте предоставленный httpRequest.</span><span class="sxs-lookup"><span data-stu-id="a7f51-120">Send the provided httpRequest.</span></span>
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResource)'
      parameters:
        - id: options
          type:
            - RequestPrepareOptions | WebResource
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.MonitorManagementClientContext.subscriptionId'
    name: subscriptionId
    fullName: subscriptionId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'subscriptionId: string'
      return:
        type:
          - string
    package: '@azure/arm-monitor'