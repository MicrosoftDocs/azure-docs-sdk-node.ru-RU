### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-datalake.PathOperations'
    name: PathOperations
    fullName: PathOperations
    children:
      - '@azure/storage-datalake.PathOperations.create'
      - '@azure/storage-datalake.PathOperations.create_2'
      - '@azure/storage-datalake.PathOperations.create_1'
      - '@azure/storage-datalake.PathOperations.deleteMethod'
      - '@azure/storage-datalake.PathOperations.deleteMethod_2'
      - '@azure/storage-datalake.PathOperations.deleteMethod_1'
      - '@azure/storage-datalake.PathOperations.getProperties'
      - '@azure/storage-datalake.PathOperations.getProperties_2'
      - '@azure/storage-datalake.PathOperations.getProperties_1'
      - '@azure/storage-datalake.PathOperations.lease'
      - '@azure/storage-datalake.PathOperations.lease_2'
      - '@azure/storage-datalake.PathOperations.lease_1'
      - '@azure/storage-datalake.PathOperations.list'
      - '@azure/storage-datalake.PathOperations.list_2'
      - '@azure/storage-datalake.PathOperations.list_1'
      - '@azure/storage-datalake.PathOperations.constructor'
      - '@azure/storage-datalake.PathOperations.read'
      - '@azure/storage-datalake.PathOperations.read_2'
      - '@azure/storage-datalake.PathOperations.read_1'
      - '@azure/storage-datalake.PathOperations.update'
      - '@azure/storage-datalake.PathOperations.update_2'
      - '@azure/storage-datalake.PathOperations.update_1'
    langs:
      - typeScript
    type: class
    summary: 'Класс, представляющий PathOperations.'
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.create'
    name: 'create(string, string, Models.PathCreateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Создать или переименовать файл или каталог.    По умолчанию назначения перезаписывается и если назначения уже существует и находится в аренде аренды тоже прекратится.  Эта операция поддерживает условный HTTP-запросов.  Дополнительные сведения см. в разделе [указание условных заголовков для операций службы BLOB-объектов](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
      С ошибкой, если уже существует в месте назначения, использование условного запроса If-None-Match: «*».
    syntax:
      content: 'function create(filesystem: string, path: string, options?: Models.PathCreateOptionalParams)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: options
          type:
            - Models.PathCreateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathCreateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.create_2'
    name: 'create(string, string, PathCreateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function create(filesystem: string, path: string, options: PathCreateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: options
          type:
            - '@azure/storage-datalake.PathCreateOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.PathCreateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.create_1'
    name: 'create(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function create(filesystem: string, path: string, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.PathCreateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.deleteMethod'
    name: 'deleteMethod(string, string, Models.PathDeleteMethodOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Удаление файла или каталога. Эта операция поддерживает условный HTTP-запросов.  Дополнительные сведения см. в разделе [указание условных заголовков для операций службы BLOB-объектов](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).'
    syntax:
      content: 'function deleteMethod(filesystem: string, path: string, options?: Models.PathDeleteMethodOptionalParams)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: options
          type:
            - Models.PathDeleteMethodOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathDeleteResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.deleteMethod_2'
    name: 'deleteMethod(string, string, PathDeleteMethodOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(filesystem: string, path: string, options: PathDeleteMethodOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: options
          type:
            - '@azure/storage-datalake.PathDeleteMethodOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.PathDeleteResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.deleteMethod_1'
    name: 'deleteMethod(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(filesystem: string, path: string, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.PathDeleteResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.getProperties'
    name: 'getProperties(string, string, Models.PathGetPropertiesOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Получение свойств для файла или каталога и выборочно включить список управления доступом.
      Эта операция поддерживает условный HTTP-запросов.  Дополнительные сведения см. в разделе [указание условных заголовков для операций службы BLOB-объектов](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
    syntax:
      content: 'function getProperties(filesystem: string, path: string, options?: Models.PathGetPropertiesOptionalParams)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: options
          type:
            - Models.PathGetPropertiesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathGetPropertiesResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.getProperties_2'
    name: 'getProperties(string, string, PathGetPropertiesOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getProperties(filesystem: string, path: string, options: PathGetPropertiesOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: options
          type:
            - '@azure/storage-datalake.PathGetPropertiesOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.PathGetPropertiesResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.getProperties_1'
    name: 'getProperties(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getProperties(filesystem: string, path: string, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.PathGetPropertiesResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.lease'
    name: 'lease(Models.PathLeaseAction, string, string, Models.PathLeaseOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Создание и управление ими аренды, чтобы ограничить записи и удалить доступ к пути. Эта операция поддерживает условный HTTP-запросов.  Дополнительные сведения см. в разделе [указание условных заголовков для операций службы BLOB-объектов](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).'
    syntax:
      content: 'function lease(xMsLeaseAction: Models.PathLeaseAction, filesystem: string, path: string, options?: Models.PathLeaseOptionalParams)'
      parameters:
        - id: xMsLeaseAction
          type:
            - Models.PathLeaseAction
          description: |-
            Существует пять аренды действия: «получить», «сломается», «изменить», «renew» и «release». Используйте «получить» и укажите «x-ms предложенные lease-id» и «x-ms длительность аренды, —» чтобы получить новую аренду. Используйте для параметра «сломается» для разбиения существующей аренды. При разрыве аренды, период прерывания аренды может пройти, во время которого может выполняться только break и выпуске операции на файл. После успешного прекращения аренды ответ указывает интервал в секундах, пока не могут приобрести новую аренду. Использование «изменить» и укажите текущий идентификатор аренды в «x-ms-lease-id» и новый идентификатор аренды в «x-ms предложенные lease-id», чтобы изменить идентификатор активной аренды. Используйте «Обновить» и укажите «x-ms--идентификатор аренды» для обновления существующей аренды.
            Используйте «выпуск» и укажите «x-ms--идентификатор аренды» освобождения аренды. Возможные значения: «получить», «break», «изменить», «обновить», «release»
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: options
          type:
            - Models.PathLeaseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathLeaseResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.lease_2'
    name: 'lease(Models.PathLeaseAction, string, string, PathLeaseOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function lease(xMsLeaseAction: Models.PathLeaseAction, filesystem: string, path: string, options: PathLeaseOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: xMsLeaseAction
          type:
            - Models.PathLeaseAction
          description: |-
            Существует пять аренды действия: «получить», «сломается», «изменить», «renew» и «release». Используйте «получить» и укажите «x-ms предложенные lease-id» и «x-ms длительность аренды, —» чтобы получить новую аренду. Используйте для параметра «сломается» для разбиения существующей аренды. При разрыве аренды, период прерывания аренды может пройти, во время которого может выполняться только break и выпуске операции на файл. После успешного прекращения аренды ответ указывает интервал в секундах, пока не могут приобрести новую аренду. Использование «изменить» и укажите текущий идентификатор аренды в «x-ms-lease-id» и новый идентификатор аренды в «x-ms предложенные lease-id», чтобы изменить идентификатор активной аренды. Используйте «Обновить» и укажите «x-ms--идентификатор аренды» для обновления существующей аренды.
            Используйте «выпуск» и укажите «x-ms--идентификатор аренды» освобождения аренды. Возможные значения: «получить», «break», «изменить», «обновить», «release»
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: options
          type:
            - '@azure/storage-datalake.PathLeaseOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.PathLeaseResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.lease_1'
    name: 'lease(Models.PathLeaseAction, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function lease(xMsLeaseAction: Models.PathLeaseAction, filesystem: string, path: string, callback: ServiceCallback<void>)'
      parameters:
        - id: xMsLeaseAction
          type:
            - Models.PathLeaseAction
          description: |-
            Существует пять аренды действия: «получить», «сломается», «изменить», «renew» и «release». Используйте «получить» и укажите «x-ms предложенные lease-id» и «x-ms длительность аренды, —» чтобы получить новую аренду. Используйте для параметра «сломается» для разбиения существующей аренды. При разрыве аренды, период прерывания аренды может пройти, во время которого может выполняться только break и выпуске операции на файл. После успешного прекращения аренды ответ указывает интервал в секундах, пока не могут приобрести новую аренду. Использование «изменить» и укажите текущий идентификатор аренды в «x-ms-lease-id» и новый идентификатор аренды в «x-ms предложенные lease-id», чтобы изменить идентификатор активной аренды. Используйте «Обновить» и укажите «x-ms--идентификатор аренды» для обновления существующей аренды.
            Используйте «выпуск» и укажите «x-ms--идентификатор аренды» освобождения аренды. Возможные значения: «получить», «break», «изменить», «обновить», «release»
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.PathLeaseResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.list'
    name: 'list(boolean, string, Models.PathListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Список путей к файловой системе и их свойства.
    syntax:
      content: 'function list(recursive: boolean, filesystem: string, options?: Models.PathListOptionalParams)'
      parameters:
        - id: recursive
          type:
            - boolean
          description: 'Значение «true», перечисляются все пути; в противном случае отображаются только пути в корне файловой системы.  Если указано «каталог», список будет включать только путей, которые совместно используют один корень.'
        - id: filesystem
          type:
            - string
          description: 'Идентификатор файловой системы.  Значение должно начинаться и заканчиваться буквой или номер и должно содержать только буквы, цифры и дефис (-).  Последовательные дефисы не допускаются.  Все буквы должны быть строчными.  Значение должно содержать от 3 до 63 символов.'
        - id: options
          type:
            - Models.PathListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathListResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.list_2'
    name: 'list(boolean, string, PathListOptionalParams, ServiceCallback<PathList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(recursive: boolean, filesystem: string, options: PathListOptionalParams, callback: ServiceCallback<PathList>)'
      parameters:
        - id: recursive
          type:
            - boolean
          description: 'Значение «true», перечисляются все пути; в противном случае отображаются только пути в корне файловой системы.  Если указано «каталог», список будет включать только путей, которые совместно используют один корень.'
        - id: filesystem
          type:
            - string
          description: 'Идентификатор файловой системы.  Значение должно начинаться и заканчиваться буквой или номер и должно содержать только буквы, цифры и дефис (-).  Последовательные дефисы не допускаются.  Все буквы должны быть строчными.  Значение должно содержать от 3 до 63 символов.'
        - id: options
          type:
            - '@azure/storage-datalake.PathListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/storage-datalake.PathList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.PathListResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.list_1'
    name: 'list(boolean, string, ServiceCallback<PathList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(recursive: boolean, filesystem: string, callback: ServiceCallback<PathList>)'
      parameters:
        - id: recursive
          type:
            - boolean
          description: 'Значение «true», перечисляются все пути; в противном случае отображаются только пути в корне файловой системы.  Если указано «каталог», список будет включать только путей, которые совместно используют один корень.'
        - id: filesystem
          type:
            - string
          description: 'Идентификатор файловой системы.  Значение должно начинаться и заканчиваться буквой или номер и должно содержать только буквы, цифры и дефис (-).  Последовательные дефисы не допускаются.  Все буквы должны быть строчными.  Значение должно содержать от 3 до 63 символов.'
        - id: callback
          type:
            - ServiceCallback<@azure/storage-datalake.PathList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.PathListResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.constructor'
    name: PathOperations(DataLakeStorageClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Создайте PathOperations.
    syntax:
      content: 'new PathOperations(client: DataLakeStorageClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/storage-datalake.DataLakeStorageClientContext'
          description: |
            Ссылка на клиента службы.
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.read'
    name: 'read(string, string, Models.PathReadOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Читать содержимое файла.  Для операций чтения поддерживаются запросы диапазонов. Эта операция поддерживает условный HTTP-запросов.  Дополнительные сведения см. в разделе [указание условных заголовков для операций службы BLOB-объектов](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).'
    syntax:
      content: 'function read(filesystem: string, path: string, options?: Models.PathReadOptionalParams)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: options
          type:
            - Models.PathReadOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathReadResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.read_2'
    name: 'read(string, string, PathReadOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function read(filesystem: string, path: string, options: PathReadOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: options
          type:
            - '@azure/storage-datalake.PathReadOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.PathReadResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.read_1'
    name: 'read(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function read(filesystem: string, path: string, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.PathReadResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.update'
    name: 'update(Models.PathUpdateAction, string, string, Models.PathUpdateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Передает данные для добавления в файл, очищает ранее загруженные данные (запись) в файл, задает свойства для файла или каталога или задает элемент управления доступом для файла или каталога. Данные могут добавляться только в файл. Эта операция поддерживает условный HTTP-запросов. Дополнительные сведения см. в разделе [указание условных заголовков для операций службы BLOB-объектов](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).'
    syntax:
      content: 'function update(action: Models.PathUpdateAction, filesystem: string, path: string, options?: Models.PathUpdateOptionalParams)'
      parameters:
        - id: action
          type:
            - Models.PathUpdateAction
          description: 'Действие должно быть «добавить» для отправки данных для добавления в файл «Сброс» для очистки ранее загруженные данные в файл «setProperties», чтобы задать свойства файла или каталога, или «setAccessControl», чтобы задать владельца, группы, разрешения, или доступ к списку управления для файл или каталог.  Обратите внимание на то, что иерархического пространства имен необходимо включить для учетной записи для использования управления доступом.  Также Обратите внимание, что список управления доступом (ACL) включает в себя разрешения владельца, группы, владельцев и другим пользователям, чтобы заголовки запросов x-ms разрешения и x-ms-acl являются взаимоисключающими. Возможные значения: «добавить», «очистить», «setProperties», «setAccessControl»'
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: options
          type:
            - Models.PathUpdateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathUpdateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.update_2'
    name: 'update(Models.PathUpdateAction, string, string, PathUpdateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(action: Models.PathUpdateAction, filesystem: string, path: string, options: PathUpdateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: action
          type:
            - Models.PathUpdateAction
          description: 'Действие должно быть «добавить» для отправки данных для добавления в файл «Сброс» для очистки ранее загруженные данные в файл «setProperties», чтобы задать свойства файла или каталога, или «setAccessControl», чтобы задать владельца, группы, разрешения, или доступ к списку управления для файл или каталог.  Обратите внимание на то, что иерархического пространства имен необходимо включить для учетной записи для использования управления доступом.  Также Обратите внимание, что список управления доступом (ACL) включает в себя разрешения владельца, группы, владельцев и другим пользователям, чтобы заголовки запросов x-ms разрешения и x-ms-acl являются взаимоисключающими. Возможные значения: «добавить», «очистить», «setProperties», «setAccessControl»'
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: options
          type:
            - '@azure/storage-datalake.PathUpdateOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.PathUpdateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.update_1'
    name: 'update(Models.PathUpdateAction, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(action: Models.PathUpdateAction, filesystem: string, path: string, callback: ServiceCallback<void>)'
      parameters:
        - id: action
          type:
            - Models.PathUpdateAction
          description: 'Действие должно быть «добавить» для отправки данных для добавления в файл «Сброс» для очистки ранее загруженные данные в файл «setProperties», чтобы задать свойства файла или каталога, или «setAccessControl», чтобы задать владельца, группы, разрешения, или доступ к списку управления для файл или каталог.  Обратите внимание на то, что иерархического пространства имен необходимо включить для учетной записи для использования управления доступом.  Также Обратите внимание, что список управления доступом (ACL) включает в себя разрешения владельца, группы, владельцев и другим пользователям, чтобы заголовки запросов x-ms разрешения и x-ms-acl являются взаимоисключающими. Возможные значения: «добавить», «очистить», «setProperties», «setAccessControl»'
        - id: filesystem
          type:
            - string
          description: Идентификатор файловой системы.
        - id: path
          type:
            - string
          description: Путь к файлу или каталогу.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.PathUpdateResponse>
    package: '@azure/storage-datalake'
references:
  - uid: '@azure/storage-datalake.DataLakeStorageClientContext'
    name: DataLakeStorageClientContext
    spec.typeScript:
      - name: DataLakeStorageClientContext
        fullName: DataLakeStorageClientContext
        uid: '@azure/storage-datalake.DataLakeStorageClientContext'
  - uid: '@azure/storage-datalake.PathCreateOptionalParams'
    name: PathCreateOptionalParams
    spec.typeScript:
      - name: PathCreateOptionalParams
        fullName: PathCreateOptionalParams
        uid: '@azure/storage-datalake.PathCreateOptionalParams'
  - uid: '@azure/storage-datalake.PathDeleteMethodOptionalParams'
    name: PathDeleteMethodOptionalParams
    spec.typeScript:
      - name: PathDeleteMethodOptionalParams
        fullName: PathDeleteMethodOptionalParams
        uid: '@azure/storage-datalake.PathDeleteMethodOptionalParams'
  - uid: '@azure/storage-datalake.PathGetPropertiesOptionalParams'
    name: PathGetPropertiesOptionalParams
    spec.typeScript:
      - name: PathGetPropertiesOptionalParams
        fullName: PathGetPropertiesOptionalParams
        uid: '@azure/storage-datalake.PathGetPropertiesOptionalParams'
  - uid: '@azure/storage-datalake.PathLeaseOptionalParams'
    name: PathLeaseOptionalParams
    spec.typeScript:
      - name: PathLeaseOptionalParams
        fullName: PathLeaseOptionalParams
        uid: '@azure/storage-datalake.PathLeaseOptionalParams'
  - uid: ServiceCallback<@azure/storage-datalake.PathList>
    name: PathList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PathList
        fullName: PathList
        uid: '@azure/storage-datalake.PathList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-datalake.PathListOptionalParams'
    name: PathListOptionalParams
    spec.typeScript:
      - name: PathListOptionalParams
        fullName: PathListOptionalParams
        uid: '@azure/storage-datalake.PathListOptionalParams'
  - uid: '@azure/storage-datalake.PathReadOptionalParams'
    name: PathReadOptionalParams
    spec.typeScript:
      - name: PathReadOptionalParams
        fullName: PathReadOptionalParams
        uid: '@azure/storage-datalake.PathReadOptionalParams'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams'
    name: PathUpdateOptionalParams
    spec.typeScript:
      - name: PathUpdateOptionalParams
        fullName: PathUpdateOptionalParams
        uid: '@azure/storage-datalake.PathUpdateOptionalParams'