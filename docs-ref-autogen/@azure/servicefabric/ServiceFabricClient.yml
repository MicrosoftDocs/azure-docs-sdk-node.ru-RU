### YamlMime:UniversalReference
items:
  - uid: '@azure/servicefabric.ServiceFabricClient'
    name: ServiceFabricClient
    fullName: ServiceFabricClient
    children:
      - '@azure/servicefabric.ServiceFabricClient.backupPartition'
      - '@azure/servicefabric.ServiceFabricClient.backupPartition_1'
      - '@azure/servicefabric.ServiceFabricClient.backupPartition_2'
      - '@azure/servicefabric.ServiceFabricClient.cancelOperation'
      - '@azure/servicefabric.ServiceFabricClient.cancelOperation_1'
      - '@azure/servicefabric.ServiceFabricClient.cancelOperation_2'
      - '@azure/servicefabric.ServiceFabricClient.cancelRepairTask'
      - '@azure/servicefabric.ServiceFabricClient.cancelRepairTask_2'
      - '@azure/servicefabric.ServiceFabricClient.cancelRepairTask_1'
      - '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession'
      - '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession_1'
      - '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession_2'
      - '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent'
      - '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent_1'
      - '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent_2'
      - '@azure/servicefabric.ServiceFabricClient.createApplication'
      - '@azure/servicefabric.ServiceFabricClient.createApplication_1'
      - '@azure/servicefabric.ServiceFabricClient.createApplication_2'
      - '@azure/servicefabric.ServiceFabricClient.createBackupPolicy'
      - '@azure/servicefabric.ServiceFabricClient.createBackupPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.createBackupPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.createComposeDeployment'
      - '@azure/servicefabric.ServiceFabricClient.createComposeDeployment_1'
      - '@azure/servicefabric.ServiceFabricClient.createComposeDeployment_2'
      - '@azure/servicefabric.ServiceFabricClient.createName'
      - '@azure/servicefabric.ServiceFabricClient.createName_1'
      - '@azure/servicefabric.ServiceFabricClient.createName_2'
      - '@azure/servicefabric.ServiceFabricClient.createRepairTask'
      - '@azure/servicefabric.ServiceFabricClient.createRepairTask_2'
      - '@azure/servicefabric.ServiceFabricClient.createRepairTask_1'
      - '@azure/servicefabric.ServiceFabricClient.createService'
      - '@azure/servicefabric.ServiceFabricClient.createService_1'
      - '@azure/servicefabric.ServiceFabricClient.createService_2'
      - '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate'
      - '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate_1'
      - '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteApplication'
      - '@azure/servicefabric.ServiceFabricClient.deleteApplication_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteApplication_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy'
      - '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent'
      - '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession'
      - '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteName'
      - '@azure/servicefabric.ServiceFabricClient.deleteName_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteName_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteProperty'
      - '@azure/servicefabric.ServiceFabricClient.deleteProperty_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteProperty_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteRepairTask'
      - '@azure/servicefabric.ServiceFabricClient.deleteRepairTask_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteRepairTask_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteService'
      - '@azure/servicefabric.ServiceFabricClient.deleteService_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteService_2'
      - '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode'
      - '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode_1'
      - '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode_2'
      - '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup'
      - '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.disableNode'
      - '@azure/servicefabric.ServiceFabricClient.disableNode_1'
      - '@azure/servicefabric.ServiceFabricClient.disableNode_2'
      - '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup'
      - '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.disableServiceBackup'
      - '@azure/servicefabric.ServiceFabricClient.disableServiceBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.disableServiceBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup'
      - '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.enableNode'
      - '@azure/servicefabric.ServiceFabricClient.enableNode_1'
      - '@azure/servicefabric.ServiceFabricClient.enableNode_2'
      - '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup'
      - '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.enableServiceBackup'
      - '@azure/servicefabric.ServiceFabricClient.enableServiceBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.enableServiceBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask'
      - '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask_2'
      - '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask_1'
      - '@azure/servicefabric.ServiceFabricClient.getAadMetadata'
      - '@azure/servicefabric.ServiceFabricClient.getAadMetadata_1'
      - '@azure/servicefabric.ServiceFabricClient.getAadMetadata_2'
      - '@azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy'
      - '@azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationEventList'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationHealth'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationInfo'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationManifest'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationManifest_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationManifest_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName'
      - '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName_1'
      - '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName_2'
      - '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList'
      - '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList_1'
      - '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList_2'
      - '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation'
      - '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation_1'
      - '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation_2'
      - '@azure/servicefabric.ServiceFabricClient.getChaos'
      - '@azure/servicefabric.ServiceFabricClient.getChaos_1'
      - '@azure/servicefabric.ServiceFabricClient.getChaos_2'
      - '@azure/servicefabric.ServiceFabricClient.getChaosEvents'
      - '@azure/servicefabric.ServiceFabricClient.getChaosEvents_1'
      - '@azure/servicefabric.ServiceFabricClient.getChaosEvents_2'
      - '@azure/servicefabric.ServiceFabricClient.getChaosSchedule'
      - '@azure/servicefabric.ServiceFabricClient.getChaosSchedule_1'
      - '@azure/servicefabric.ServiceFabricClient.getChaosSchedule_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration'
      - '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus'
      - '@azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterEventList'
      - '@azure/servicefabric.ServiceFabricClient.getClusterEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealth'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterLoad'
      - '@azure/servicefabric.ServiceFabricClient.getClusterLoad_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterLoad_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterManifest'
      - '@azure/servicefabric.ServiceFabricClient.getClusterManifest_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterManifest_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress'
      - '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterVersion'
      - '@azure/servicefabric.ServiceFabricClient.getClusterVersion_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterVersion_2'
      - '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus'
      - '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus_1'
      - '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus_2'
      - '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList'
      - '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList_1'
      - '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList_2'
      - '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress'
      - '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress_2'
      - '@azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode'
      - '@azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode_1'
      - '@azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode_2'
      - '@azure/servicefabric.ServiceFabricClient.getContainersEventList'
      - '@azure/servicefabric.ServiceFabricClient.getContainersEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getContainersEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList'
      - '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getDataLossProgress'
      - '@azure/servicefabric.ServiceFabricClient.getDataLossProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getDataLossProgress_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getFaultOperationList'
      - '@azure/servicefabric.ServiceFabricClient.getFaultOperationList_1'
      - '@azure/servicefabric.ServiceFabricClient.getFaultOperationList_2'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreContent'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreContent_1'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreContent_2'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize_1'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize_2'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent_1'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent_2'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize_1'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize_2'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById_1'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById_2'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath_1'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath_2'
      - '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo'
      - '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodeEventList'
      - '@azure/servicefabric.ServiceFabricClient.getNodeEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodeEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodeHealth'
      - '@azure/servicefabric.ServiceFabricClient.getNodeHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodeHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy'
      - '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodeInfo'
      - '@azure/servicefabric.ServiceFabricClient.getNodeInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodeInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodeInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getNodeInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodeInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo'
      - '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodesEventList'
      - '@azure/servicefabric.ServiceFabricClient.getNodesEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodesEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress'
      - '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionEventList'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionHealth'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionInfo'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getPropertyInfo'
      - '@azure/servicefabric.ServiceFabricClient.getPropertyInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getPropertyInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress'
      - '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress_2'
      - '@azure/servicefabric.ServiceFabricClient.getRepairTaskList'
      - '@azure/servicefabric.ServiceFabricClient.getRepairTaskList_1'
      - '@azure/servicefabric.ServiceFabricClient.getRepairTaskList_2'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaHealth'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaInfo'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo'
      - '@azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceBackupList'
      - '@azure/servicefabric.ServiceFabricClient.getServiceBackupList_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceBackupList_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceDescription'
      - '@azure/servicefabric.ServiceFabricClient.getServiceDescription_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceDescription_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceEventList'
      - '@azure/servicefabric.ServiceFabricClient.getServiceEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceHealth'
      - '@azure/servicefabric.ServiceFabricClient.getServiceHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy'
      - '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceInfo'
      - '@azure/servicefabric.ServiceFabricClient.getServiceInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getServiceInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceManifest'
      - '@azure/servicefabric.ServiceFabricClient.getServiceManifest_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceManifest_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo'
      - '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getServicesEventList'
      - '@azure/servicefabric.ServiceFabricClient.getServicesEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getServicesEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName'
      - '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation'
      - '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation_1'
      - '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation_2'
      - '@azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState'
      - '@azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState_1'
      - '@azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState_2'
      - '@azure/servicefabric.ServiceFabricClient.invokeContainerApi'
      - '@azure/servicefabric.ServiceFabricClient.invokeContainerApi_1'
      - '@azure/servicefabric.ServiceFabricClient.invokeContainerApi_2'
      - '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand'
      - '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand_1'
      - '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand_2'
      - '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery'
      - '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery_1'
      - '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery_2'
      - '@azure/servicefabric.ServiceFabricClient.meshApplication'
      - '@azure/servicefabric.ServiceFabricClient.meshCodePackage'
      - '@azure/servicefabric.ServiceFabricClient.meshGateway'
      - '@azure/servicefabric.ServiceFabricClient.meshNetwork'
      - '@azure/servicefabric.ServiceFabricClient.meshSecret'
      - '@azure/servicefabric.ServiceFabricClient.meshSecretValue'
      - '@azure/servicefabric.ServiceFabricClient.meshService'
      - '@azure/servicefabric.ServiceFabricClient.meshServiceReplica'
      - '@azure/servicefabric.ServiceFabricClient.meshVolume'
      - '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica'
      - '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica_1'
      - '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica_2'
      - '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica'
      - '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica_1'
      - '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica_2'
      - '@azure/servicefabric.ServiceFabricClient.postChaosSchedule'
      - '@azure/servicefabric.ServiceFabricClient.postChaosSchedule_1'
      - '@azure/servicefabric.ServiceFabricClient.postChaosSchedule_2'
      - '@azure/servicefabric.ServiceFabricClient.provisionApplicationType'
      - '@azure/servicefabric.ServiceFabricClient.provisionApplicationType_1'
      - '@azure/servicefabric.ServiceFabricClient.provisionApplicationType_2'
      - '@azure/servicefabric.ServiceFabricClient.provisionCluster'
      - '@azure/servicefabric.ServiceFabricClient.provisionCluster_1'
      - '@azure/servicefabric.ServiceFabricClient.provisionCluster_2'
      - '@azure/servicefabric.ServiceFabricClient.putProperty'
      - '@azure/servicefabric.ServiceFabricClient.putProperty_1'
      - '@azure/servicefabric.ServiceFabricClient.putProperty_2'
      - '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions'
      - '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions_1'
      - '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions_2'
      - '@azure/servicefabric.ServiceFabricClient.recoverPartition'
      - '@azure/servicefabric.ServiceFabricClient.recoverPartition_1'
      - '@azure/servicefabric.ServiceFabricClient.recoverPartition_2'
      - '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions'
      - '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions_1'
      - '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions_2'
      - '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions'
      - '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions_1'
      - '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions_2'
      - '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment'
      - '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment_1'
      - '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment_2'
      - '@azure/servicefabric.ServiceFabricClient.removeNodeState'
      - '@azure/servicefabric.ServiceFabricClient.removeNodeState_1'
      - '@azure/servicefabric.ServiceFabricClient.removeNodeState_2'
      - '@azure/servicefabric.ServiceFabricClient.removeReplica'
      - '@azure/servicefabric.ServiceFabricClient.removeReplica_1'
      - '@azure/servicefabric.ServiceFabricClient.removeReplica_2'
      - '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth'
      - '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.reportClusterHealth'
      - '@azure/servicefabric.ServiceFabricClient.reportClusterHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.reportClusterHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth'
      - '@azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth'
      - '@azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.reportNodeHealth'
      - '@azure/servicefabric.ServiceFabricClient.reportNodeHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.reportNodeHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth'
      - '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth'
      - '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.reportServiceHealth'
      - '@azure/servicefabric.ServiceFabricClient.reportServiceHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.reportServiceHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad'
      - '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad_1'
      - '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad_2'
      - '@azure/servicefabric.ServiceFabricClient.resolveService'
      - '@azure/servicefabric.ServiceFabricClient.resolveService_1'
      - '@azure/servicefabric.ServiceFabricClient.resolveService_2'
      - '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage'
      - '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage_1'
      - '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage_2'
      - '@azure/servicefabric.ServiceFabricClient.restartNode'
      - '@azure/servicefabric.ServiceFabricClient.restartNode_1'
      - '@azure/servicefabric.ServiceFabricClient.restartNode_2'
      - '@azure/servicefabric.ServiceFabricClient.restartReplica'
      - '@azure/servicefabric.ServiceFabricClient.restartReplica_1'
      - '@azure/servicefabric.ServiceFabricClient.restartReplica_2'
      - '@azure/servicefabric.ServiceFabricClient.restorePartition'
      - '@azure/servicefabric.ServiceFabricClient.restorePartition_1'
      - '@azure/servicefabric.ServiceFabricClient.restorePartition_2'
      - '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup'
      - '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup'
      - '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup'
      - '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.sendOperationRequest'
      - '@azure/servicefabric.ServiceFabricClient.sendRequest'
      - '@azure/servicefabric.ServiceFabricClient.constructor'
      - '@azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState'
      - '@azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState_1'
      - '@azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState_2'
      - '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.startChaos'
      - '@azure/servicefabric.ServiceFabricClient.startChaos_1'
      - '@azure/servicefabric.ServiceFabricClient.startChaos_2'
      - '@azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.startDataLoss'
      - '@azure/servicefabric.ServiceFabricClient.startDataLoss_1'
      - '@azure/servicefabric.ServiceFabricClient.startDataLoss_2'
      - '@azure/servicefabric.ServiceFabricClient.startNodeTransition'
      - '@azure/servicefabric.ServiceFabricClient.startNodeTransition_1'
      - '@azure/servicefabric.ServiceFabricClient.startNodeTransition_2'
      - '@azure/servicefabric.ServiceFabricClient.startPartitionRestart'
      - '@azure/servicefabric.ServiceFabricClient.startPartitionRestart_1'
      - '@azure/servicefabric.ServiceFabricClient.startPartitionRestart_2'
      - '@azure/servicefabric.ServiceFabricClient.startQuorumLoss'
      - '@azure/servicefabric.ServiceFabricClient.startQuorumLoss_1'
      - '@azure/servicefabric.ServiceFabricClient.startQuorumLoss_2'
      - '@azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.stopChaos'
      - '@azure/servicefabric.ServiceFabricClient.stopChaos_1'
      - '@azure/servicefabric.ServiceFabricClient.stopChaos_2'
      - '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch'
      - '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch_1'
      - '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch_2'
      - '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup'
      - '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup'
      - '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup'
      - '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting'
      - '@azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting_1'
      - '@azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting_2'
      - '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType'
      - '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType_1'
      - '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType_2'
      - '@azure/servicefabric.ServiceFabricClient.unprovisionCluster'
      - '@azure/servicefabric.ServiceFabricClient.unprovisionCluster_1'
      - '@azure/servicefabric.ServiceFabricClient.unprovisionCluster_2'
      - '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy'
      - '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState'
      - '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState_2'
      - '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState_1'
      - '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy'
      - '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.updateService'
      - '@azure/servicefabric.ServiceFabricClient.updateService_1'
      - '@azure/servicefabric.ServiceFabricClient.updateService_2'
      - '@azure/servicefabric.ServiceFabricClient.uploadFile'
      - '@azure/servicefabric.ServiceFabricClient.uploadFile_1'
      - '@azure/servicefabric.ServiceFabricClient.uploadFile_2'
      - '@azure/servicefabric.ServiceFabricClient.uploadFileChunk'
      - '@azure/servicefabric.ServiceFabricClient.uploadFileChunk_1'
      - '@azure/servicefabric.ServiceFabricClient.uploadFileChunk_2'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/servicefabric.ServiceFabricClientContext'
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.backupPartition'
    name: 'backupPartition(string, Models.ServiceFabricClientBackupPartitionOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Создает резервную копию состояния с отслеживанием состояния сохраненного разделов. На случай, если раздел уже периодически резервного копирования, то по умолчанию новая резервная копия создается в том же хранилище резервных копий. Также же можно переопределить, указав сведения хранилища резервных копий как часть текста запроса. После запуска резервного копирования, ход его выполнения можно отслеживать с помощью операции GetBackupProgress.
      В случае истечения времени ожидания операции, больше времени ожидания резервного копирования в значение параметра запроса.
    syntax:
      content: 'function backupPartition(partitionId: string, options?: Models.ServiceFabricClientBackupPartitionOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientBackupPartitionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.backupPartition_1'
    name: 'backupPartition(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function backupPartition(partitionId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.backupPartition_2'
    name: 'backupPartition(string, ServiceFabricClientBackupPartitionOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function backupPartition(partitionId: string, options: ServiceFabricClientBackupPartitionOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientBackupPartitionOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.cancelOperation'
    name: 'cancelOperation(string, boolean, Models.ServiceFabricClientCancelOperationOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Следующие API начала сбоя операции, которые может быть сокращен, с помощью CancelOperation: StartDataLoss StartQuorumLoss StartPartitionRestart, использованием StartNodeTransition.
      Если для force задано значение false, то указанная операция, вызываемая пользователем, будет корректно остановлена и очищена.  Если для force задано значение true, команда будет прервана и внутреннее состояние может проигнорироваться.  Следует с осторожностью использовать true в качестве значения force.  Если для force задано значение true, вызов этого API будет запрещен, пока этот API не будет вызван в той же тестовой команде, в которой для force задано значение false, или же если в команде параметр OperationState уже имеет значение OperationState.RollingBack.
      Пояснение: OperationState.RollingBack означает, что система будет быть/Очистка состояния внутренней системы, из-за выполнения команды.  Данные не восстановятся, если тестовая команда привела к их потере.  Например, если вызвать StartDataLoss, а затем этот API, система только очистит внутреннее состояние от запуска команды.
      Данные целевой секции не восстановятся, если команда выполнялась достаточное время, что вызвало потерю данных.

      Важное примечание: Если этот API вызывается с force == true, внутреннего состояния могут остаться.
    syntax:
      content: 'function cancelOperation(operationId: string, force: boolean, options?: Models.ServiceFabricClientCancelOperationOptionalParams)'
      parameters:
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: force
          type:
            - boolean
          description: 'Указывает, следует ли корректно выполнить откат и очистить внутреннее состояние системы, изменяемое при выполнении операции, вызываемой пользователем.'
        - id: options
          type:
            - Models.ServiceFabricClientCancelOperationOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.cancelOperation_1'
    name: 'cancelOperation(string, boolean, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function cancelOperation(operationId: string, force: boolean, callback: ServiceCallback<void>)'
      parameters:
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: force
          type:
            - boolean
          description: 'Указывает, следует ли корректно выполнить откат и очистить внутреннее состояние системы, изменяемое при выполнении операции, вызываемой пользователем.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.cancelOperation_2'
    name: 'cancelOperation(string, boolean, ServiceFabricClientCancelOperationOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function cancelOperation(operationId: string, force: boolean, options: ServiceFabricClientCancelOperationOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: force
          type:
            - boolean
          description: 'Указывает, следует ли корректно выполнить откат и очистить внутреннее состояние системы, изменяемое при выполнении операции, вызываемой пользователем.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientCancelOperationOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.cancelRepairTask'
    name: 'cancelRepairTask(RepairTaskCancelDescription, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Этот API поддерживает платформу Service Fabric. Он не предназначен для использования непосредственно в коде.
    syntax:
      content: 'function cancelRepairTask(repairTaskCancelDescription: RepairTaskCancelDescription, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: repairTaskCancelDescription
          type:
            - '@azure/servicefabric.RepairTaskCancelDescription'
          description: Описывает задачи исправления должны быть отменены.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CancelRepairTaskResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.cancelRepairTask_2'
    name: 'cancelRepairTask(RepairTaskCancelDescription, RequestOptionsBase, ServiceCallback<RepairTaskUpdateInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function cancelRepairTask(repairTaskCancelDescription: RepairTaskCancelDescription, options: RequestOptionsBase, callback: ServiceCallback<RepairTaskUpdateInfo>)'
      parameters:
        - id: repairTaskCancelDescription
          type:
            - '@azure/servicefabric.RepairTaskCancelDescription'
          description: Описывает задачи исправления должны быть отменены.
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.CancelRepairTaskResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.cancelRepairTask_1'
    name: 'cancelRepairTask(RepairTaskCancelDescription, ServiceCallback<RepairTaskUpdateInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function cancelRepairTask(repairTaskCancelDescription: RepairTaskCancelDescription, callback: ServiceCallback<RepairTaskUpdateInfo>)'
      parameters:
        - id: repairTaskCancelDescription
          type:
            - '@azure/servicefabric.RepairTaskCancelDescription'
          description: Описывает задачи исправления должны быть отменены.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.CancelRepairTaskResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession'
    name: 'commitImageStoreUploadSession(string, Models.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'При отправке все фрагменты файла сеанса передачи требуется зафиксировать явным образом, для завершения обновления. Хранилище образов сохраняет сеанс отправки до истечения срока действия, 30 минут после получения последнего фрагмента данных.'
    syntax:
      content: 'function commitImageStoreUploadSession(sessionId: string, options?: Models.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams)'
      parameters:
        - id: sessionId
          type:
            - string
          description: 'Идентификатор GUID, создаваемых пользователем для загрузки файлов. Он идентифицирует сеанс передачи образа хранилища, который отслеживает все фрагменты файла пока она не будет зафиксирована.'
        - id: options
          type:
            - Models.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession_1'
    name: 'commitImageStoreUploadSession(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function commitImageStoreUploadSession(sessionId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: sessionId
          type:
            - string
          description: 'Идентификатор GUID, создаваемых пользователем для загрузки файлов. Он идентифицирует сеанс передачи образа хранилища, который отслеживает все фрагменты файла пока она не будет зафиксирована.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession_2'
    name: 'commitImageStoreUploadSession(string, ServiceFabricClientCommitImageStoreUploadSessionOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function commitImageStoreUploadSession(sessionId: string, options: ServiceFabricClientCommitImageStoreUploadSessionOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: sessionId
          type:
            - string
          description: 'Идентификатор GUID, создаваемых пользователем для загрузки файлов. Он идентифицирует сеанс передачи образа хранилища, который отслеживает все фрагменты файла пока она не будет зафиксирована.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent'
    name: 'copyImageStoreContent(ImageStoreCopyDescription, Models.ServiceFabricClientCopyImageStoreContentOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Копирует содержимое из хранилища образов из исходного хранилища относительный путь к изображению назначения хранилища относительный путь к изображению.
    syntax:
      content: 'function copyImageStoreContent(imageStoreCopyDescription: ImageStoreCopyDescription, options?: Models.ServiceFabricClientCopyImageStoreContentOptionalParams)'
      parameters:
        - id: imageStoreCopyDescription
          type:
            - '@azure/servicefabric.ImageStoreCopyDescription'
          description: Описание копирования для хранилища образов.
        - id: options
          type:
            - Models.ServiceFabricClientCopyImageStoreContentOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent_1'
    name: 'copyImageStoreContent(ImageStoreCopyDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function copyImageStoreContent(imageStoreCopyDescription: ImageStoreCopyDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: imageStoreCopyDescription
          type:
            - '@azure/servicefabric.ImageStoreCopyDescription'
          description: Описание копирования для хранилища образов.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent_2'
    name: 'copyImageStoreContent(ImageStoreCopyDescription, ServiceFabricClientCopyImageStoreContentOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function copyImageStoreContent(imageStoreCopyDescription: ImageStoreCopyDescription, options: ServiceFabricClientCopyImageStoreContentOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: imageStoreCopyDescription
          type:
            - '@azure/servicefabric.ImageStoreCopyDescription'
          description: Описание копирования для хранилища образов.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientCopyImageStoreContentOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createApplication'
    name: 'createApplication(ApplicationDescription, Models.ServiceFabricClientCreateApplicationOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Создает приложение Service Fabric с помощью указанного описания.
    syntax:
      content: 'function createApplication(applicationDescription: ApplicationDescription, options?: Models.ServiceFabricClientCreateApplicationOptionalParams)'
      parameters:
        - id: applicationDescription
          type:
            - '@azure/servicefabric.ApplicationDescription'
          description: Описание для создания приложения.
        - id: options
          type:
            - Models.ServiceFabricClientCreateApplicationOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createApplication_1'
    name: 'createApplication(ApplicationDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createApplication(applicationDescription: ApplicationDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationDescription
          type:
            - '@azure/servicefabric.ApplicationDescription'
          description: Описание для создания приложения.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createApplication_2'
    name: 'createApplication(ApplicationDescription, ServiceFabricClientCreateApplicationOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createApplication(applicationDescription: ApplicationDescription, options: ServiceFabricClientCreateApplicationOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationDescription
          type:
            - '@azure/servicefabric.ApplicationDescription'
          description: Описание для создания приложения.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientCreateApplicationOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createBackupPolicy'
    name: 'createBackupPolicy(BackupPolicyDescription, Models.ServiceFabricClientCreateBackupPolicyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Создает политику резервного копирования, который можно связать позже с помощью приложения Service Fabric, службы или секции для периодического резервного копирования.'
    syntax:
      content: 'function createBackupPolicy(backupPolicyDescription: BackupPolicyDescription, options?: Models.ServiceFabricClientCreateBackupPolicyOptionalParams)'
      parameters:
        - id: backupPolicyDescription
          type:
            - '@azure/servicefabric.BackupPolicyDescription'
          description: Описывает политику резервного копирования.
        - id: options
          type:
            - Models.ServiceFabricClientCreateBackupPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createBackupPolicy_1'
    name: 'createBackupPolicy(BackupPolicyDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createBackupPolicy(backupPolicyDescription: BackupPolicyDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: backupPolicyDescription
          type:
            - '@azure/servicefabric.BackupPolicyDescription'
          description: Описывает политику резервного копирования.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createBackupPolicy_2'
    name: 'createBackupPolicy(BackupPolicyDescription, ServiceFabricClientCreateBackupPolicyOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createBackupPolicy(backupPolicyDescription: BackupPolicyDescription, options: ServiceFabricClientCreateBackupPolicyOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: backupPolicyDescription
          type:
            - '@azure/servicefabric.BackupPolicyDescription'
          description: Описывает политику резервного копирования.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientCreateBackupPolicyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createComposeDeployment'
    name: 'createComposeDeployment(CreateComposeDeploymentDescription, Models.ServiceFabricClientCreateComposeDeploymentOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Compose — это формат файла, который описывает многоконтейнерных приложений. Этот API позволяет развертывание приложений на основе контейнеров, определенных в compose формат в кластере Service Fabric. После создания развертывания его состояние можно отслеживать с помощью `GetComposeDeploymentStatus` API.'
    syntax:
      content: 'function createComposeDeployment(createComposeDeploymentDescription: CreateComposeDeploymentDescription, options?: Models.ServiceFabricClientCreateComposeDeploymentOptionalParams)'
      parameters:
        - id: createComposeDeploymentDescription
          type:
            - '@azure/servicefabric.CreateComposeDeploymentDescription'
          description: 'Описывает развертывание compose, который должен быть создан.'
        - id: options
          type:
            - Models.ServiceFabricClientCreateComposeDeploymentOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createComposeDeployment_1'
    name: 'createComposeDeployment(CreateComposeDeploymentDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createComposeDeployment(createComposeDeploymentDescription: CreateComposeDeploymentDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: createComposeDeploymentDescription
          type:
            - '@azure/servicefabric.CreateComposeDeploymentDescription'
          description: 'Описывает развертывание compose, который должен быть создан.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createComposeDeployment_2'
    name: 'createComposeDeployment(CreateComposeDeploymentDescription, ServiceFabricClientCreateComposeDeploymentOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createComposeDeployment(createComposeDeploymentDescription: CreateComposeDeploymentDescription, options: ServiceFabricClientCreateComposeDeploymentOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: createComposeDeploymentDescription
          type:
            - '@azure/servicefabric.CreateComposeDeploymentDescription'
          description: 'Описывает развертывание compose, который должен быть создан.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientCreateComposeDeploymentOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createName'
    name: 'createName(NameDescription, Models.ServiceFabricClientCreateNameOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Создает указанное имя Service Fabric.
    syntax:
      content: 'function createName(nameDescription: NameDescription, options?: Models.ServiceFabricClientCreateNameOptionalParams)'
      parameters:
        - id: nameDescription
          type:
            - '@azure/servicefabric.NameDescription'
          description: Описывает имя Service Fabric должен быть создан.
        - id: options
          type:
            - Models.ServiceFabricClientCreateNameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createName_1'
    name: 'createName(NameDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createName(nameDescription: NameDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: nameDescription
          type:
            - '@azure/servicefabric.NameDescription'
          description: Описывает имя Service Fabric должен быть создан.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createName_2'
    name: 'createName(NameDescription, ServiceFabricClientCreateNameOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createName(nameDescription: NameDescription, options: ServiceFabricClientCreateNameOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nameDescription
          type:
            - '@azure/servicefabric.NameDescription'
          description: Описывает имя Service Fabric должен быть создан.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientCreateNameOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createRepairTask'
    name: 'createRepairTask(RepairTask, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Для кластеров, настроить службу диспетчера восстановления этот API предоставляет способ создания задач восстановления, выполняемые автоматически или вручную.
      Для задач восстановления, которые запускаются автоматически исполнитель соответствующие восстановления должна быть запущена для каждого действия восстановления для автоматического запуска.
      Они сейчас доступны только в специально настроенные облачных служб Azure.
      Чтобы создать задачу восстановления вручную, укажите набор имен затронутого узла и ожидаемому влиянию. Если изменения утверждены задач состояние созданный восстановления, можно безопасно выполнить действий по восстановлению на этих узлах.

      Этот API поддерживает платформу Service Fabric. Он не предназначен для использования непосредственно в коде.
    syntax:
      content: 'function createRepairTask(repairTask: RepairTask, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: repairTask
          type:
            - '@azure/servicefabric.RepairTask'
          description: Описание задачи восстановления для создания или обновления.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CreateRepairTaskResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createRepairTask_2'
    name: 'createRepairTask(RepairTask, RequestOptionsBase, ServiceCallback<RepairTaskUpdateInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createRepairTask(repairTask: RepairTask, options: RequestOptionsBase, callback: ServiceCallback<RepairTaskUpdateInfo>)'
      parameters:
        - id: repairTask
          type:
            - '@azure/servicefabric.RepairTask'
          description: Описание задачи восстановления для создания или обновления.
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.CreateRepairTaskResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createRepairTask_1'
    name: 'createRepairTask(RepairTask, ServiceCallback<RepairTaskUpdateInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createRepairTask(repairTask: RepairTask, callback: ServiceCallback<RepairTaskUpdateInfo>)'
      parameters:
        - id: repairTask
          type:
            - '@azure/servicefabric.RepairTask'
          description: Описание задачи восстановления для создания или обновления.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.CreateRepairTaskResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createService'
    name: 'createService(string, Models.ServiceDescriptionUnion, Models.ServiceFabricClientCreateServiceOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Этот api позволяет создавать новые службы Service Fabric с отслеживанием или без отслеживания состояния в указанное приложение Service Fabric. Описание для создания службы включает секционирование сведения и дополнительные свойства для размещения и балансировки нагрузки. Некоторые свойства можно позже изменить, используя `UpdateService` API.'
    syntax:
      content: 'function createService(applicationId: string, serviceDescription: Models.ServiceDescriptionUnion, options?: Models.ServiceFabricClientCreateServiceOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceDescription
          type:
            - Models.ServiceDescriptionUnion
          description: 'Сведения, необходимые для создания службы.'
        - id: options
          type:
            - Models.ServiceFabricClientCreateServiceOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createService_1'
    name: 'createService(string, Models.ServiceDescriptionUnion, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createService(applicationId: string, serviceDescription: Models.ServiceDescriptionUnion, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceDescription
          type:
            - Models.ServiceDescriptionUnion
          description: 'Сведения, необходимые для создания службы.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createService_2'
    name: 'createService(string, Models.ServiceDescriptionUnion, ServiceFabricClientCreateServiceOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createService(applicationId: string, serviceDescription: Models.ServiceDescriptionUnion, options: ServiceFabricClientCreateServiceOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceDescription
          type:
            - Models.ServiceDescriptionUnion
          description: 'Сведения, необходимые для создания службы.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientCreateServiceOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate'
    name: 'createServiceFromTemplate(string, ServiceFromTemplateDescription, Models.ServiceFabricClientCreateServiceFromTemplateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Создает службу Service Fabric из шаблона службы, определенные в манифесте приложения.
      Шаблон службы содержит свойства, будет одинаковым для экземпляра службы того же типа. Интерфейс API позволяет, переопределив свойства, которые обычно отличаются для разных служб одного типа службы.
    syntax:
      content: 'function createServiceFromTemplate(applicationId: string, serviceFromTemplateDescription: ServiceFromTemplateDescription, options?: Models.ServiceFabricClientCreateServiceFromTemplateOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceFromTemplateDescription
          type:
            - '@azure/servicefabric.ServiceFromTemplateDescription'
          description: 'Описывает службу, которая должна быть создана на основе шаблона, определенных в манифесте приложения.'
        - id: options
          type:
            - Models.ServiceFabricClientCreateServiceFromTemplateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate_1'
    name: 'createServiceFromTemplate(string, ServiceFromTemplateDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createServiceFromTemplate(applicationId: string, serviceFromTemplateDescription: ServiceFromTemplateDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceFromTemplateDescription
          type:
            - '@azure/servicefabric.ServiceFromTemplateDescription'
          description: 'Описывает службу, которая должна быть создана на основе шаблона, определенных в манифесте приложения.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate_2'
    name: 'createServiceFromTemplate(string, ServiceFromTemplateDescription, ServiceFabricClientCreateServiceFromTemplateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createServiceFromTemplate(applicationId: string, serviceFromTemplateDescription: ServiceFromTemplateDescription, options: ServiceFabricClientCreateServiceFromTemplateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceFromTemplateDescription
          type:
            - '@azure/servicefabric.ServiceFromTemplateDescription'
          description: 'Описывает службу, которая должна быть создана на основе шаблона, определенных в манифесте приложения.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientCreateServiceFromTemplateOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteApplication'
    name: 'deleteApplication(string, Models.ServiceFabricClientDeleteApplicationOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Приложение должно быть создано, прежде чем его можно будет удалить. При удалении приложения удаляются все службы, которые входят в состав этого приложения. По умолчанию Service Fabric попытается нормально закрыть реплики службы, а затем удалит службу. Однако если из-за проблем в работе службы нормально закрыть реплики не удалось, операция удаления может длиться много времени или оказаться заблокированной.
      Используйте необязательный флаг ForceRemove, чтобы пропустить последовательность нормального закрытия и принудительно удалить приложение и все его службы.
    syntax:
      content: 'function deleteApplication(applicationId: string, options?: Models.ServiceFabricClientDeleteApplicationOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientDeleteApplicationOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteApplication_1'
    name: 'deleteApplication(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteApplication(applicationId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteApplication_2'
    name: 'deleteApplication(string, ServiceFabricClientDeleteApplicationOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteApplication(applicationId: string, options: ServiceFabricClientDeleteApplicationOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientDeleteApplicationOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy'
    name: 'deleteBackupPolicy(string, Models.ServiceFabricClientDeleteBackupPolicyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Удаляет существующую политику резервного копирования. Необходимо создать политику резервного копирования, перед его удалением. В настоящее время активную политику резервного копирования, связанные с приложение Service Fabric, службы или секции, нельзя удалить без удаления сопоставление.'
    syntax:
      content: 'function deleteBackupPolicy(backupPolicyName: string, options?: Models.ServiceFabricClientDeleteBackupPolicyOptionalParams)'
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: Имя политики резервного копирования.
        - id: options
          type:
            - Models.ServiceFabricClientDeleteBackupPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy_1'
    name: 'deleteBackupPolicy(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteBackupPolicy(backupPolicyName: string, callback: ServiceCallback<void>)'
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: Имя политики резервного копирования.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy_2'
    name: 'deleteBackupPolicy(string, ServiceFabricClientDeleteBackupPolicyOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteBackupPolicy(backupPolicyName: string, options: ServiceFabricClientDeleteBackupPolicyOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: Имя политики резервного копирования.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientDeleteBackupPolicyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent'
    name: 'deleteImageStoreContent(string, Models.ServiceFabricClientDeleteImageStoreContentOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Удаляет существующее содержимое хранилища образов, обнаруженное по заданному относительному пути к хранилищу образов.
      Эту команду можно использовать для удаления переданных пакетов приложения после их подготовки.
    syntax:
      content: 'function deleteImageStoreContent(contentPath: string, options?: Models.ServiceFabricClientDeleteImageStoreContentOptionalParams)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: options
          type:
            - Models.ServiceFabricClientDeleteImageStoreContentOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent_1'
    name: 'deleteImageStoreContent(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteImageStoreContent(contentPath: string, callback: ServiceCallback<void>)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent_2'
    name: 'deleteImageStoreContent(string, ServiceFabricClientDeleteImageStoreContentOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteImageStoreContent(contentPath: string, options: ServiceFabricClientDeleteImageStoreContentOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientDeleteImageStoreContentOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession'
    name: 'deleteImageStoreUploadSession(string, Models.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Запрос на удаление приведет к существующего сеанса передачи срока действия и удалить все блоки по ранее отправленный файл.
    syntax:
      content: 'function deleteImageStoreUploadSession(sessionId: string, options?: Models.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams)'
      parameters:
        - id: sessionId
          type:
            - string
          description: 'Идентификатор GUID, создаваемых пользователем для загрузки файлов. Он идентифицирует сеанс передачи образа хранилища, который отслеживает все фрагменты файла пока она не будет зафиксирована.'
        - id: options
          type:
            - Models.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession_1'
    name: 'deleteImageStoreUploadSession(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteImageStoreUploadSession(sessionId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: sessionId
          type:
            - string
          description: 'Идентификатор GUID, создаваемых пользователем для загрузки файлов. Он идентифицирует сеанс передачи образа хранилища, который отслеживает все фрагменты файла пока она не будет зафиксирована.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession_2'
    name: 'deleteImageStoreUploadSession(string, ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteImageStoreUploadSession(sessionId: string, options: ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: sessionId
          type:
            - string
          description: 'Идентификатор GUID, создаваемых пользователем для загрузки файлов. Он идентифицирует сеанс передачи образа хранилища, который отслеживает все фрагменты файла пока она не будет зафиксирована.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteName'
    name: 'deleteName(string, Models.ServiceFabricClientDeleteNameOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Удаляет указанное имя Service Fabric. Имя необходимо создать перед его удалением.
      Удаление имени с помощью свойства дочерних элементов не удастся.
    syntax:
      content: 'function deleteName(nameId: string, options?: Models.ServiceFabricClientDeleteNameOptionalParams)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: options
          type:
            - Models.ServiceFabricClientDeleteNameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteName_1'
    name: 'deleteName(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteName(nameId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteName_2'
    name: 'deleteName(string, ServiceFabricClientDeleteNameOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteName(nameId: string, options: ServiceFabricClientDeleteNameOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientDeleteNameOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteProperty'
    name: 'deleteProperty(string, string, Models.ServiceFabricClientDeletePropertyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Удаляет указанное свойство Service Fabric с указанным именем. Свойство должно быть создано, прежде чем его можно будет удалить.'
    syntax:
      content: 'function deleteProperty(nameId: string, propertyName: string, options?: Models.ServiceFabricClientDeletePropertyOptionalParams)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: propertyName
          type:
            - string
          description: Указывает имя возвращаемого свойства.
        - id: options
          type:
            - Models.ServiceFabricClientDeletePropertyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteProperty_1'
    name: 'deleteProperty(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteProperty(nameId: string, propertyName: string, callback: ServiceCallback<void>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: propertyName
          type:
            - string
          description: Указывает имя возвращаемого свойства.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteProperty_2'
    name: 'deleteProperty(string, string, ServiceFabricClientDeletePropertyOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteProperty(nameId: string, propertyName: string, options: ServiceFabricClientDeletePropertyOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: propertyName
          type:
            - string
          description: Указывает имя возвращаемого свойства.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientDeletePropertyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteRepairTask'
    name: 'deleteRepairTask(RepairTaskDeleteDescription, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Этот API поддерживает платформу Service Fabric. Он не предназначен для использования непосредственно в коде.
    syntax:
      content: 'function deleteRepairTask(repairTaskDeleteDescription: RepairTaskDeleteDescription, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: repairTaskDeleteDescription
          type:
            - '@azure/servicefabric.RepairTaskDeleteDescription'
          description: Описание задачи восстановления для удаления.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteRepairTask_2'
    name: 'deleteRepairTask(RepairTaskDeleteDescription, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteRepairTask(repairTaskDeleteDescription: RepairTaskDeleteDescription, options: RequestOptionsBase, callback: ServiceCallback<void>)'
      parameters:
        - id: repairTaskDeleteDescription
          type:
            - '@azure/servicefabric.RepairTaskDeleteDescription'
          description: Описание задачи восстановления для удаления.
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteRepairTask_1'
    name: 'deleteRepairTask(RepairTaskDeleteDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteRepairTask(repairTaskDeleteDescription: RepairTaskDeleteDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: repairTaskDeleteDescription
          type:
            - '@azure/servicefabric.RepairTaskDeleteDescription'
          description: Описание задачи восстановления для удаления.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteService'
    name: 'deleteService(string, Models.ServiceFabricClientDeleteServiceOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Служба должна быть создана, прежде чем ее можно будет удалить. По умолчанию Service Fabric попытается нормально закрыть реплики службы, а затем удалит службу. Но если из-за проблем в работе службы нормально закрыть реплики не удается, операция удаления может занять много времени или зависнуть. Используйте необязательный флаг ForceRemove, чтобы пропустить последовательность нормального закрытия и принудительно удалить службу.'
    syntax:
      content: 'function deleteService(serviceId: string, options?: Models.ServiceFabricClientDeleteServiceOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientDeleteServiceOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteService_1'
    name: 'deleteService(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteService(serviceId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteService_2'
    name: 'deleteService(string, ServiceFabricClientDeleteServiceOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteService(serviceId: string, options: ServiceFabricClientDeleteServiceOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientDeleteServiceOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode'
    name: 'deployServicePackageToNode(string, DeployServicePackageToNodeDescription, Models.ServiceFabricClientDeployServicePackageToNodeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Этот API предоставляет способ загрузки пакетов кода, включая образы контейнеров на определенном узле за пределами развертывания нормальную работу приложения и путь обновления. Это полезно для больших кода пакеты и образы контейнеров, должны присутствовать на узле до развертывания приложения и обновления, тем самым значительно уменьшить общее время, необходимое для развертывания или обновления.'
    syntax:
      content: 'function deployServicePackageToNode(nodeName: string, deployServicePackageToNodeDescription: DeployServicePackageToNodeDescription, options?: Models.ServiceFabricClientDeployServicePackageToNodeOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: deployServicePackageToNodeDescription
          type:
            - '@azure/servicefabric.DeployServicePackageToNodeDescription'
          description: Описывает сведения о развертывании пакета службы в узле Service Fabric.
        - id: options
          type:
            - Models.ServiceFabricClientDeployServicePackageToNodeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode_1'
    name: 'deployServicePackageToNode(string, DeployServicePackageToNodeDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deployServicePackageToNode(nodeName: string, deployServicePackageToNodeDescription: DeployServicePackageToNodeDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: deployServicePackageToNodeDescription
          type:
            - '@azure/servicefabric.DeployServicePackageToNodeDescription'
          description: Описывает сведения о развертывании пакета службы в узле Service Fabric.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode_2'
    name: 'deployServicePackageToNode(string, DeployServicePackageToNodeDescription, ServiceFabricClientDeployServicePackageToNodeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deployServicePackageToNode(nodeName: string, deployServicePackageToNodeDescription: DeployServicePackageToNodeDescription, options: ServiceFabricClientDeployServicePackageToNodeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: deployServicePackageToNodeDescription
          type:
            - '@azure/servicefabric.DeployServicePackageToNodeDescription'
          description: Описывает сведения о развертывании пакета службы в узле Service Fabric.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientDeployServicePackageToNodeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup'
    name: 'disableApplicationBackup(string, Models.ServiceFabricClientDisableApplicationBackupOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Отключает периодическое резервное копирование приложения Service Fabric, которая ранее была включена.'
    syntax:
      content: 'function disableApplicationBackup(applicationId: string, options?: Models.ServiceFabricClientDisableApplicationBackupOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientDisableApplicationBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup_1'
    name: 'disableApplicationBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function disableApplicationBackup(applicationId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup_2'
    name: 'disableApplicationBackup(string, ServiceFabricClientDisableApplicationBackupOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function disableApplicationBackup(applicationId: string, options: ServiceFabricClientDisableApplicationBackupOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientDisableApplicationBackupOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableNode'
    name: 'disableNode(string, DeactivationIntentDescription, Models.ServiceFabricClientDisableNodeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Деактивирует узел кластера Service Fabric с указанной целью деактивации. После запуска деактивации ее уровень цели можно увеличить, но не понизить (например, узел, который деактивируется с целью приостановки, можно деактивировать с целью перезагрузки, но не наоборот). Узлы могут быть повторно активированы с помощью операции активации узла в любой момент после деактивации. Если деактивация не завершена, то она отменяется. Узел, доступность которого утрачивается и восстанавливается при деактивации, все равно необходимо будет активировать, прежде чем на нем разместят службы.'
    syntax:
      content: 'function disableNode(nodeName: string, deactivationIntentDescription: DeactivationIntentDescription, options?: Models.ServiceFabricClientDisableNodeOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: deactivationIntentDescription
          type:
            - '@azure/servicefabric.DeactivationIntentDescription'
          description: Описывает цель или причину деактивация узла.
        - id: options
          type:
            - Models.ServiceFabricClientDisableNodeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableNode_1'
    name: 'disableNode(string, DeactivationIntentDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function disableNode(nodeName: string, deactivationIntentDescription: DeactivationIntentDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: deactivationIntentDescription
          type:
            - '@azure/servicefabric.DeactivationIntentDescription'
          description: Описывает цель или причину деактивация узла.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableNode_2'
    name: 'disableNode(string, DeactivationIntentDescription, ServiceFabricClientDisableNodeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function disableNode(nodeName: string, deactivationIntentDescription: DeactivationIntentDescription, options: ServiceFabricClientDisableNodeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: deactivationIntentDescription
          type:
            - '@azure/servicefabric.DeactivationIntentDescription'
          description: Описывает цель или причину деактивация узла.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientDisableNodeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup'
    name: 'disablePartitionBackup(string, Models.ServiceFabricClientDisablePartitionBackupOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Отключает периодическое резервное копирование секции, которая ранее была включена. Резервное копирование должно быть явно включено, прежде чем его можно отключить.
      В случае, если резервное копирование включено для приложения Service Fabric или службу, которая этот раздел является частью, она будет продолжать периодически создавать резервные копии согласно политике, сопоставленный в более поздней версии сущность уровня.
    syntax:
      content: 'function disablePartitionBackup(partitionId: string, options?: Models.ServiceFabricClientDisablePartitionBackupOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientDisablePartitionBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup_1'
    name: 'disablePartitionBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function disablePartitionBackup(partitionId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup_2'
    name: 'disablePartitionBackup(string, ServiceFabricClientDisablePartitionBackupOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function disablePartitionBackup(partitionId: string, options: ServiceFabricClientDisablePartitionBackupOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientDisablePartitionBackupOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableServiceBackup'
    name: 'disableServiceBackup(string, Models.ServiceFabricClientDisableServiceBackupOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Отключает периодическое резервное копирование службы Service Fabric, которая ранее была включена. Резервное копирование должно быть явно включено, прежде чем его можно отключить.
      В случае, если резервное копирование включено для приложения Service Fabric, что эта служба является частью, эта служба будет продолжать периодически создавать резервные копии согласно политике сопоставления на уровне приложения.
    syntax:
      content: 'function disableServiceBackup(serviceId: string, options?: Models.ServiceFabricClientDisableServiceBackupOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientDisableServiceBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableServiceBackup_1'
    name: 'disableServiceBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function disableServiceBackup(serviceId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableServiceBackup_2'
    name: 'disableServiceBackup(string, ServiceFabricClientDisableServiceBackupOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function disableServiceBackup(serviceId: string, options: ServiceFabricClientDisableServiceBackupOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientDisableServiceBackupOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup'
    name: 'enableApplicationBackup(string, EnableBackupDescription, Models.ServiceFabricClientEnableApplicationBackupOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Обеспечивает периодическое резервное копирование разделов с отслеживанием состояния, которые являются частью этого приложения Service Fabric. Каждая секция резервного копирования по отдельности согласно указанной политике архивации описание.
      Обратите внимание, только C# надежных субъектов и надежных с отслеживанием состояния службы в настоящее время поддерживаются для периодического резервного копирования.
    syntax:
      content: 'function enableApplicationBackup(applicationId: string, enableBackupDescription: EnableBackupDescription, options?: Models.ServiceFabricClientEnableApplicationBackupOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Задает параметры для включения резервного копирования.
        - id: options
          type:
            - Models.ServiceFabricClientEnableApplicationBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup_1'
    name: 'enableApplicationBackup(string, EnableBackupDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enableApplicationBackup(applicationId: string, enableBackupDescription: EnableBackupDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Задает параметры для включения резервного копирования.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup_2'
    name: 'enableApplicationBackup(string, EnableBackupDescription, ServiceFabricClientEnableApplicationBackupOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enableApplicationBackup(applicationId: string, enableBackupDescription: EnableBackupDescription, options: ServiceFabricClientEnableApplicationBackupOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Задает параметры для включения резервного копирования.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientEnableApplicationBackupOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableNode'
    name: 'enableNode(string, Models.ServiceFabricClientEnableNodeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Активирует деактивированный узел кластера Service Fabric. После активации узел снова станет доступен для размещения новых реплик, а все деактивированные реплики на этом узле будут повторно активированы.'
    syntax:
      content: 'function enableNode(nodeName: string, options?: Models.ServiceFabricClientEnableNodeOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: options
          type:
            - Models.ServiceFabricClientEnableNodeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableNode_1'
    name: 'enableNode(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enableNode(nodeName: string, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableNode_2'
    name: 'enableNode(string, ServiceFabricClientEnableNodeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enableNode(nodeName: string, options: ServiceFabricClientEnableNodeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientEnableNodeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup'
    name: 'enablePartitionBackup(string, EnableBackupDescription, Models.ServiceFabricClientEnablePartitionBackupOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Обеспечивает периодическое резервное копирование с отслеживанием состояния сохраненного секции. Согласно указанной политике архивации описание резервного копирования каждой секции. Если приложения или службы, который является частью, уже настроена для резервного копирования, а затем эту операцию нужно переопределить политику, используемую для периодического резервного копирования этой секции.
      Обратите внимание, только C# надежных субъектов и надежных с отслеживанием состояния службы в настоящее время поддерживаются для периодического резервного копирования.
    syntax:
      content: 'function enablePartitionBackup(partitionId: string, enableBackupDescription: EnableBackupDescription, options?: Models.ServiceFabricClientEnablePartitionBackupOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Задает параметры для включения резервного копирования.
        - id: options
          type:
            - Models.ServiceFabricClientEnablePartitionBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup_1'
    name: 'enablePartitionBackup(string, EnableBackupDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enablePartitionBackup(partitionId: string, enableBackupDescription: EnableBackupDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Задает параметры для включения резервного копирования.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup_2'
    name: 'enablePartitionBackup(string, EnableBackupDescription, ServiceFabricClientEnablePartitionBackupOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enablePartitionBackup(partitionId: string, enableBackupDescription: EnableBackupDescription, options: ServiceFabricClientEnablePartitionBackupOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Задает параметры для включения резервного копирования.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientEnablePartitionBackupOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableServiceBackup'
    name: 'enableServiceBackup(string, EnableBackupDescription, Models.ServiceFabricClientEnableServiceBackupOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Обеспечивает периодическое резервное копирование разделов с отслеживанием состояния, которые являются частью этой службы Service Fabric.
      Каждая секция резервного копирования по отдельности согласно указанной политике архивации описание. В случае, если приложения, что служба является частью, уже настроена для резервного копирования, то эту операцию нужно переопределить политику, используемую, чтобы воспользоваться периодическое резервное копирование для этой службы и его секции (если явно не переопределено на уровне секции).
      Обратите внимание, только C# надежных субъектов и надежных с отслеживанием состояния службы в настоящее время поддерживаются для периодического резервного копирования.
    syntax:
      content: 'function enableServiceBackup(serviceId: string, enableBackupDescription: EnableBackupDescription, options?: Models.ServiceFabricClientEnableServiceBackupOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Задает параметры для включения резервного копирования.
        - id: options
          type:
            - Models.ServiceFabricClientEnableServiceBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableServiceBackup_1'
    name: 'enableServiceBackup(string, EnableBackupDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enableServiceBackup(serviceId: string, enableBackupDescription: EnableBackupDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Задает параметры для включения резервного копирования.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableServiceBackup_2'
    name: 'enableServiceBackup(string, EnableBackupDescription, ServiceFabricClientEnableServiceBackupOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enableServiceBackup(serviceId: string, enableBackupDescription: EnableBackupDescription, options: ServiceFabricClientEnableServiceBackupOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Задает параметры для включения резервного копирования.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientEnableServiceBackupOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask'
    name: 'forceApproveRepairTask(RepairTaskApproveDescription, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Этот API поддерживает платформу Service Fabric. Он не предназначен для использования непосредственно в коде.
    syntax:
      content: 'function forceApproveRepairTask(repairTaskApproveDescription: RepairTaskApproveDescription, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: repairTaskApproveDescription
          type:
            - '@azure/servicefabric.RepairTaskApproveDescription'
          description: Описание задачи восстановления утверждения.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ForceApproveRepairTaskResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask_2'
    name: 'forceApproveRepairTask(RepairTaskApproveDescription, RequestOptionsBase, ServiceCallback<RepairTaskUpdateInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function forceApproveRepairTask(repairTaskApproveDescription: RepairTaskApproveDescription, options: RequestOptionsBase, callback: ServiceCallback<RepairTaskUpdateInfo>)'
      parameters:
        - id: repairTaskApproveDescription
          type:
            - '@azure/servicefabric.RepairTaskApproveDescription'
          description: Описание задачи восстановления утверждения.
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.ForceApproveRepairTaskResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask_1'
    name: 'forceApproveRepairTask(RepairTaskApproveDescription, ServiceCallback<RepairTaskUpdateInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function forceApproveRepairTask(repairTaskApproveDescription: RepairTaskApproveDescription, callback: ServiceCallback<RepairTaskUpdateInfo>)'
      parameters:
        - id: repairTaskApproveDescription
          type:
            - '@azure/servicefabric.RepairTaskApproveDescription'
          description: Описание задачи восстановления утверждения.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.ForceApproveRepairTaskResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getAadMetadata'
    name: getAadMetadata(Models.ServiceFabricClientGetAadMetadataOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Получает метаданные Azure Active Directory, используемые для безопасное подключение к кластеру.
      Этот API не должен вызываться отдельно. Он предоставляет сведения, необходимые для настройки Azure Active Directory защитить соединение с кластером Service Fabric.
    syntax:
      content: 'function getAadMetadata(options?: Models.ServiceFabricClientGetAadMetadataOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetAadMetadataOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetAadMetadataResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getAadMetadata_1'
    name: getAadMetadata(ServiceCallback<AadMetadataObject>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getAadMetadata(callback: ServiceCallback<AadMetadataObject>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.AadMetadataObject>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetAadMetadataResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getAadMetadata_2'
    name: 'getAadMetadata(ServiceFabricClientGetAadMetadataOptionalParams, ServiceCallback<AadMetadataObject>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getAadMetadata(options: ServiceFabricClientGetAadMetadataOptionalParams, callback: ServiceCallback<AadMetadataObject>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetAadMetadataOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.AadMetadataObject>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetAadMetadataResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy'
    name: 'getAllEntitiesBackedUpByPolicy(string, Models.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает список приложений Service Fabric, службы или секции, который связаны с этой политикой резервного копирования.'
    syntax:
      content: 'function getAllEntitiesBackedUpByPolicy(backupPolicyName: string, options?: Models.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams)'
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: Имя политики резервного копирования.
        - id: options
          type:
            - Models.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetAllEntitiesBackedUpByPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy_1'
    name: 'getAllEntitiesBackedUpByPolicy(string, ServiceCallback<PagedBackupEntityList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getAllEntitiesBackedUpByPolicy(backupPolicyName: string, callback: ServiceCallback<PagedBackupEntityList>)'
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: Имя политики резервного копирования.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupEntityList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetAllEntitiesBackedUpByPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy_2'
    name: 'getAllEntitiesBackedUpByPolicy(string, ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams, ServiceCallback<PagedBackupEntityList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getAllEntitiesBackedUpByPolicy(backupPolicyName: string, options: ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams, callback: ServiceCallback<PagedBackupEntityList>)'
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: Имя политики резервного копирования.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupEntityList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetAllEntitiesBackedUpByPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo'
    name: 'getApplicationBackupConfigurationInfo(string, Models.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Получает сведения о конфигурации резервного копирования Service Fabric для приложения и службы и разделах этого приложения.
    syntax:
      content: 'function getApplicationBackupConfigurationInfo(applicationId: string, options?: Models.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationBackupConfigurationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo_1'
    name: 'getApplicationBackupConfigurationInfo(string, ServiceCallback<PagedBackupConfigurationInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationBackupConfigurationInfo(applicationId: string, callback: ServiceCallback<PagedBackupConfigurationInfoList>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupConfigurationInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationBackupConfigurationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo_2'
    name: 'getApplicationBackupConfigurationInfo(string, ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams, ServiceCallback<PagedBackupConfigurationInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationBackupConfigurationInfo(applicationId: string, options: ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams, callback: ServiceCallback<PagedBackupConfigurationInfoList>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupConfigurationInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationBackupConfigurationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList'
    name: 'getApplicationBackupList(string, Models.ServiceFabricClientGetApplicationBackupListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает список резервных копий, доступных для каждой секции в этом приложении Service Fabric. Сервер перечисляет все резервные копии, доступные в папку резервных копий, настроенные в политике резервного копирования. Он также позволяет фильтровать результат, в зависимости от даты и времени начала и окончания или просто получение последней доступной резервной копии для каждой секции.'
    syntax:
      content: 'function getApplicationBackupList(applicationId: string, options?: Models.ServiceFabricClientGetApplicationBackupListOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationBackupListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationBackupListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList_1'
    name: 'getApplicationBackupList(string, ServiceCallback<PagedBackupInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationBackupList(applicationId: string, callback: ServiceCallback<PagedBackupInfoList>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationBackupListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList_2'
    name: 'getApplicationBackupList(string, ServiceFabricClientGetApplicationBackupListOptionalParams, ServiceCallback<PagedBackupInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationBackupList(applicationId: string, options: ServiceFabricClientGetApplicationBackupListOptionalParams, callback: ServiceCallback<PagedBackupInfoList>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetApplicationBackupListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationBackupListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationEventList'
    name: 'getApplicationEventList(string, string, string, Models.ServiceFabricClientGetApplicationEventListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ответ является списком объектов ApplicationEvent.
    syntax:
      content: 'function getApplicationEventList(applicationId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetApplicationEventListOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationEventList_1'
    name: 'getApplicationEventList(string, string, string, ServiceCallback<Models.ApplicationEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationEventList(applicationId: string, startTimeUtc: string, endTimeUtc: string, callback: ServiceCallback<Models.ApplicationEventUnion[]>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.ApplicationEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationEventList_2'
    name: 'getApplicationEventList(string, string, string, ServiceFabricClientGetApplicationEventListOptionalParams, ServiceCallback<Models.ApplicationEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationEventList(applicationId: string, startTimeUtc: string, endTimeUtc: string, options: ServiceFabricClientGetApplicationEventListOptionalParams, callback: ServiceCallback<Models.ApplicationEventUnion[]>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetApplicationEventListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<Models.ApplicationEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealth'
    name: 'getApplicationHealth(string, Models.ServiceFabricClientGetApplicationHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает состояние работоспособности приложения Service Fabric. Ответ содержит значение состояния работоспособности "Ok" (приложение работоспособно), "Error" (произошла ошибка) или "Warning" (Предупреждение). Если сущность не найдена в хранилище данных о работоспособности, возвращается значение Error.'
    syntax:
      content: 'function getApplicationHealth(applicationId: string, options?: Models.ServiceFabricClientGetApplicationHealthOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealth_1'
    name: 'getApplicationHealth(string, ServiceCallback<ApplicationHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationHealth(applicationId: string, callback: ServiceCallback<ApplicationHealth>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealth_2'
    name: 'getApplicationHealth(string, ServiceFabricClientGetApplicationHealthOptionalParams, ServiceCallback<ApplicationHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationHealth(applicationId: string, options: ServiceFabricClientGetApplicationHealthOptionalParams, callback: ServiceCallback<ApplicationHealth>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetApplicationHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy'
    name: 'getApplicationHealthUsingPolicy(string, Models.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о работоспособности приложения Service Fabric. EventsHealthStateFilter используется для фильтрации получаемой коллекции событий работоспособности узла на основе состояния работоспособности. Используйте ClusterHealthPolicies для переопределения политики работоспособности, используемых для оценки работоспособности.'
    syntax:
      content: 'function getApplicationHealthUsingPolicy(applicationId: string, options?: Models.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy_1'
    name: 'getApplicationHealthUsingPolicy(string, ServiceCallback<ApplicationHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationHealthUsingPolicy(applicationId: string, callback: ServiceCallback<ApplicationHealth>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy_2'
    name: 'getApplicationHealthUsingPolicy(string, ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams, ServiceCallback<ApplicationHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationHealthUsingPolicy(applicationId: string, options: ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams, callback: ServiceCallback<ApplicationHealth>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfo'
    name: 'getApplicationInfo(string, Models.ServiceFabricClientGetApplicationInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает сведения о приложении, которое создано или находится в процессе создания в кластере Service Fabric и имя которого совпадает со значением, указанным в качестве параметра.
      Ответ содержит имя, тип, состояние, параметры и другие сведения о приложении.
    syntax:
      content: 'function getApplicationInfo(applicationId: string, options?: Models.ServiceFabricClientGetApplicationInfoOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfo_1'
    name: 'getApplicationInfo(string, ServiceCallback<ApplicationInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationInfo(applicationId: string, callback: ServiceCallback<ApplicationInfo>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfo_2'
    name: 'getApplicationInfo(string, ServiceFabricClientGetApplicationInfoOptionalParams, ServiceCallback<ApplicationInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationInfo(applicationId: string, options: ServiceFabricClientGetApplicationInfoOptionalParams, callback: ServiceCallback<ApplicationInfo>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetApplicationInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList'
    name: getApplicationInfoList(Models.ServiceFabricClientGetApplicationInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о приложении, которое создано или находится в процессе создания в кластере Service Fabric и которое соответствует указанным фильтрам. Ответ содержит имя, тип, состояние, параметры и другие сведения о приложении. Если сведения о приложении не помещаются на странице, возвращается одна страница результатов и маркер продолжения, который можно использовать для получения следующей страницы. Фильтры ApplicationTypeName и ApplicationDefinitionKindFilter не могут быть заданы одновременно.'
    syntax:
      content: 'function getApplicationInfoList(options?: Models.ServiceFabricClientGetApplicationInfoListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList_1'
    name: getApplicationInfoList(ServiceCallback<PagedApplicationInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationInfoList(callback: ServiceCallback<PagedApplicationInfoList>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedApplicationInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList_2'
    name: 'getApplicationInfoList(ServiceFabricClientGetApplicationInfoListOptionalParams, ServiceCallback<PagedApplicationInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationInfoList(options: ServiceFabricClientGetApplicationInfoListOptionalParams, callback: ServiceCallback<PagedApplicationInfoList>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetApplicationInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedApplicationInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo'
    name: 'getApplicationLoadInfo(string, Models.ServiceFabricClientGetApplicationLoadInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает сведения о нагрузке приложения, которое создано или находится в процессе создания в кластере Service Fabric и имя которого совпадает со значением, указанным в качестве параметра.
      В ответе содержится имя, минимальное и максимальное число узлов, количество узлов, которые в настоящее время использует приложение, и информация о метриках нагрузки приложения.
    syntax:
      content: 'function getApplicationLoadInfo(applicationId: string, options?: Models.ServiceFabricClientGetApplicationLoadInfoOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationLoadInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationLoadInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo_1'
    name: 'getApplicationLoadInfo(string, ServiceCallback<ApplicationLoadInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationLoadInfo(applicationId: string, callback: ServiceCallback<ApplicationLoadInfo>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationLoadInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationLoadInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo_2'
    name: 'getApplicationLoadInfo(string, ServiceFabricClientGetApplicationLoadInfoOptionalParams, ServiceCallback<ApplicationLoadInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationLoadInfo(applicationId: string, options: ServiceFabricClientGetApplicationLoadInfoOptionalParams, callback: ServiceCallback<ApplicationLoadInfo>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetApplicationLoadInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationLoadInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationLoadInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationManifest'
    name: 'getApplicationManifest(string, string, Models.ServiceFabricClientGetApplicationManifestOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ответ содержит XML манифеста приложения в виде строки.
    syntax:
      content: 'function getApplicationManifest(applicationTypeName: string, applicationTypeVersion: string, options?: Models.ServiceFabricClientGetApplicationManifestOptionalParams)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: applicationTypeVersion
          type:
            - string
          description: Версия типа приложения.
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationManifestOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationManifestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationManifest_1'
    name: 'getApplicationManifest(string, string, ServiceCallback<ApplicationTypeManifest>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationManifest(applicationTypeName: string, applicationTypeVersion: string, callback: ServiceCallback<ApplicationTypeManifest>)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: applicationTypeVersion
          type:
            - string
          description: Версия типа приложения.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationTypeManifest>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationManifestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationManifest_2'
    name: 'getApplicationManifest(string, string, ServiceFabricClientGetApplicationManifestOptionalParams, ServiceCallback<ApplicationTypeManifest>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationManifest(applicationTypeName: string, applicationTypeVersion: string, options: ServiceFabricClientGetApplicationManifestOptionalParams, callback: ServiceCallback<ApplicationTypeManifest>)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: applicationTypeVersion
          type:
            - string
          description: Версия типа приложения.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetApplicationManifestOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationTypeManifest>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationManifestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo'
    name: 'getApplicationNameInfo(string, Models.ServiceFabricClientGetApplicationNameInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает имя приложения для указанной службы. Возвращается ошибка "404 FABRIC_E_SERVICE_DOES_NOT_EXIST", если служба с указанным идентификатором службы не существует.'
    syntax:
      content: 'function getApplicationNameInfo(serviceId: string, options?: Models.ServiceFabricClientGetApplicationNameInfoOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationNameInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationNameInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo_1'
    name: 'getApplicationNameInfo(string, ServiceCallback<ApplicationNameInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationNameInfo(serviceId: string, callback: ServiceCallback<ApplicationNameInfo>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationNameInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationNameInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo_2'
    name: 'getApplicationNameInfo(string, ServiceFabricClientGetApplicationNameInfoOptionalParams, ServiceCallback<ApplicationNameInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationNameInfo(serviceId: string, options: ServiceFabricClientGetApplicationNameInfoOptionalParams, callback: ServiceCallback<ApplicationNameInfo>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetApplicationNameInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationNameInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationNameInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList'
    name: 'getApplicationsEventList(string, string, Models.ServiceFabricClientGetApplicationsEventListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ответ является списком объектов ApplicationEvent.
    syntax:
      content: 'function getApplicationsEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetApplicationsEventListOptionalParams)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationsEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationsEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList_1'
    name: 'getApplicationsEventList(string, string, ServiceCallback<Models.ApplicationEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationsEventList(startTimeUtc: string, endTimeUtc: string, callback: ServiceCallback<Models.ApplicationEventUnion[]>)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.ApplicationEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationsEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList_2'
    name: 'getApplicationsEventList(string, string, ServiceFabricClientGetApplicationsEventListOptionalParams, ServiceCallback<Models.ApplicationEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationsEventList(startTimeUtc: string, endTimeUtc: string, options: ServiceFabricClientGetApplicationsEventListOptionalParams, callback: ServiceCallback<Models.ApplicationEventUnion[]>)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetApplicationsEventListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<Models.ApplicationEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationsEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList'
    name: getApplicationTypeInfoList(Models.ServiceFabricClientGetApplicationTypeInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает сведения о типах приложений, которые подготовлены или подготавливаются в кластере Service Fabric. Каждая версия типа приложения возвращается как один тип приложения. Ответ содержит имя, версию, состояние и другие сведения о типе приложения. Это страничный запрос. Это значит, что если сведения о типах приложений не помещаются на странице, возвращается одна страница результатов и маркер продолжения, который можно использовать для получения следующей страницы. Например, если существуют 10 типов приложения, но страница вмещает только первые 3 типа, или задано максимальное число результатов, равное 3, тогда возвращаются 3 типа.
      Чтобы просмотреть остальную часть результатов, можно получить следующие страницы с помощью маркера продолжения, передав его в следующем запросе. Если следующие страницы отсутствуют, возвращается пустой маркер продолжения.
    syntax:
      content: 'function getApplicationTypeInfoList(options?: Models.ServiceFabricClientGetApplicationTypeInfoListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationTypeInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationTypeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList_1'
    name: getApplicationTypeInfoList(ServiceCallback<PagedApplicationTypeInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationTypeInfoList(callback: ServiceCallback<PagedApplicationTypeInfoList>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedApplicationTypeInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationTypeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList_2'
    name: 'getApplicationTypeInfoList(ServiceFabricClientGetApplicationTypeInfoListOptionalParams, ServiceCallback<PagedApplicationTypeInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationTypeInfoList(options: ServiceFabricClientGetApplicationTypeInfoListOptionalParams, callback: ServiceCallback<PagedApplicationTypeInfoList>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetApplicationTypeInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedApplicationTypeInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationTypeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName'
    name: 'getApplicationTypeInfoListByName(string, Models.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о типах приложений, которые подготовлены или подготавливаются в кластере Service Fabric. Эти результаты содержат типы приложений, имена которых совпадают со значением, указанным в качестве параметра, и которые соответствуют заданным параметрам запроса. Возвращаются все версии типа приложения, соответствующего заданному имени типа приложения, при этом каждая версия возвращаются как тип приложения. Ответ содержит имя, версию, состояние и другие сведения о типе приложения. Это страничный запрос. Это значит, что если сведения о типах приложений не помещаются на странице, возвращается одна страница результатов и маркер продолжения, который можно использовать для получения следующей страницы. Например, если существуют 10 типов приложения, но страница вмещает только первые 3 типа, или задано максимальное число результатов, равное 3, тогда возвращаются 3 типа. Чтобы просмотреть остальную часть результатов, можно получить следующие страницы с помощью маркера продолжения, передав его в следующем запросе. Если следующие страницы отсутствуют, возвращается пустой маркер продолжения.'
    syntax:
      content: 'function getApplicationTypeInfoListByName(applicationTypeName: string, options?: Models.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationTypeInfoListByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName_1'
    name: 'getApplicationTypeInfoListByName(string, ServiceCallback<PagedApplicationTypeInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationTypeInfoListByName(applicationTypeName: string, callback: ServiceCallback<PagedApplicationTypeInfoList>)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedApplicationTypeInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationTypeInfoListByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName_2'
    name: 'getApplicationTypeInfoListByName(string, ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams, ServiceCallback<PagedApplicationTypeInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationTypeInfoListByName(applicationTypeName: string, options: ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams, callback: ServiceCallback<PagedApplicationTypeInfoList>)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedApplicationTypeInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationTypeInfoListByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade'
    name: 'getApplicationUpgrade(string, Models.ServiceFabricClientGetApplicationUpgradeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о состоянии последнего обновления приложения, а также сведения для упрощения отладки проблем в работоспособности приложения.'
    syntax:
      content: 'function getApplicationUpgrade(applicationId: string, options?: Models.ServiceFabricClientGetApplicationUpgradeOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationUpgradeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade_1'
    name: 'getApplicationUpgrade(string, ServiceCallback<ApplicationUpgradeProgressInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationUpgrade(applicationId: string, callback: ServiceCallback<ApplicationUpgradeProgressInfo>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationUpgradeProgressInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationUpgradeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade_2'
    name: 'getApplicationUpgrade(string, ServiceFabricClientGetApplicationUpgradeOptionalParams, ServiceCallback<ApplicationUpgradeProgressInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getApplicationUpgrade(applicationId: string, options: ServiceFabricClientGetApplicationUpgradeOptionalParams, callback: ServiceCallback<ApplicationUpgradeProgressInfo>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetApplicationUpgradeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationUpgradeProgressInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetApplicationUpgradeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName'
    name: 'getBackupPolicyByName(string, Models.ServiceFabricClientGetBackupPolicyByNameOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Получает определенной политики резервного копирования определяется {backupPolicyName}'
    syntax:
      content: 'function getBackupPolicyByName(backupPolicyName: string, options?: Models.ServiceFabricClientGetBackupPolicyByNameOptionalParams)'
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: Имя политики резервного копирования.
        - id: options
          type:
            - Models.ServiceFabricClientGetBackupPolicyByNameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetBackupPolicyByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName_1'
    name: 'getBackupPolicyByName(string, ServiceCallback<BackupPolicyDescription>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getBackupPolicyByName(backupPolicyName: string, callback: ServiceCallback<BackupPolicyDescription>)'
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: Имя политики резервного копирования.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.BackupPolicyDescription>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetBackupPolicyByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName_2'
    name: 'getBackupPolicyByName(string, ServiceFabricClientGetBackupPolicyByNameOptionalParams, ServiceCallback<BackupPolicyDescription>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getBackupPolicyByName(backupPolicyName: string, options: ServiceFabricClientGetBackupPolicyByNameOptionalParams, callback: ServiceCallback<BackupPolicyDescription>)'
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: Имя политики резервного копирования.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetBackupPolicyByNameOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.BackupPolicyDescription>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetBackupPolicyByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList'
    name: getBackupPolicyList(Models.ServiceFabricClientGetBackupPolicyListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Получение списка всех политик резервного копирования настроена.
    syntax:
      content: 'function getBackupPolicyList(options?: Models.ServiceFabricClientGetBackupPolicyListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetBackupPolicyListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetBackupPolicyListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList_1'
    name: getBackupPolicyList(ServiceCallback<PagedBackupPolicyDescriptionList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getBackupPolicyList(callback: ServiceCallback<PagedBackupPolicyDescriptionList>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupPolicyDescriptionList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetBackupPolicyListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList_2'
    name: 'getBackupPolicyList(ServiceFabricClientGetBackupPolicyListOptionalParams, ServiceCallback<PagedBackupPolicyDescriptionList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getBackupPolicyList(options: ServiceFabricClientGetBackupPolicyListOptionalParams, callback: ServiceCallback<PagedBackupPolicyDescriptionList>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetBackupPolicyListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupPolicyDescriptionList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetBackupPolicyListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation'
    name: 'getBackupsFromBackupLocation(GetBackupByStorageQueryDescription, Models.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Получает список доступных резервных копий для указанного резервного копирования (приложения, службы или секции) сущности в указанном расположении (общая папка или хранилище BLOB-объектов).'
    syntax:
      content: 'function getBackupsFromBackupLocation(getBackupByStorageQueryDescription: GetBackupByStorageQueryDescription, options?: Models.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams)'
      parameters:
        - id: getBackupByStorageQueryDescription
          type:
            - '@azure/servicefabric.GetBackupByStorageQueryDescription'
          description: Описаны фильтры и сведения о хранилище резервных копий для перечисление резервных копий.
        - id: options
          type:
            - Models.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetBackupsFromBackupLocationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation_1'
    name: 'getBackupsFromBackupLocation(GetBackupByStorageQueryDescription, ServiceCallback<PagedBackupInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getBackupsFromBackupLocation(getBackupByStorageQueryDescription: GetBackupByStorageQueryDescription, callback: ServiceCallback<PagedBackupInfoList>)'
      parameters:
        - id: getBackupByStorageQueryDescription
          type:
            - '@azure/servicefabric.GetBackupByStorageQueryDescription'
          description: Описаны фильтры и сведения о хранилище резервных копий для перечисление резервных копий.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetBackupsFromBackupLocationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation_2'
    name: 'getBackupsFromBackupLocation(GetBackupByStorageQueryDescription, ServiceFabricClientGetBackupsFromBackupLocationOptionalParams, ServiceCallback<PagedBackupInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getBackupsFromBackupLocation(getBackupByStorageQueryDescription: GetBackupByStorageQueryDescription, options: ServiceFabricClientGetBackupsFromBackupLocationOptionalParams, callback: ServiceCallback<PagedBackupInfoList>)'
      parameters:
        - id: getBackupByStorageQueryDescription
          type:
            - '@azure/servicefabric.GetBackupByStorageQueryDescription'
          description: Описаны фильтры и сведения о хранилище резервных копий для перечисление резервных копий.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetBackupsFromBackupLocationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaos'
    name: getChaos(Models.ServiceFabricClientGetChaosOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Получить состояние службы Chaos, указывающее, работает Chaos или нет, параметры Chaos, используемые для запуска службы Chaos, и состояние расписания Chaos.'
    syntax:
      content: 'function getChaos(options?: Models.ServiceFabricClientGetChaosOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetChaosOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetChaosResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaos_1'
    name: getChaos(ServiceCallback<Chaos>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getChaos(callback: ServiceCallback<Chaos>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.Chaos>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetChaosResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaos_2'
    name: 'getChaos(ServiceFabricClientGetChaosOptionalParams, ServiceCallback<Chaos>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getChaos(options: ServiceFabricClientGetChaosOptionalParams, callback: ServiceCallback<Chaos>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetChaosOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.Chaos>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetChaosResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaosEvents'
    name: getChaosEvents(Models.ServiceFabricClientGetChaosEventsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Для получения следующего сегмента событий службы Chaos можно указать маркер продолжения. Чтобы получить начало нового сегмента событий службы Chaos, можно указать в системе UTC время начала и окончания диапазона времени. В одном и том же вызове запрещено одновременно указывать маркер продолжения и диапазон времени.
      Когда в службе Chaos происходит более 100 событий, то события Chaos возвращаются несколькими сегментами. Каждый сегмент содержит не более 100 событий Chaos. Для получения следующего сегмента делается вызов этого API с помощью токена продолжения.
    syntax:
      content: 'function getChaosEvents(options?: Models.ServiceFabricClientGetChaosEventsOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetChaosEventsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetChaosEventsResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaosEvents_1'
    name: getChaosEvents(ServiceCallback<ChaosEventsSegment>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getChaosEvents(callback: ServiceCallback<ChaosEventsSegment>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ChaosEventsSegment>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetChaosEventsResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaosEvents_2'
    name: 'getChaosEvents(ServiceFabricClientGetChaosEventsOptionalParams, ServiceCallback<ChaosEventsSegment>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getChaosEvents(options: ServiceFabricClientGetChaosEventsOptionalParams, callback: ServiceCallback<ChaosEventsSegment>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetChaosEventsOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ChaosEventsSegment>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetChaosEventsResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaosSchedule'
    name: getChaosSchedule(Models.ServiceFabricClientGetChaosScheduleOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Получение версии используемого расписания Chaos, и расписания Chaos, которое определяет, когда и как запускать Chaos.'
    syntax:
      content: 'function getChaosSchedule(options?: Models.ServiceFabricClientGetChaosScheduleOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetChaosScheduleOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetChaosScheduleResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaosSchedule_1'
    name: getChaosSchedule(ServiceCallback<ChaosScheduleDescription>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getChaosSchedule(callback: ServiceCallback<ChaosScheduleDescription>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ChaosScheduleDescription>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetChaosScheduleResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaosSchedule_2'
    name: 'getChaosSchedule(ServiceFabricClientGetChaosScheduleOptionalParams, ServiceCallback<ChaosScheduleDescription>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getChaosSchedule(options: ServiceFabricClientGetChaosScheduleOptionalParams, callback: ServiceCallback<ChaosScheduleDescription>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetChaosScheduleOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ChaosScheduleDescription>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetChaosScheduleResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration'
    name: 'getClusterConfiguration(string, Models.ServiceFabricClientGetClusterConfigurationOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Конфигурация кластера содержит свойства кластера, которые включают в себя различные типы узлов в кластере, конфигурацию безопасности, топологии доменов сбоя и доменов обновления и т. д.'
    syntax:
      content: 'function getClusterConfiguration(configurationApiVersion: string, options?: Models.ServiceFabricClientGetClusterConfigurationOptionalParams)'
      parameters:
        - id: configurationApiVersion
          type:
            - string
          description: Версия API конфигурации json автономного кластера.
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterConfigurationOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterConfigurationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration_1'
    name: 'getClusterConfiguration(string, ServiceCallback<ClusterConfiguration>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterConfiguration(configurationApiVersion: string, callback: ServiceCallback<ClusterConfiguration>)'
      parameters:
        - id: configurationApiVersion
          type:
            - string
          description: Версия API конфигурации json автономного кластера.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterConfiguration>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterConfigurationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration_2'
    name: 'getClusterConfiguration(string, ServiceFabricClientGetClusterConfigurationOptionalParams, ServiceCallback<ClusterConfiguration>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterConfiguration(configurationApiVersion: string, options: ServiceFabricClientGetClusterConfigurationOptionalParams, callback: ServiceCallback<ClusterConfiguration>)'
      parameters:
        - id: configurationApiVersion
          type:
            - string
          description: Версия API конфигурации json автономного кластера.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetClusterConfigurationOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterConfiguration>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterConfigurationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus'
    name: getClusterConfigurationUpgradeStatus(Models.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Получение подробностей состояния обновления конфигурации автономного кластера Service Fabric.
    syntax:
      content: 'function getClusterConfigurationUpgradeStatus(options?: Models.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterConfigurationUpgradeStatusResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus_1'
    name: getClusterConfigurationUpgradeStatus(ServiceCallback<ClusterConfigurationUpgradeStatusInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterConfigurationUpgradeStatus(callback: ServiceCallback<ClusterConfigurationUpgradeStatusInfo>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterConfigurationUpgradeStatusInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterConfigurationUpgradeStatusResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus_2'
    name: 'getClusterConfigurationUpgradeStatus(ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams, ServiceCallback<ClusterConfigurationUpgradeStatusInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterConfigurationUpgradeStatus(options: ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams, callback: ServiceCallback<ClusterConfigurationUpgradeStatusInfo>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterConfigurationUpgradeStatusInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterConfigurationUpgradeStatusResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterEventList'
    name: 'getClusterEventList(string, string, Models.ServiceFabricClientGetClusterEventListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ответ является списком объектов ClusterEvent.
    syntax:
      content: 'function getClusterEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetClusterEventListOptionalParams)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterEventList_1'
    name: 'getClusterEventList(string, string, ServiceCallback<Models.ClusterEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterEventList(startTimeUtc: string, endTimeUtc: string, callback: ServiceCallback<Models.ClusterEventUnion[]>)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.ClusterEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterEventList_2'
    name: 'getClusterEventList(string, string, ServiceFabricClientGetClusterEventListOptionalParams, ServiceCallback<Models.ClusterEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterEventList(startTimeUtc: string, endTimeUtc: string, options: ServiceFabricClientGetClusterEventListOptionalParams, callback: ServiceCallback<Models.ClusterEventUnion[]>)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetClusterEventListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<Models.ClusterEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealth'
    name: getClusterHealth(Models.ServiceFabricClientGetClusterHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      EventsHealthStateFilter используется для фильтрации получаемой коллекции событий работоспособности кластера на основе состояния работоспособности.
      Аналогично используются NodesHealthStateFilter и ApplicationsHealthStateFilter для фильтрации получаемой коллекции узлов и приложений на основе их общего состояния работоспособности.
    syntax:
      content: 'function getClusterHealth(options?: Models.ServiceFabricClientGetClusterHealthOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealth_1'
    name: getClusterHealth(ServiceCallback<ClusterHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterHealth(callback: ServiceCallback<ClusterHealth>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealth_2'
    name: 'getClusterHealth(ServiceFabricClientGetClusterHealthOptionalParams, ServiceCallback<ClusterHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterHealth(options: ServiceFabricClientGetClusterHealthOptionalParams, callback: ServiceCallback<ClusterHealth>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetClusterHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk'
    name: getClusterHealthChunk(Models.ServiceFabricClientGetClusterHealthChunkOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает сведения о работоспособности кластера Service Fabric с помощью блоков работоспособности. Включает общего состояния работоспособности кластера, но ни одна из сущностей кластеров.
      Чтобы развернуть работоспособность кластера и получить сведения о состоянии работоспособности всех или некоторых сущностей, используйте POST URI и укажите описания запроса фрагмента данных о работоспособности кластера.
    syntax:
      content: 'function getClusterHealthChunk(options?: Models.ServiceFabricClientGetClusterHealthChunkOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterHealthChunkOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterHealthChunkResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk_1'
    name: getClusterHealthChunk(ServiceCallback<ClusterHealthChunk>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterHealthChunk(callback: ServiceCallback<ClusterHealthChunk>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealthChunk>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterHealthChunkResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk_2'
    name: 'getClusterHealthChunk(ServiceFabricClientGetClusterHealthChunkOptionalParams, ServiceCallback<ClusterHealthChunk>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterHealthChunk(options: ServiceFabricClientGetClusterHealthChunkOptionalParams, callback: ServiceCallback<ClusterHealthChunk>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetClusterHealthChunkOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealthChunk>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterHealthChunkResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters'
    name: getClusterHealthChunkUsingPolicyAndAdvancedFilters(Models.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает сведения о работоспособности кластера Service Fabric с помощью блоков работоспособности. Оценка работоспособности выполняется по отдельным описания запроса фрагмента данных о работоспособности ввода кластера.
      Описание запроса позволяет пользователям указать политики работоспособности для оценки кластера и его дочерних элементов.
      Пользователи могут указать очень гибкие фильтры для выбора какие сущности кластера должны быть возвращены. Выбор можно по отдельным на состояние работоспособности сущностей и основанные на иерархии.
      Запрос может возвратить многоуровневого дочерних элементов сущностей, в зависимости от заданных фильтров. Например его можно возвращать одно приложение с указанным именем, а также для этого приложения, возвращают только те службы, которые находятся в ошибку или предупреждение и все разделы и реплики для одной из этих служб.
    syntax:
      content: 'function getClusterHealthChunkUsingPolicyAndAdvancedFilters(options?: Models.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterHealthChunkUsingPolicyAndAdvancedFiltersResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters_1'
    name: getClusterHealthChunkUsingPolicyAndAdvancedFilters(ServiceCallback<ClusterHealthChunk>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterHealthChunkUsingPolicyAndAdvancedFilters(callback: ServiceCallback<ClusterHealthChunk>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealthChunk>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterHealthChunkUsingPolicyAndAdvancedFiltersResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters_2'
    name: 'getClusterHealthChunkUsingPolicyAndAdvancedFilters(ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams, ServiceCallback<ClusterHealthChunk>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterHealthChunkUsingPolicyAndAdvancedFilters(options: ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams, callback: ServiceCallback<ClusterHealthChunk>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealthChunk>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterHealthChunkUsingPolicyAndAdvancedFiltersResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy'
    name: getClusterHealthUsingPolicy(Models.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      EventsHealthStateFilter используется для фильтрации получаемой коллекции событий работоспособности кластера на основе состояния работоспособности.
      Аналогично используются NodesHealthStateFilter и ApplicationsHealthStateFilter для фильтрации получаемой коллекции узлов и приложений на основе их общего состояния работоспособности.
      Используйте ClusterHealthPolicies для переопределения политики работоспособности, используемых для оценки работоспособности.
    syntax:
      content: 'function getClusterHealthUsingPolicy(options?: Models.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy_1'
    name: getClusterHealthUsingPolicy(ServiceCallback<ClusterHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterHealthUsingPolicy(callback: ServiceCallback<ClusterHealth>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy_2'
    name: 'getClusterHealthUsingPolicy(ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams, ServiceCallback<ClusterHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterHealthUsingPolicy(options: ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams, callback: ServiceCallback<ClusterHealth>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterLoad'
    name: getClusterLoad(Models.ServiceFabricClientGetClusterLoadOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Извлекает сведения о загрузке кластера Service Fabric для всех метрик с определениями нагрузки или емкости.
    syntax:
      content: 'function getClusterLoad(options?: Models.ServiceFabricClientGetClusterLoadOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterLoadOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterLoadResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterLoad_1'
    name: getClusterLoad(ServiceCallback<ClusterLoadInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterLoad(callback: ServiceCallback<ClusterLoadInfo>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterLoadInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterLoadResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterLoad_2'
    name: 'getClusterLoad(ServiceFabricClientGetClusterLoadOptionalParams, ServiceCallback<ClusterLoadInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterLoad(options: ServiceFabricClientGetClusterLoadOptionalParams, callback: ServiceCallback<ClusterLoadInfo>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetClusterLoadOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterLoadInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterLoadResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterManifest'
    name: getClusterManifest(Models.ServiceFabricClientGetClusterManifestOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает манифест кластера Service Fabric. Манифест кластера содержит свойства кластера, которые включают в себя различные типы узлов в кластере, конфигурацию безопасности, топологии доменов сбоя и доменов обновления и т. д. Эти свойства определяются в файле ClusterConfig.JSON при развертывании изолированного кластера. Однако большая часть информации в манифесте кластера создается внутренними процессами Service Fabric во время развертывания кластера в других сценариях развертывания (например, при использовании портала Azure).

      Содержимое манифеста кластера является исключительно информационным, и пользователи не должны устанавливать зависимости от формата содержимого этого файла или его интерпретации.
    syntax:
      content: 'function getClusterManifest(options?: Models.ServiceFabricClientGetClusterManifestOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterManifestOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterManifestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterManifest_1'
    name: getClusterManifest(ServiceCallback<ClusterManifest>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterManifest(callback: ServiceCallback<ClusterManifest>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterManifest>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterManifestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterManifest_2'
    name: 'getClusterManifest(ServiceFabricClientGetClusterManifestOptionalParams, ServiceCallback<ClusterManifest>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterManifest(options: ServiceFabricClientGetClusterManifestOptionalParams, callback: ServiceCallback<ClusterManifest>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetClusterManifestOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterManifest>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterManifestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress'
    name: getClusterUpgradeProgress(Models.ServiceFabricClientGetClusterUpgradeProgressOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает текущий ход выполнения текущего обновления кластера. Если обновление не выполняется, вы получите последнее состояние предыдущего обновления кластера.'
    syntax:
      content: 'function getClusterUpgradeProgress(options?: Models.ServiceFabricClientGetClusterUpgradeProgressOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterUpgradeProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterUpgradeProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress_1'
    name: getClusterUpgradeProgress(ServiceCallback<ClusterUpgradeProgressObject>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterUpgradeProgress(callback: ServiceCallback<ClusterUpgradeProgressObject>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterUpgradeProgressObject>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterUpgradeProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress_2'
    name: 'getClusterUpgradeProgress(ServiceFabricClientGetClusterUpgradeProgressOptionalParams, ServiceCallback<ClusterUpgradeProgressObject>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterUpgradeProgress(options: ServiceFabricClientGetClusterUpgradeProgressOptionalParams, callback: ServiceCallback<ClusterUpgradeProgressObject>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetClusterUpgradeProgressOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterUpgradeProgressObject>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterUpgradeProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterVersion'
    name: getClusterVersion(Models.ServiceFabricClientGetClusterVersionOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Если происходит обновление кластера, этот API вернет самую раннюю версию (более старая) текущего и предназначенные для версий среды выполнения кластера.'
    syntax:
      content: 'function getClusterVersion(options?: Models.ServiceFabricClientGetClusterVersionOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterVersionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterVersionResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterVersion_1'
    name: getClusterVersion(ServiceCallback<ClusterVersion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterVersion(callback: ServiceCallback<ClusterVersion>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterVersion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterVersionResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterVersion_2'
    name: 'getClusterVersion(ServiceFabricClientGetClusterVersionOptionalParams, ServiceCallback<ClusterVersion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterVersion(options: ServiceFabricClientGetClusterVersionOptionalParams, callback: ServiceCallback<ClusterVersion>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetClusterVersionOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterVersion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetClusterVersionResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus'
    name: 'getComposeDeploymentStatus(string, Models.ServiceFabricClientGetComposeDeploymentStatusOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает состояние развертывания Compose, которое создано или находится в процессе создания в кластере Service Fabric и имя которого совпадает со значением, указанным в качестве параметра. Ответ содержит имя, состояние и другие сведения о развертывании.'
    syntax:
      content: 'function getComposeDeploymentStatus(deploymentName: string, options?: Models.ServiceFabricClientGetComposeDeploymentStatusOptionalParams)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: options
          type:
            - Models.ServiceFabricClientGetComposeDeploymentStatusOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetComposeDeploymentStatusResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus_1'
    name: 'getComposeDeploymentStatus(string, ServiceCallback<ComposeDeploymentStatusInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getComposeDeploymentStatus(deploymentName: string, callback: ServiceCallback<ComposeDeploymentStatusInfo>)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ComposeDeploymentStatusInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetComposeDeploymentStatusResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus_2'
    name: 'getComposeDeploymentStatus(string, ServiceFabricClientGetComposeDeploymentStatusOptionalParams, ServiceCallback<ComposeDeploymentStatusInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getComposeDeploymentStatus(deploymentName: string, options: ServiceFabricClientGetComposeDeploymentStatusOptionalParams, callback: ServiceCallback<ComposeDeploymentStatusInfo>)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetComposeDeploymentStatusOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ComposeDeploymentStatusInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetComposeDeploymentStatusResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList'
    name: getComposeDeploymentStatusList(Models.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает состояние развертываний Compose, которые были созданы или в процессе создания в кластере Service Fabric. Ответ содержит имя, состояние и другие сведения о развертывании Compose. Если список развертываний не помещается на странице, возвращается одна страница результатов и маркер продолжения, который можно использовать для получения следующей страницы.'
    syntax:
      content: 'function getComposeDeploymentStatusList(options?: Models.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetComposeDeploymentStatusListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList_1'
    name: getComposeDeploymentStatusList(ServiceCallback<PagedComposeDeploymentStatusInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getComposeDeploymentStatusList(callback: ServiceCallback<PagedComposeDeploymentStatusInfoList>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedComposeDeploymentStatusInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetComposeDeploymentStatusListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList_2'
    name: 'getComposeDeploymentStatusList(ServiceFabricClientGetComposeDeploymentStatusListOptionalParams, ServiceCallback<PagedComposeDeploymentStatusInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getComposeDeploymentStatusList(options: ServiceFabricClientGetComposeDeploymentStatusListOptionalParams, callback: ServiceCallback<PagedComposeDeploymentStatusInfoList>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedComposeDeploymentStatusInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetComposeDeploymentStatusListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress'
    name: 'getComposeDeploymentUpgradeProgress(string, Models.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о состоянии обновления развертывания сборки, а также сведения для упрощения отладки приложений неисправности.'
    syntax:
      content: 'function getComposeDeploymentUpgradeProgress(deploymentName: string, options?: Models.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: options
          type:
            - Models.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetComposeDeploymentUpgradeProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress_1'
    name: 'getComposeDeploymentUpgradeProgress(string, ServiceCallback<ComposeDeploymentUpgradeProgressInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getComposeDeploymentUpgradeProgress(deploymentName: string, callback: ServiceCallback<ComposeDeploymentUpgradeProgressInfo>)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ComposeDeploymentUpgradeProgressInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetComposeDeploymentUpgradeProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress_2'
    name: 'getComposeDeploymentUpgradeProgress(string, ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams, ServiceCallback<ComposeDeploymentUpgradeProgressInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getComposeDeploymentUpgradeProgress(deploymentName: string, options: ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams, callback: ServiceCallback<ComposeDeploymentUpgradeProgressInfo>)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ComposeDeploymentUpgradeProgressInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetComposeDeploymentUpgradeProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode'
    name: 'getContainerLogsDeployedOnNode(string, string, string, string, Models.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает журналы контейнера, развернутого на узле Service Fabric для указанного пакета кода.'
    syntax:
      content: 'function getContainerLogsDeployedOnNode(nodeName: string, applicationId: string, serviceManifestName: string, codePackageName: string, options?: Models.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceManifestName
          type:
            - string
          description: 'Имя манифеста службы, зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: codePackageName
          type:
            - string
          description: 'Имя пакета кода, указанное в манифесте службы и зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: options
          type:
            - Models.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetContainerLogsDeployedOnNodeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode_1'
    name: 'getContainerLogsDeployedOnNode(string, string, string, string, ServiceCallback<ContainerLogs>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getContainerLogsDeployedOnNode(nodeName: string, applicationId: string, serviceManifestName: string, codePackageName: string, callback: ServiceCallback<ContainerLogs>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceManifestName
          type:
            - string
          description: 'Имя манифеста службы, зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: codePackageName
          type:
            - string
          description: 'Имя пакета кода, указанное в манифесте службы и зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ContainerLogs>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetContainerLogsDeployedOnNodeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode_2'
    name: 'getContainerLogsDeployedOnNode(string, string, string, string, ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams, ServiceCallback<ContainerLogs>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getContainerLogsDeployedOnNode(nodeName: string, applicationId: string, serviceManifestName: string, codePackageName: string, options: ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams, callback: ServiceCallback<ContainerLogs>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceManifestName
          type:
            - string
          description: 'Имя манифеста службы, зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: codePackageName
          type:
            - string
          description: 'Имя пакета кода, указанное в манифесте службы и зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ContainerLogs>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetContainerLogsDeployedOnNodeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getContainersEventList'
    name: 'getContainersEventList(string, string, Models.ServiceFabricClientGetContainersEventListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ответ является списком объектов ContainerInstanceEvent.
    syntax:
      content: 'function getContainersEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetContainersEventListOptionalParams)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetContainersEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetContainersEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getContainersEventList_1'
    name: 'getContainersEventList(string, string, ServiceCallback<ContainerInstanceEvent[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getContainersEventList(startTimeUtc: string, endTimeUtc: string, callback: ServiceCallback<ContainerInstanceEvent[]>)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.ContainerInstanceEvent[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetContainersEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getContainersEventList_2'
    name: 'getContainersEventList(string, string, ServiceFabricClientGetContainersEventListOptionalParams, ServiceCallback<ContainerInstanceEvent[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getContainersEventList(startTimeUtc: string, endTimeUtc: string, options: ServiceFabricClientGetContainersEventListOptionalParams, callback: ServiceCallback<ContainerInstanceEvent[]>)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetContainersEventListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.ContainerInstanceEvent[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetContainersEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList'
    name: 'getCorrelatedEventList(string, Models.ServiceFabricClientGetCorrelatedEventListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ответ является списком FabricEvents.
    syntax:
      content: 'function getCorrelatedEventList(eventInstanceId: string, options?: Models.ServiceFabricClientGetCorrelatedEventListOptionalParams)'
      parameters:
        - id: eventInstanceId
          type:
            - string
          description: EventInstanceId.
        - id: options
          type:
            - Models.ServiceFabricClientGetCorrelatedEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetCorrelatedEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList_1'
    name: 'getCorrelatedEventList(string, ServiceCallback<Models.FabricEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getCorrelatedEventList(eventInstanceId: string, callback: ServiceCallback<Models.FabricEventUnion[]>)'
      parameters:
        - id: eventInstanceId
          type:
            - string
          description: EventInstanceId.
        - id: callback
          type:
            - 'ServiceCallback<Models.FabricEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetCorrelatedEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList_2'
    name: 'getCorrelatedEventList(string, ServiceFabricClientGetCorrelatedEventListOptionalParams, ServiceCallback<Models.FabricEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getCorrelatedEventList(eventInstanceId: string, options: ServiceFabricClientGetCorrelatedEventListOptionalParams, callback: ServiceCallback<Models.FabricEventUnion[]>)'
      parameters:
        - id: eventInstanceId
          type:
            - string
          description: EventInstanceId.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetCorrelatedEventListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<Models.FabricEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetCorrelatedEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDataLossProgress'
    name: 'getDataLossProgress(string, string, string, Models.ServiceFabricClientGetDataLossProgressOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о ходе выполнения операции с потерей данных, запущенной с помощью StartDataLoss, с использованием OperationId.'
    syntax:
      content: 'function getDataLossProgress(serviceId: string, partitionId: string, operationId: string, options?: Models.ServiceFabricClientGetDataLossProgressOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: options
          type:
            - Models.ServiceFabricClientGetDataLossProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDataLossProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDataLossProgress_1'
    name: 'getDataLossProgress(string, string, string, ServiceCallback<PartitionDataLossProgress>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDataLossProgress(serviceId: string, partitionId: string, operationId: string, callback: ServiceCallback<PartitionDataLossProgress>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionDataLossProgress>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDataLossProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDataLossProgress_2'
    name: 'getDataLossProgress(string, string, string, ServiceFabricClientGetDataLossProgressOptionalParams, ServiceCallback<PartitionDataLossProgress>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDataLossProgress(serviceId: string, partitionId: string, operationId: string, options: ServiceFabricClientGetDataLossProgressOptionalParams, callback: ServiceCallback<PartitionDataLossProgress>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDataLossProgressOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionDataLossProgress>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDataLossProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth'
    name: 'getDeployedApplicationHealth(string, string, Models.ServiceFabricClientGetDeployedApplicationHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о работоспособности приложения, развернутого на узле Service Fabric. Используйте EventsHealthStateFilter, чтобы отфильтровать коллекцию объектов HealthEvent, включенных в развернутое приложение, по состоянию работоспособности. Используйте DeployedServicePackagesHealthStateFilter, чтобы отфильтровать дочерние элементы DeployedServicePackageHealth по состоянию работоспособности.'
    syntax:
      content: 'function getDeployedApplicationHealth(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedApplicationHealthOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedApplicationHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedApplicationHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth_1'
    name: 'getDeployedApplicationHealth(string, string, ServiceCallback<DeployedApplicationHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedApplicationHealth(nodeName: string, applicationId: string, callback: ServiceCallback<DeployedApplicationHealth>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedApplicationHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedApplicationHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth_2'
    name: 'getDeployedApplicationHealth(string, string, ServiceFabricClientGetDeployedApplicationHealthOptionalParams, ServiceCallback<DeployedApplicationHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedApplicationHealth(nodeName: string, applicationId: string, options: ServiceFabricClientGetDeployedApplicationHealthOptionalParams, callback: ServiceCallback<DeployedApplicationHealth>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDeployedApplicationHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedApplicationHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedApplicationHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy'
    name: 'getDeployedApplicationHealthUsingPolicy(string, string, Models.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о работоспособности приложения, развернутого на узле Service Fabric, используя указанную политику. Используйте EventsHealthStateFilter, чтобы отфильтровать коллекцию объектов HealthEvent, включенных в развернутое приложение, по состоянию работоспособности. Используйте DeployedServicePackagesHealthStateFilter, чтобы отфильтровать дочерние элементы DeployedServicePackageHealth по состоянию работоспособности. Используйте ApplicationHealthPolicy, чтобы при необходимости переопределить политики работоспособности, используемых для оценки работоспособности. Этот API использует только поле «ConsiderWarningAsError» ApplicationHealthPolicy. Остальные поля учитываются при оценке работоспособности развернутого приложения.'
    syntax:
      content: 'function getDeployedApplicationHealthUsingPolicy(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedApplicationHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy_1'
    name: 'getDeployedApplicationHealthUsingPolicy(string, string, ServiceCallback<DeployedApplicationHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedApplicationHealthUsingPolicy(nodeName: string, applicationId: string, callback: ServiceCallback<DeployedApplicationHealth>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedApplicationHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedApplicationHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy_2'
    name: 'getDeployedApplicationHealthUsingPolicy(string, string, ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams, ServiceCallback<DeployedApplicationHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedApplicationHealthUsingPolicy(nodeName: string, applicationId: string, options: ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams, callback: ServiceCallback<DeployedApplicationHealth>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedApplicationHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedApplicationHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo'
    name: 'getDeployedApplicationInfo(string, string, Models.ServiceFabricClientGetDeployedApplicationInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Если предоставленный идентификатор приложения предназначен для системного приложения, то этот запрос возвращает сведения о системном приложении. Результаты охватывают развернутые приложения в активном состоянии, состоянии активации и загрузки. Для этого запроса необходимо, чтобы имя узла соответствовало имени узла в кластере. Если имя указанного узла не указывает на любой из активных узлов Service Fabric в кластере, запрос завершается ошибкой.'
    syntax:
      content: 'function getDeployedApplicationInfo(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedApplicationInfoOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedApplicationInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedApplicationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo_1'
    name: 'getDeployedApplicationInfo(string, string, ServiceCallback<DeployedApplicationInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedApplicationInfo(nodeName: string, applicationId: string, callback: ServiceCallback<DeployedApplicationInfo>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedApplicationInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedApplicationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo_2'
    name: 'getDeployedApplicationInfo(string, string, ServiceFabricClientGetDeployedApplicationInfoOptionalParams, ServiceCallback<DeployedApplicationInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedApplicationInfo(nodeName: string, applicationId: string, options: ServiceFabricClientGetDeployedApplicationInfoOptionalParams, callback: ServiceCallback<DeployedApplicationInfo>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDeployedApplicationInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedApplicationInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedApplicationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList'
    name: 'getDeployedApplicationInfoList(string, Models.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает список приложений, развернутых на узле Service Fabric. Результаты не включают в себя сведения о развернутых системных приложениях, если только они не запрашиваются явным образом по идентификатору. Результаты охватывают развернутые приложения в активном состоянии, состоянии активации и загрузки. Для этого запроса необходимо, чтобы имя узла соответствовало имени узла в кластере. Если имя указанного узла не указывает на любой из активных узлов Service Fabric в кластере, запрос завершается ошибкой.'
    syntax:
      content: 'function getDeployedApplicationInfoList(nodeName: string, options?: Models.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedApplicationInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList_1'
    name: 'getDeployedApplicationInfoList(string, ServiceCallback<PagedDeployedApplicationInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedApplicationInfoList(nodeName: string, callback: ServiceCallback<PagedDeployedApplicationInfoList>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedDeployedApplicationInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedApplicationInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList_2'
    name: 'getDeployedApplicationInfoList(string, ServiceFabricClientGetDeployedApplicationInfoListOptionalParams, ServiceCallback<PagedDeployedApplicationInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedApplicationInfoList(nodeName: string, options: ServiceFabricClientGetDeployedApplicationInfoListOptionalParams, callback: ServiceCallback<PagedDeployedApplicationInfoList>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedDeployedApplicationInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedApplicationInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList'
    name: 'getDeployedCodePackageInfoList(string, string, Models.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает список пакетов кода, развернутых на узле Service Fabric для указанного приложения.'
    syntax:
      content: 'function getDeployedCodePackageInfoList(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedCodePackageInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList_1'
    name: 'getDeployedCodePackageInfoList(string, string, ServiceCallback<DeployedCodePackageInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedCodePackageInfoList(nodeName: string, applicationId: string, callback: ServiceCallback<DeployedCodePackageInfo[]>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedCodePackageInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedCodePackageInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList_2'
    name: 'getDeployedCodePackageInfoList(string, string, ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams, ServiceCallback<DeployedCodePackageInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedCodePackageInfoList(nodeName: string, applicationId: string, options: ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams, callback: ServiceCallback<DeployedCodePackageInfo[]>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedCodePackageInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedCodePackageInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth'
    name: 'getDeployedServicePackageHealth(string, string, string, Models.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о работоспособности пакета службы для указанного приложения, развернутого в узле Service Fabric. Используйте EventsHealthStateFilter, чтобы отфильтровать коллекцию объектов HealthEvent, включенных в развернутый пакет службы, по состоянию работоспособности.'
    syntax:
      content: 'function getDeployedServicePackageHealth(nodeName: string, applicationId: string, servicePackageName: string, options?: Models.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: servicePackageName
          type:
            - string
          description: Имя пакета службы.
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServicePackageHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth_1'
    name: 'getDeployedServicePackageHealth(string, string, string, ServiceCallback<DeployedServicePackageHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServicePackageHealth(nodeName: string, applicationId: string, servicePackageName: string, callback: ServiceCallback<DeployedServicePackageHealth>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: servicePackageName
          type:
            - string
          description: Имя пакета службы.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedServicePackageHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServicePackageHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth_2'
    name: 'getDeployedServicePackageHealth(string, string, string, ServiceFabricClientGetDeployedServicePackageHealthOptionalParams, ServiceCallback<DeployedServicePackageHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServicePackageHealth(nodeName: string, applicationId: string, servicePackageName: string, options: ServiceFabricClientGetDeployedServicePackageHealthOptionalParams, callback: ServiceCallback<DeployedServicePackageHealth>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: servicePackageName
          type:
            - string
          description: Имя пакета службы.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedServicePackageHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServicePackageHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy'
    name: 'getDeployedServicePackageHealthUsingPolicy(string, string, string, Models.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о работоспособности пакета службы для указанного приложения, развернутого в узле Service Fabric. с помощью указанной политики. Используйте EventsHealthStateFilter, чтобы отфильтровать коллекцию объектов HealthEvent, включенных в развернутый пакет службы, по состоянию работоспособности. Используйте ApplicationHealthPolicy, чтобы при необходимости переопределить политики работоспособности, используемых для оценки работоспособности. Этот API использует только поле «ConsiderWarningAsError» ApplicationHealthPolicy. Остальные поля учитываются при оценке работоспособности развернутого пакета службы.'
    syntax:
      content: 'function getDeployedServicePackageHealthUsingPolicy(nodeName: string, applicationId: string, servicePackageName: string, options?: Models.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: servicePackageName
          type:
            - string
          description: Имя пакета службы.
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServicePackageHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy_1'
    name: 'getDeployedServicePackageHealthUsingPolicy(string, string, string, ServiceCallback<DeployedServicePackageHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServicePackageHealthUsingPolicy(nodeName: string, applicationId: string, servicePackageName: string, callback: ServiceCallback<DeployedServicePackageHealth>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: servicePackageName
          type:
            - string
          description: Имя пакета службы.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedServicePackageHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServicePackageHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy_2'
    name: 'getDeployedServicePackageHealthUsingPolicy(string, string, string, ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams, ServiceCallback<DeployedServicePackageHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServicePackageHealthUsingPolicy(nodeName: string, applicationId: string, servicePackageName: string, options: ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams, callback: ServiceCallback<DeployedServicePackageHealth>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: servicePackageName
          type:
            - string
          description: Имя пакета службы.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedServicePackageHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServicePackageHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList'
    name: 'getDeployedServicePackageInfoList(string, string, Models.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает информацию о пакетах кода, развернутых на узле Service Fabric для указанного приложения.'
    syntax:
      content: 'function getDeployedServicePackageInfoList(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServicePackageInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList_1'
    name: 'getDeployedServicePackageInfoList(string, string, ServiceCallback<DeployedServicePackageInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServicePackageInfoList(nodeName: string, applicationId: string, callback: ServiceCallback<DeployedServicePackageInfo[]>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServicePackageInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServicePackageInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList_2'
    name: 'getDeployedServicePackageInfoList(string, string, ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams, ServiceCallback<DeployedServicePackageInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServicePackageInfoList(nodeName: string, applicationId: string, options: ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams, callback: ServiceCallback<DeployedServicePackageInfo[]>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServicePackageInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServicePackageInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName'
    name: 'getDeployedServicePackageInfoListByName(string, string, string, Models.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает информацию о пакетах кода, развернутых на узле Service Fabric для указанного приложения. Эти результаты содержат пакеты службы, имена которых строго соответствуют указанному в параметре имени пакета службы.'
    syntax:
      content: 'function getDeployedServicePackageInfoListByName(nodeName: string, applicationId: string, servicePackageName: string, options?: Models.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: servicePackageName
          type:
            - string
          description: Имя пакета службы.
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServicePackageInfoListByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName_1'
    name: 'getDeployedServicePackageInfoListByName(string, string, string, ServiceCallback<DeployedServicePackageInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServicePackageInfoListByName(nodeName: string, applicationId: string, servicePackageName: string, callback: ServiceCallback<DeployedServicePackageInfo[]>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: servicePackageName
          type:
            - string
          description: Имя пакета службы.
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServicePackageInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServicePackageInfoListByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName_2'
    name: 'getDeployedServicePackageInfoListByName(string, string, string, ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams, ServiceCallback<DeployedServicePackageInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServicePackageInfoListByName(nodeName: string, applicationId: string, servicePackageName: string, options: ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams, callback: ServiceCallback<DeployedServicePackageInfo[]>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: servicePackageName
          type:
            - string
          description: Имя пакета службы.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServicePackageInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServicePackageInfoListByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo'
    name: 'getDeployedServiceReplicaDetailInfo(string, string, string, Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о реплике, которая развернута на узле Service Fabric. Эти сведения включают в себя вид службы, имя службы, текущую операцию службы, время и дату начала текущей операции службы, идентификатор секции, идентификатор реплики или экземпляра, полученные сведения о нагрузке и другую информацию.'
    syntax:
      content: 'function getDeployedServiceReplicaDetailInfo(nodeName: string, partitionId: string, replicaId: string, options?: Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServiceReplicaDetailInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo_1'
    name: 'getDeployedServiceReplicaDetailInfo(string, string, string, ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServiceReplicaDetailInfo(nodeName: string, partitionId: string, replicaId: string, callback: ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: callback
          type:
            - ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServiceReplicaDetailInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo_2'
    name: 'getDeployedServiceReplicaDetailInfo(string, string, string, ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams, ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServiceReplicaDetailInfo(nodeName: string, partitionId: string, replicaId: string, options: ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams, callback: ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServiceReplicaDetailInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId'
    name: 'getDeployedServiceReplicaDetailInfoByPartitionId(string, string, Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о реплике, которая развернута на узле Service Fabric. Эти сведения включают в себя вид службы, имя службы, текущую операцию службы, время и дату начала текущей операции службы, идентификатор секции, идентификатор реплики или экземпляра, полученные сведения о нагрузке и другую информацию.'
    syntax:
      content: 'function getDeployedServiceReplicaDetailInfoByPartitionId(nodeName: string, partitionId: string, options?: Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServiceReplicaDetailInfoByPartitionIdResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId_1'
    name: 'getDeployedServiceReplicaDetailInfoByPartitionId(string, string, ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServiceReplicaDetailInfoByPartitionId(nodeName: string, partitionId: string, callback: ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServiceReplicaDetailInfoByPartitionIdResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId_2'
    name: 'getDeployedServiceReplicaDetailInfoByPartitionId(string, string, ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams, ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServiceReplicaDetailInfoByPartitionId(nodeName: string, partitionId: string, options: ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams, callback: ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServiceReplicaDetailInfoByPartitionIdResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList'
    name: 'getDeployedServiceReplicaInfoList(string, string, Models.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Получает список, содержащий информацию о репликах, развернутых на узле Service Fabric. Информация включает в себя идентификатор раздела, идентификатор реплики, состояние реплики, имя службы, имя типа службы и другую информацию. Используйте параметры запроса PartitionId или ServiceManifestName для возврата информации о развернутых репликах, соответствующих указанным значениям для этих параметров.'
    syntax:
      content: 'function getDeployedServiceReplicaInfoList(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServiceReplicaInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList_1'
    name: 'getDeployedServiceReplicaInfoList(string, string, ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServiceReplicaInfoList(nodeName: string, applicationId: string, callback: ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - 'ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServiceReplicaInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList_2'
    name: 'getDeployedServiceReplicaInfoList(string, string, ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams, ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServiceReplicaInfoList(nodeName: string, applicationId: string, options: ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams, callback: ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServiceReplicaInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName'
    name: 'getDeployedServiceTypeInfoByName(string, string, string, Models.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает список, содержащий сведения об указанном типе служб из приложений, развернутых на узле в кластере Service Fabric. Ответ включает имя типа службы, его состояние регистрации, пакет кода, который его зарегистрировал и идентификатор активации пакета службы. Каждая запись представляет одну активацию для типа службы с уникальным идентификатором активации.'
    syntax:
      content: 'function getDeployedServiceTypeInfoByName(nodeName: string, applicationId: string, serviceTypeName: string, options?: Models.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceTypeName
          type:
            - string
          description: Задает имя для типа службы Service Fabric.
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServiceTypeInfoByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName_1'
    name: 'getDeployedServiceTypeInfoByName(string, string, string, ServiceCallback<DeployedServiceTypeInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServiceTypeInfoByName(nodeName: string, applicationId: string, serviceTypeName: string, callback: ServiceCallback<DeployedServiceTypeInfo[]>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceTypeName
          type:
            - string
          description: Задает имя для типа службы Service Fabric.
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServiceTypeInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServiceTypeInfoByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName_2'
    name: 'getDeployedServiceTypeInfoByName(string, string, string, ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams, ServiceCallback<DeployedServiceTypeInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServiceTypeInfoByName(nodeName: string, applicationId: string, serviceTypeName: string, options: ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams, callback: ServiceCallback<DeployedServiceTypeInfo[]>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceTypeName
          type:
            - string
          description: Задает имя для типа службы Service Fabric.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServiceTypeInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServiceTypeInfoByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList'
    name: 'getDeployedServiceTypeInfoList(string, string, Models.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает список, содержащий сведения о типах служб из приложений, развернутых на узле в кластере Service Fabric. Ответ включает имя типа службы, его состояние регистрации, пакет кода, который его зарегистрировал и идентификатор активации пакета службы.'
    syntax:
      content: 'function getDeployedServiceTypeInfoList(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServiceTypeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList_1'
    name: 'getDeployedServiceTypeInfoList(string, string, ServiceCallback<DeployedServiceTypeInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServiceTypeInfoList(nodeName: string, applicationId: string, callback: ServiceCallback<DeployedServiceTypeInfo[]>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServiceTypeInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServiceTypeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList_2'
    name: 'getDeployedServiceTypeInfoList(string, string, ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams, ServiceCallback<DeployedServiceTypeInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDeployedServiceTypeInfoList(nodeName: string, applicationId: string, options: ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams, callback: ServiceCallback<DeployedServiceTypeInfo[]>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServiceTypeInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetDeployedServiceTypeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getFaultOperationList'
    name: 'getFaultOperationList(number, number, Models.ServiceFabricClientGetFaultOperationListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает список операций при ошибке, вызываемых пользователем, отфильтрованный по введенным параметрам.'
    syntax:
      content: 'function getFaultOperationList(typeFilter: number, stateFilter: number, options?: Models.ServiceFabricClientGetFaultOperationListOptionalParams)'
      parameters:
        - id: typeFilter
          type:
            - number
          description: |-
            Используется для фильтрации по OperationType для операций, вызываемых пользователем.

            - 65535 — выбрать All
            - 1 - выберите PartitionDataLoss.
            - 2 - выберите PartitionQuorumLoss.
            - 4 - выберите partitionrestart, запущенной.
            - 8 - выберите NodeTransition.
        - id: stateFilter
          type:
            - number
          description: |-
            Используется для фильтрации по OperationState для операций, вызываемых пользователем.

            - 65535 — выбрать All
            - 1 — выбрать Running
            - 2 - выберите откат
            - 8 - выберите завершено
            - 16 - выберите Faulted
            - 32 - выберите отменено
            - 64 - выберите ForceCancelled
        - id: options
          type:
            - Models.ServiceFabricClientGetFaultOperationListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetFaultOperationListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getFaultOperationList_1'
    name: 'getFaultOperationList(number, number, ServiceCallback<OperationStatus[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getFaultOperationList(typeFilter: number, stateFilter: number, callback: ServiceCallback<OperationStatus[]>)'
      parameters:
        - id: typeFilter
          type:
            - number
          description: |-
            Используется для фильтрации по OperationType для операций, вызываемых пользователем.

            - 65535 — выбрать All
            - 1 - выберите PartitionDataLoss.
            - 2 - выберите PartitionQuorumLoss.
            - 4 - выберите partitionrestart, запущенной.
            - 8 - выберите NodeTransition.
        - id: stateFilter
          type:
            - number
          description: |-
            Используется для фильтрации по OperationState для операций, вызываемых пользователем.

            - 65535 — выбрать All
            - 1 — выбрать Running
            - 2 - выберите откат
            - 8 - выберите завершено
            - 16 - выберите Faulted
            - 32 - выберите отменено
            - 64 - выберите ForceCancelled
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.OperationStatus[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetFaultOperationListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getFaultOperationList_2'
    name: 'getFaultOperationList(number, number, ServiceFabricClientGetFaultOperationListOptionalParams, ServiceCallback<OperationStatus[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getFaultOperationList(typeFilter: number, stateFilter: number, options: ServiceFabricClientGetFaultOperationListOptionalParams, callback: ServiceCallback<OperationStatus[]>)'
      parameters:
        - id: typeFilter
          type:
            - number
          description: |-
            Используется для фильтрации по OperationType для операций, вызываемых пользователем.

            - 65535 — выбрать All
            - 1 - выберите PartitionDataLoss.
            - 2 - выберите PartitionQuorumLoss.
            - 4 - выберите partitionrestart, запущенной.
            - 8 - выберите NodeTransition.
        - id: stateFilter
          type:
            - number
          description: |-
            Используется для фильтрации по OperationState для операций, вызываемых пользователем.

            - 65535 — выбрать All
            - 1 — выбрать Running
            - 2 - выберите откат
            - 8 - выберите завершено
            - 16 - выберите Faulted
            - 32 - выберите отменено
            - 64 - выберите ForceCancelled
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetFaultOperationListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.OperationStatus[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetFaultOperationListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreContent'
    name: 'getImageStoreContent(string, Models.ServiceFabricClientGetImageStoreContentOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Возвращает сведения о содержимом в указанном расположении хранилища образов. Расположение указывается относительно корневой папки хранилища образов.
    syntax:
      content: 'function getImageStoreContent(contentPath: string, options?: Models.ServiceFabricClientGetImageStoreContentOptionalParams)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: options
          type:
            - Models.ServiceFabricClientGetImageStoreContentOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetImageStoreContentResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreContent_1'
    name: 'getImageStoreContent(string, ServiceCallback<ImageStoreContent>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getImageStoreContent(contentPath: string, callback: ServiceCallback<ImageStoreContent>)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ImageStoreContent>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetImageStoreContentResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreContent_2'
    name: 'getImageStoreContent(string, ServiceFabricClientGetImageStoreContentOptionalParams, ServiceCallback<ImageStoreContent>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getImageStoreContent(contentPath: string, options: ServiceFabricClientGetImageStoreContentOptionalParams, callback: ServiceCallback<ImageStoreContent>)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetImageStoreContentOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ImageStoreContent>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetImageStoreContentResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize'
    name: 'getImageStoreFolderSize(string, Models.ServiceFabricClientGetImageStoreFolderSizeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает общий размер файла в папке хранилища изображения, определяемое contentPath. Расположение указывается относительно корневой папки хранилища образов.'
    syntax:
      content: 'function getImageStoreFolderSize(contentPath: string, options?: Models.ServiceFabricClientGetImageStoreFolderSizeOptionalParams)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: options
          type:
            - Models.ServiceFabricClientGetImageStoreFolderSizeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetImageStoreFolderSizeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize_1'
    name: 'getImageStoreFolderSize(string, ServiceCallback<FolderSizeInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getImageStoreFolderSize(contentPath: string, callback: ServiceCallback<FolderSizeInfo>)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.FolderSizeInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetImageStoreFolderSizeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize_2'
    name: 'getImageStoreFolderSize(string, ServiceFabricClientGetImageStoreFolderSizeOptionalParams, ServiceCallback<FolderSizeInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getImageStoreFolderSize(contentPath: string, options: ServiceFabricClientGetImageStoreFolderSizeOptionalParams, callback: ServiceCallback<FolderSizeInfo>)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetImageStoreFolderSizeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.FolderSizeInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetImageStoreFolderSizeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent'
    name: getImageStoreRootContent(Models.ServiceFabricClientGetImageStoreRootContentOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Возвращает сведения о содержимом в корневом расположении хранилища образов.
    syntax:
      content: 'function getImageStoreRootContent(options?: Models.ServiceFabricClientGetImageStoreRootContentOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetImageStoreRootContentOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetImageStoreRootContentResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent_1'
    name: getImageStoreRootContent(ServiceCallback<ImageStoreContent>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getImageStoreRootContent(callback: ServiceCallback<ImageStoreContent>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ImageStoreContent>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetImageStoreRootContentResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent_2'
    name: 'getImageStoreRootContent(ServiceFabricClientGetImageStoreRootContentOptionalParams, ServiceCallback<ImageStoreContent>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getImageStoreRootContent(options: ServiceFabricClientGetImageStoreRootContentOptionalParams, callback: ServiceCallback<ImageStoreContent>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetImageStoreRootContentOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ImageStoreContent>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetImageStoreRootContentResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize'
    name: getImageStoreRootFolderSize(Models.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Возвращает общий размер файлов в корневой и дочерних элементов папки в хранилище образов.
    syntax:
      content: 'function getImageStoreRootFolderSize(options?: Models.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetImageStoreRootFolderSizeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize_1'
    name: getImageStoreRootFolderSize(ServiceCallback<FolderSizeInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getImageStoreRootFolderSize(callback: ServiceCallback<FolderSizeInfo>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.FolderSizeInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetImageStoreRootFolderSizeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize_2'
    name: 'getImageStoreRootFolderSize(ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams, ServiceCallback<FolderSizeInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getImageStoreRootFolderSize(options: ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams, callback: ServiceCallback<FolderSizeInfo>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.FolderSizeInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetImageStoreRootFolderSizeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById'
    name: 'getImageStoreUploadSessionById(string, Models.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Получает изображение сеанса передачи магазина, определяемый заданным идентификатором. Пользователь может запросить сеанса передачи в любое время, во время передачи данных.'
    syntax:
      content: 'function getImageStoreUploadSessionById(sessionId: string, options?: Models.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams)'
      parameters:
        - id: sessionId
          type:
            - string
          description: 'Идентификатор GUID, создаваемых пользователем для загрузки файлов. Он идентифицирует сеанс передачи образа хранилища, который отслеживает все фрагменты файла пока она не будет зафиксирована.'
        - id: options
          type:
            - Models.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetImageStoreUploadSessionByIdResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById_1'
    name: 'getImageStoreUploadSessionById(string, ServiceCallback<UploadSession>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getImageStoreUploadSessionById(sessionId: string, callback: ServiceCallback<UploadSession>)'
      parameters:
        - id: sessionId
          type:
            - string
          description: 'Идентификатор GUID, создаваемых пользователем для загрузки файлов. Он идентифицирует сеанс передачи образа хранилища, который отслеживает все фрагменты файла пока она не будет зафиксирована.'
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UploadSession>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetImageStoreUploadSessionByIdResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById_2'
    name: 'getImageStoreUploadSessionById(string, ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams, ServiceCallback<UploadSession>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getImageStoreUploadSessionById(sessionId: string, options: ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams, callback: ServiceCallback<UploadSession>)'
      parameters:
        - id: sessionId
          type:
            - string
          description: 'Идентификатор GUID, создаваемых пользователем для загрузки файлов. Он идентифицирует сеанс передачи образа хранилища, который отслеживает все фрагменты файла пока она не будет зафиксирована.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UploadSession>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetImageStoreUploadSessionByIdResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath'
    name: 'getImageStoreUploadSessionByPath(string, Models.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Получает изображение сеанса передачи хранилища, связанный с изображением относительного пути к хранилищу. Пользователь может запросить сеанса передачи в любое время, во время передачи данных.'
    syntax:
      content: 'function getImageStoreUploadSessionByPath(contentPath: string, options?: Models.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: options
          type:
            - Models.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetImageStoreUploadSessionByPathResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath_1'
    name: 'getImageStoreUploadSessionByPath(string, ServiceCallback<UploadSession>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getImageStoreUploadSessionByPath(contentPath: string, callback: ServiceCallback<UploadSession>)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UploadSession>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetImageStoreUploadSessionByPathResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath_2'
    name: 'getImageStoreUploadSessionByPath(string, ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams, ServiceCallback<UploadSession>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getImageStoreUploadSessionByPath(contentPath: string, options: ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams, callback: ServiceCallback<UploadSession>)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UploadSession>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetImageStoreUploadSessionByPathResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo'
    name: 'getNameExistsInfo(string, Models.ServiceFabricClientGetNameExistsInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает значение, указывающее, существует ли указанное имя Service Fabric.'
    syntax:
      content: 'function getNameExistsInfo(nameId: string, options?: Models.ServiceFabricClientGetNameExistsInfoOptionalParams)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: options
          type:
            - Models.ServiceFabricClientGetNameExistsInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo_1'
    name: 'getNameExistsInfo(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNameExistsInfo(nameId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo_2'
    name: 'getNameExistsInfo(string, ServiceFabricClientGetNameExistsInfoOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNameExistsInfo(nameId: string, options: ServiceFabricClientGetNameExistsInfoOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetNameExistsInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeEventList'
    name: 'getNodeEventList(string, string, string, Models.ServiceFabricClientGetNodeEventListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ответ является списком объектов NodeEvent.
    syntax:
      content: 'function getNodeEventList(nodeName: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetNodeEventListOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetNodeEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodeEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeEventList_1'
    name: 'getNodeEventList(string, string, string, ServiceCallback<Models.NodeEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeEventList(nodeName: string, startTimeUtc: string, endTimeUtc: string, callback: ServiceCallback<Models.NodeEventUnion[]>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.NodeEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodeEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeEventList_2'
    name: 'getNodeEventList(string, string, string, ServiceFabricClientGetNodeEventListOptionalParams, ServiceCallback<Models.NodeEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeEventList(nodeName: string, startTimeUtc: string, endTimeUtc: string, options: ServiceFabricClientGetNodeEventListOptionalParams, callback: ServiceCallback<Models.NodeEventUnion[]>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetNodeEventListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<Models.NodeEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodeEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealth'
    name: 'getNodeHealth(string, Models.ServiceFabricClientGetNodeHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о работоспособности узла Service Fabric. EventsHealthStateFilter используется для фильтрации получаемой коллекции событий работоспособности узла на основе состояния работоспособности. Если узел с заданным именем не существует в хранилище данных о работоспособности, то возвращается ошибка.'
    syntax:
      content: 'function getNodeHealth(nodeName: string, options?: Models.ServiceFabricClientGetNodeHealthOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: options
          type:
            - Models.ServiceFabricClientGetNodeHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodeHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealth_1'
    name: 'getNodeHealth(string, ServiceCallback<NodeHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeHealth(nodeName: string, callback: ServiceCallback<NodeHealth>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodeHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealth_2'
    name: 'getNodeHealth(string, ServiceFabricClientGetNodeHealthOptionalParams, ServiceCallback<NodeHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeHealth(nodeName: string, options: ServiceFabricClientGetNodeHealthOptionalParams, callback: ServiceCallback<NodeHealth>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetNodeHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodeHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy'
    name: 'getNodeHealthUsingPolicy(string, Models.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о работоспособности узла Service Fabric. EventsHealthStateFilter используется для фильтрации получаемой коллекции событий работоспособности узла на основе состояния работоспособности. Используйте ClusterHealthPolicy в тело запроса POST для переопределения политики работоспособности, используемых для оценки работоспособности. Если узел с заданным именем не существует в хранилище данных о работоспособности, то возвращается ошибка.'
    syntax:
      content: 'function getNodeHealthUsingPolicy(nodeName: string, options?: Models.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: options
          type:
            - Models.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodeHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy_1'
    name: 'getNodeHealthUsingPolicy(string, ServiceCallback<NodeHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeHealthUsingPolicy(nodeName: string, callback: ServiceCallback<NodeHealth>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodeHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy_2'
    name: 'getNodeHealthUsingPolicy(string, ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams, ServiceCallback<NodeHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeHealthUsingPolicy(nodeName: string, options: ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams, callback: ServiceCallback<NodeHealth>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodeHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfo'
    name: 'getNodeInfo(string, Models.ServiceFabricClientGetNodeInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Ответ содержит имя, состояние, идентификатор, данные о работоспособности, время доступности и другие сведения об узле.'
    syntax:
      content: 'function getNodeInfo(nodeName: string, options?: Models.ServiceFabricClientGetNodeInfoOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: options
          type:
            - Models.ServiceFabricClientGetNodeInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodeInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfo_1'
    name: 'getNodeInfo(string, ServiceCallback<NodeInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeInfo(nodeName: string, callback: ServiceCallback<NodeInfo>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodeInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfo_2'
    name: 'getNodeInfo(string, ServiceFabricClientGetNodeInfoOptionalParams, ServiceCallback<NodeInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeInfo(nodeName: string, options: ServiceFabricClientGetNodeInfoOptionalParams, callback: ServiceCallback<NodeInfo>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetNodeInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodeInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfoList'
    name: getNodeInfoList(Models.ServiceFabricClientGetNodeInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Ответ содержит имя, состояние, идентификатор, данные о работоспособности, время доступности и другие сведения об узлах.'
    syntax:
      content: 'function getNodeInfoList(options?: Models.ServiceFabricClientGetNodeInfoListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetNodeInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfoList_1'
    name: getNodeInfoList(ServiceCallback<PagedNodeInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeInfoList(callback: ServiceCallback<PagedNodeInfoList>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedNodeInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfoList_2'
    name: 'getNodeInfoList(ServiceFabricClientGetNodeInfoListOptionalParams, ServiceCallback<PagedNodeInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeInfoList(options: ServiceFabricClientGetNodeInfoListOptionalParams, callback: ServiceCallback<PagedNodeInfoList>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetNodeInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedNodeInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo'
    name: 'getNodeLoadInfo(string, Models.ServiceFabricClientGetNodeLoadInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Извлекает сведения о нагрузке узла Service Fabric для всех метрик с определениями нагрузки или емкости.
    syntax:
      content: 'function getNodeLoadInfo(nodeName: string, options?: Models.ServiceFabricClientGetNodeLoadInfoOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: options
          type:
            - Models.ServiceFabricClientGetNodeLoadInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodeLoadInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo_1'
    name: 'getNodeLoadInfo(string, ServiceCallback<NodeLoadInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeLoadInfo(nodeName: string, callback: ServiceCallback<NodeLoadInfo>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeLoadInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodeLoadInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo_2'
    name: 'getNodeLoadInfo(string, ServiceFabricClientGetNodeLoadInfoOptionalParams, ServiceCallback<NodeLoadInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeLoadInfo(nodeName: string, options: ServiceFabricClientGetNodeLoadInfoOptionalParams, callback: ServiceCallback<NodeLoadInfo>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetNodeLoadInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeLoadInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodeLoadInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodesEventList'
    name: 'getNodesEventList(string, string, Models.ServiceFabricClientGetNodesEventListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ответ является списком объектов NodeEvent.
    syntax:
      content: 'function getNodesEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetNodesEventListOptionalParams)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetNodesEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodesEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodesEventList_1'
    name: 'getNodesEventList(string, string, ServiceCallback<Models.NodeEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodesEventList(startTimeUtc: string, endTimeUtc: string, callback: ServiceCallback<Models.NodeEventUnion[]>)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.NodeEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodesEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodesEventList_2'
    name: 'getNodesEventList(string, string, ServiceFabricClientGetNodesEventListOptionalParams, ServiceCallback<Models.NodeEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodesEventList(startTimeUtc: string, endTimeUtc: string, options: ServiceFabricClientGetNodesEventListOptionalParams, callback: ServiceCallback<Models.NodeEventUnion[]>)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetNodesEventListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<Models.NodeEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodesEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress'
    name: 'getNodeTransitionProgress(string, string, Models.ServiceFabricClientGetNodeTransitionProgressOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о ходе выполнения операции, запущенной с помощью StartNodeTransition, с использованием предоставленного OperationId.'
    syntax:
      content: 'function getNodeTransitionProgress(nodeName: string, operationId: string, options?: Models.ServiceFabricClientGetNodeTransitionProgressOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: options
          type:
            - Models.ServiceFabricClientGetNodeTransitionProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodeTransitionProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress_1'
    name: 'getNodeTransitionProgress(string, string, ServiceCallback<NodeTransitionProgress>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeTransitionProgress(nodeName: string, operationId: string, callback: ServiceCallback<NodeTransitionProgress>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeTransitionProgress>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodeTransitionProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress_2'
    name: 'getNodeTransitionProgress(string, string, ServiceFabricClientGetNodeTransitionProgressOptionalParams, ServiceCallback<NodeTransitionProgress>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeTransitionProgress(nodeName: string, operationId: string, options: ServiceFabricClientGetNodeTransitionProgressOptionalParams, callback: ServiceCallback<NodeTransitionProgress>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetNodeTransitionProgressOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeTransitionProgress>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetNodeTransitionProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo'
    name: 'getPartitionBackupConfigurationInfo(string, Models.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Возвращает сведения о конфигурации резервного копирования Service Fabric для указанной секции.
    syntax:
      content: 'function getPartitionBackupConfigurationInfo(partitionId: string, options?: Models.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionBackupConfigurationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo_1'
    name: 'getPartitionBackupConfigurationInfo(string, ServiceCallback<PartitionBackupConfigurationInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionBackupConfigurationInfo(partitionId: string, callback: ServiceCallback<PartitionBackupConfigurationInfo>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionBackupConfigurationInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionBackupConfigurationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo_2'
    name: 'getPartitionBackupConfigurationInfo(string, ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams, ServiceCallback<PartitionBackupConfigurationInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionBackupConfigurationInfo(partitionId: string, options: ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams, callback: ServiceCallback<PartitionBackupConfigurationInfo>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionBackupConfigurationInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionBackupConfigurationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList'
    name: 'getPartitionBackupList(string, Models.ServiceFabricClientGetPartitionBackupListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает список резервных копий, доступных для данного раздела. Сервер перечисляет все резервные копии, доступные в хранилище резервных копий, настроенные в политике резервного копирования. Он также позволяет фильтровать результат, в зависимости от даты и времени начала и окончания или просто получение последней доступной резервной копии для секции.'
    syntax:
      content: 'function getPartitionBackupList(partitionId: string, options?: Models.ServiceFabricClientGetPartitionBackupListOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionBackupListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionBackupListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList_1'
    name: 'getPartitionBackupList(string, ServiceCallback<PagedBackupInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionBackupList(partitionId: string, callback: ServiceCallback<PagedBackupInfoList>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionBackupListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList_2'
    name: 'getPartitionBackupList(string, ServiceFabricClientGetPartitionBackupListOptionalParams, ServiceCallback<PagedBackupInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionBackupList(partitionId: string, options: ServiceFabricClientGetPartitionBackupListOptionalParams, callback: ServiceCallback<PagedBackupInfoList>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPartitionBackupListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionBackupListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress'
    name: 'getPartitionBackupProgress(string, Models.ServiceFabricClientGetPartitionBackupProgressOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о состоянии из последней резервной копии, а также сведений и причину ошибки в случае завершения.'
    syntax:
      content: 'function getPartitionBackupProgress(partitionId: string, options?: Models.ServiceFabricClientGetPartitionBackupProgressOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionBackupProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionBackupProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress_1'
    name: 'getPartitionBackupProgress(string, ServiceCallback<BackupProgressInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionBackupProgress(partitionId: string, callback: ServiceCallback<BackupProgressInfo>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.BackupProgressInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionBackupProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress_2'
    name: 'getPartitionBackupProgress(string, ServiceFabricClientGetPartitionBackupProgressOptionalParams, ServiceCallback<BackupProgressInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionBackupProgress(partitionId: string, options: ServiceFabricClientGetPartitionBackupProgressOptionalParams, callback: ServiceCallback<BackupProgressInfo>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPartitionBackupProgressOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.BackupProgressInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionBackupProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionEventList'
    name: 'getPartitionEventList(string, string, string, Models.ServiceFabricClientGetPartitionEventListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ответ является списком объектов PartitionEvent.
    syntax:
      content: 'function getPartitionEventList(partitionId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetPartitionEventListOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionEventList_1'
    name: 'getPartitionEventList(string, string, string, ServiceCallback<Models.PartitionEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionEventList(partitionId: string, startTimeUtc: string, endTimeUtc: string, callback: ServiceCallback<Models.PartitionEventUnion[]>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.PartitionEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionEventList_2'
    name: 'getPartitionEventList(string, string, string, ServiceFabricClientGetPartitionEventListOptionalParams, ServiceCallback<Models.PartitionEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionEventList(partitionId: string, startTimeUtc: string, endTimeUtc: string, options: ServiceFabricClientGetPartitionEventListOptionalParams, callback: ServiceCallback<Models.PartitionEventUnion[]>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPartitionEventListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<Models.PartitionEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealth'
    name: 'getPartitionHealth(string, Models.ServiceFabricClientGetPartitionHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      EventsHealthStateFilter используется для фильтрации получаемой коллекции событий работоспособности службы на основе состояния работоспособности.
      ReplicasHealthStateFilter используется для фильтрации коллекции объектов ReplicaHealthState для секции.
      Если указанная секция не существует в хранилище данных о работоспособности, то этот запрос возвращает ошибку.
    syntax:
      content: 'function getPartitionHealth(partitionId: string, options?: Models.ServiceFabricClientGetPartitionHealthOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealth_1'
    name: 'getPartitionHealth(string, ServiceCallback<PartitionHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionHealth(partitionId: string, callback: ServiceCallback<PartitionHealth>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealth_2'
    name: 'getPartitionHealth(string, ServiceFabricClientGetPartitionHealthOptionalParams, ServiceCallback<PartitionHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionHealth(partitionId: string, options: ServiceFabricClientGetPartitionHealthOptionalParams, callback: ServiceCallback<PartitionHealth>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPartitionHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy'
    name: 'getPartitionHealthUsingPolicy(string, Models.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает сведения о работоспособности указанной секции.
      Если политика работоспособности приложения указано, оценка работоспособности использует его для получения общего состояния работоспособности.
      Если политика не указана, оценка работоспособности использует политики работоспособности приложения, определенных в манифесте приложения или политику работоспособности по умолчанию, если политика не определена в манифесте.
      Eventshealthstatefilter используется для фильтрации получаемой коллекции событий работоспособности секции на основе состояния работоспособности.
      ReplicasHealthStateFilter используется для фильтрации коллекции объектов ReplicaHealthState для секции. Используйте ApplicationHealthPolicy в тело запроса POST для переопределения политики работоспособности, используемых для оценки работоспособности.
      Если указанная секция не существует в хранилище данных о работоспособности, то этот запрос возвращает ошибку.
    syntax:
      content: 'function getPartitionHealthUsingPolicy(partitionId: string, options?: Models.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy_1'
    name: 'getPartitionHealthUsingPolicy(string, ServiceCallback<PartitionHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionHealthUsingPolicy(partitionId: string, callback: ServiceCallback<PartitionHealth>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy_2'
    name: 'getPartitionHealthUsingPolicy(string, ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams, ServiceCallback<PartitionHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionHealthUsingPolicy(partitionId: string, options: ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams, callback: ServiceCallback<PartitionHealth>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfo'
    name: 'getPartitionInfo(string, Models.ServiceFabricClientGetPartitionInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения об указанной секции. Ответ содержит идентификатор секции, сведения о схеме секционирования, ключи, поддерживаемые секцией, состояние, данные о работоспособности и другие сведения о секции.'
    syntax:
      content: 'function getPartitionInfo(partitionId: string, options?: Models.ServiceFabricClientGetPartitionInfoOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfo_1'
    name: 'getPartitionInfo(string, ServiceCallback<Models.ServicePartitionInfoUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionInfo(partitionId: string, callback: ServiceCallback<Models.ServicePartitionInfoUnion>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<Models.ServicePartitionInfoUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfo_2'
    name: 'getPartitionInfo(string, ServiceFabricClientGetPartitionInfoOptionalParams, ServiceCallback<Models.ServicePartitionInfoUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionInfo(partitionId: string, options: ServiceFabricClientGetPartitionInfoOptionalParams, callback: ServiceCallback<Models.ServicePartitionInfoUnion>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPartitionInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<Models.ServicePartitionInfoUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList'
    name: 'getPartitionInfoList(string, Models.ServiceFabricClientGetPartitionInfoListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Ответ содержит идентификатор секции, сведения о схеме секционирования, ключи, поддерживаемые секцией, состояние, данные о работоспособности и другие сведения о секции.'
    syntax:
      content: 'function getPartitionInfoList(serviceId: string, options?: Models.ServiceFabricClientGetPartitionInfoListOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList_1'
    name: 'getPartitionInfoList(string, ServiceCallback<PagedServicePartitionInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionInfoList(serviceId: string, callback: ServiceCallback<PagedServicePartitionInfoList>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedServicePartitionInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList_2'
    name: 'getPartitionInfoList(string, ServiceFabricClientGetPartitionInfoListOptionalParams, ServiceCallback<PagedServicePartitionInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionInfoList(serviceId: string, options: ServiceFabricClientGetPartitionInfoListOptionalParams, callback: ServiceCallback<PagedServicePartitionInfoList>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPartitionInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedServicePartitionInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation'
    name: 'getPartitionLoadInformation(string, Models.ServiceFabricClientGetPartitionLoadInformationOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает сведения о нагрузке указанной секции.
      Ответ включает список отчетов по загрузке для секции Service Fabric.
      Каждый отчет содержит имя метрики нагрузки, значение и время последнего сообщения в формате UTC.
    syntax:
      content: 'function getPartitionLoadInformation(partitionId: string, options?: Models.ServiceFabricClientGetPartitionLoadInformationOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionLoadInformationOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionLoadInformationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation_1'
    name: 'getPartitionLoadInformation(string, ServiceCallback<PartitionLoadInformation>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionLoadInformation(partitionId: string, callback: ServiceCallback<PartitionLoadInformation>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionLoadInformation>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionLoadInformationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation_2'
    name: 'getPartitionLoadInformation(string, ServiceFabricClientGetPartitionLoadInformationOptionalParams, ServiceCallback<PartitionLoadInformation>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionLoadInformation(partitionId: string, options: ServiceFabricClientGetPartitionLoadInformationOptionalParams, callback: ServiceCallback<PartitionLoadInformation>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPartitionLoadInformationOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionLoadInformation>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionLoadInformationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList'
    name: 'getPartitionReplicaEventList(string, string, string, string, Models.ServiceFabricClientGetPartitionReplicaEventListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ответ является списком объектов ReplicaEvent.
    syntax:
      content: 'function getPartitionReplicaEventList(partitionId: string, replicaId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetPartitionReplicaEventListOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionReplicaEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionReplicaEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList_1'
    name: 'getPartitionReplicaEventList(string, string, string, string, ServiceCallback<Models.ReplicaEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionReplicaEventList(partitionId: string, replicaId: string, startTimeUtc: string, endTimeUtc: string, callback: ServiceCallback<Models.ReplicaEventUnion[]>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.ReplicaEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionReplicaEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList_2'
    name: 'getPartitionReplicaEventList(string, string, string, string, ServiceFabricClientGetPartitionReplicaEventListOptionalParams, ServiceCallback<Models.ReplicaEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionReplicaEventList(partitionId: string, replicaId: string, startTimeUtc: string, endTimeUtc: string, options: ServiceFabricClientGetPartitionReplicaEventListOptionalParams, callback: ServiceCallback<Models.ReplicaEventUnion[]>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPartitionReplicaEventListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<Models.ReplicaEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionReplicaEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList'
    name: 'getPartitionReplicasEventList(string, string, string, Models.ServiceFabricClientGetPartitionReplicasEventListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ответ является списком объектов ReplicaEvent.
    syntax:
      content: 'function getPartitionReplicasEventList(partitionId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetPartitionReplicasEventListOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionReplicasEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionReplicasEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList_1'
    name: 'getPartitionReplicasEventList(string, string, string, ServiceCallback<Models.ReplicaEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionReplicasEventList(partitionId: string, startTimeUtc: string, endTimeUtc: string, callback: ServiceCallback<Models.ReplicaEventUnion[]>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.ReplicaEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionReplicasEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList_2'
    name: 'getPartitionReplicasEventList(string, string, string, ServiceFabricClientGetPartitionReplicasEventListOptionalParams, ServiceCallback<Models.ReplicaEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionReplicasEventList(partitionId: string, startTimeUtc: string, endTimeUtc: string, options: ServiceFabricClientGetPartitionReplicasEventListOptionalParams, callback: ServiceCallback<Models.ReplicaEventUnion[]>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPartitionReplicasEventListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<Models.ReplicaEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionReplicasEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress'
    name: 'getPartitionRestartProgress(string, string, string, Models.ServiceFabricClientGetPartitionRestartProgressOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о ходе выполнения PartitionRestart, запущенного с помощью StartPartitionRestart, с использованием предоставленного OperationId.'
    syntax:
      content: 'function getPartitionRestartProgress(serviceId: string, partitionId: string, operationId: string, options?: Models.ServiceFabricClientGetPartitionRestartProgressOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionRestartProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionRestartProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress_1'
    name: 'getPartitionRestartProgress(string, string, string, ServiceCallback<PartitionRestartProgress>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionRestartProgress(serviceId: string, partitionId: string, operationId: string, callback: ServiceCallback<PartitionRestartProgress>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionRestartProgress>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionRestartProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress_2'
    name: 'getPartitionRestartProgress(string, string, string, ServiceFabricClientGetPartitionRestartProgressOptionalParams, ServiceCallback<PartitionRestartProgress>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionRestartProgress(serviceId: string, partitionId: string, operationId: string, options: ServiceFabricClientGetPartitionRestartProgressOptionalParams, callback: ServiceCallback<PartitionRestartProgress>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPartitionRestartProgressOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionRestartProgress>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionRestartProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress'
    name: 'getPartitionRestoreProgress(string, Models.ServiceFabricClientGetPartitionRestoreProgressOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Возвращает сведения о состоянии вместе с сведений и причину ошибки в случае завершения последней операции восстановления.
    syntax:
      content: 'function getPartitionRestoreProgress(partitionId: string, options?: Models.ServiceFabricClientGetPartitionRestoreProgressOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionRestoreProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionRestoreProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress_1'
    name: 'getPartitionRestoreProgress(string, ServiceCallback<RestoreProgressInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionRestoreProgress(partitionId: string, callback: ServiceCallback<RestoreProgressInfo>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RestoreProgressInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionRestoreProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress_2'
    name: 'getPartitionRestoreProgress(string, ServiceFabricClientGetPartitionRestoreProgressOptionalParams, ServiceCallback<RestoreProgressInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionRestoreProgress(partitionId: string, options: ServiceFabricClientGetPartitionRestoreProgressOptionalParams, callback: ServiceCallback<RestoreProgressInfo>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPartitionRestoreProgressOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RestoreProgressInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionRestoreProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList'
    name: 'getPartitionsEventList(string, string, Models.ServiceFabricClientGetPartitionsEventListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ответ является списком объектов PartitionEvent.
    syntax:
      content: 'function getPartitionsEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetPartitionsEventListOptionalParams)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionsEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionsEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList_1'
    name: 'getPartitionsEventList(string, string, ServiceCallback<Models.PartitionEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionsEventList(startTimeUtc: string, endTimeUtc: string, callback: ServiceCallback<Models.PartitionEventUnion[]>)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.PartitionEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionsEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList_2'
    name: 'getPartitionsEventList(string, string, ServiceFabricClientGetPartitionsEventListOptionalParams, ServiceCallback<Models.PartitionEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionsEventList(startTimeUtc: string, endTimeUtc: string, options: ServiceFabricClientGetPartitionsEventListOptionalParams, callback: ServiceCallback<Models.PartitionEventUnion[]>)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPartitionsEventListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<Models.PartitionEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPartitionsEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfo'
    name: 'getPropertyInfo(string, string, Models.ServiceFabricClientGetPropertyInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Возвращает указанное свойство Service Fabric с указанным именем. Всегда будет возвращать значение и метаданные.
    syntax:
      content: 'function getPropertyInfo(nameId: string, propertyName: string, options?: Models.ServiceFabricClientGetPropertyInfoOptionalParams)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: propertyName
          type:
            - string
          description: Указывает имя возвращаемого свойства.
        - id: options
          type:
            - Models.ServiceFabricClientGetPropertyInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPropertyInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfo_1'
    name: 'getPropertyInfo(string, string, ServiceCallback<PropertyInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPropertyInfo(nameId: string, propertyName: string, callback: ServiceCallback<PropertyInfo>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: propertyName
          type:
            - string
          description: Указывает имя возвращаемого свойства.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PropertyInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPropertyInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfo_2'
    name: 'getPropertyInfo(string, string, ServiceFabricClientGetPropertyInfoOptionalParams, ServiceCallback<PropertyInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPropertyInfo(nameId: string, propertyName: string, options: ServiceFabricClientGetPropertyInfoOptionalParams, callback: ServiceCallback<PropertyInfo>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: propertyName
          type:
            - string
          description: Указывает имя возвращаемого свойства.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPropertyInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PropertyInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPropertyInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList'
    name: 'getPropertyInfoList(string, Models.ServiceFabricClientGetPropertyInfoListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Имя Service Fabric может иметь одно или несколько именованных свойств для хранения пользовательской информации. Эта операция возвращает информацию об этих свойствах в списке, разбитом на страницы. Информация включает имя, значение и метаданные о каждом из свойств.'
    syntax:
      content: 'function getPropertyInfoList(nameId: string, options?: Models.ServiceFabricClientGetPropertyInfoListOptionalParams)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: options
          type:
            - Models.ServiceFabricClientGetPropertyInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPropertyInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList_1'
    name: 'getPropertyInfoList(string, ServiceCallback<PagedPropertyInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPropertyInfoList(nameId: string, callback: ServiceCallback<PagedPropertyInfoList>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedPropertyInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPropertyInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList_2'
    name: 'getPropertyInfoList(string, ServiceFabricClientGetPropertyInfoListOptionalParams, ServiceCallback<PagedPropertyInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPropertyInfoList(nameId: string, options: ServiceFabricClientGetPropertyInfoListOptionalParams, callback: ServiceCallback<PagedPropertyInfoList>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetPropertyInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedPropertyInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetPropertyInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList'
    name: getProvisionedFabricCodeVersionInfoList(Models.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает список сведений о версиях кода структуры, подготовленных в кластере. Параметр CodeVersion может использоваться для необязательной фильтрации выходных данных только для конкретной версии.'
    syntax:
      content: 'function getProvisionedFabricCodeVersionInfoList(options?: Models.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetProvisionedFabricCodeVersionInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList_1'
    name: 'getProvisionedFabricCodeVersionInfoList(ServiceCallback<FabricCodeVersionInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getProvisionedFabricCodeVersionInfoList(callback: ServiceCallback<FabricCodeVersionInfo[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.FabricCodeVersionInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetProvisionedFabricCodeVersionInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList_2'
    name: 'getProvisionedFabricCodeVersionInfoList(ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams, ServiceCallback<FabricCodeVersionInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getProvisionedFabricCodeVersionInfoList(options: ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams, callback: ServiceCallback<FabricCodeVersionInfo[]>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.FabricCodeVersionInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetProvisionedFabricCodeVersionInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList'
    name: getProvisionedFabricConfigVersionInfoList(Models.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает список сведений о версиях конфигурации структуры, подготовленных в кластере. Параметр ConfigVersion может использоваться для необязательной фильтрации выходных данных только для конкретной версии.'
    syntax:
      content: 'function getProvisionedFabricConfigVersionInfoList(options?: Models.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetProvisionedFabricConfigVersionInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList_1'
    name: 'getProvisionedFabricConfigVersionInfoList(ServiceCallback<FabricConfigVersionInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getProvisionedFabricConfigVersionInfoList(callback: ServiceCallback<FabricConfigVersionInfo[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.FabricConfigVersionInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetProvisionedFabricConfigVersionInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList_2'
    name: 'getProvisionedFabricConfigVersionInfoList(ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams, ServiceCallback<FabricConfigVersionInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getProvisionedFabricConfigVersionInfoList(options: ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams, callback: ServiceCallback<FabricConfigVersionInfo[]>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.FabricConfigVersionInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetProvisionedFabricConfigVersionInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress'
    name: 'getQuorumLossProgress(string, string, string, Models.ServiceFabricClientGetQuorumLossProgressOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения о ходе выполнения операции потери кворума, запущенной с помощью StartQuorumLoss, с использованием предоставленного OperationId.'
    syntax:
      content: 'function getQuorumLossProgress(serviceId: string, partitionId: string, operationId: string, options?: Models.ServiceFabricClientGetQuorumLossProgressOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: options
          type:
            - Models.ServiceFabricClientGetQuorumLossProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetQuorumLossProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress_1'
    name: 'getQuorumLossProgress(string, string, string, ServiceCallback<PartitionQuorumLossProgress>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getQuorumLossProgress(serviceId: string, partitionId: string, operationId: string, callback: ServiceCallback<PartitionQuorumLossProgress>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionQuorumLossProgress>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetQuorumLossProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress_2'
    name: 'getQuorumLossProgress(string, string, string, ServiceFabricClientGetQuorumLossProgressOptionalParams, ServiceCallback<PartitionQuorumLossProgress>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getQuorumLossProgress(serviceId: string, partitionId: string, operationId: string, options: ServiceFabricClientGetQuorumLossProgressOptionalParams, callback: ServiceCallback<PartitionQuorumLossProgress>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetQuorumLossProgressOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionQuorumLossProgress>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetQuorumLossProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getRepairTaskList'
    name: getRepairTaskList(Models.ServiceFabricClientGetRepairTaskListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Этот API поддерживает платформу Service Fabric. Он не предназначен для использования непосредственно в коде.
    syntax:
      content: 'function getRepairTaskList(options?: Models.ServiceFabricClientGetRepairTaskListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetRepairTaskListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetRepairTaskListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getRepairTaskList_1'
    name: 'getRepairTaskList(ServiceCallback<RepairTask[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getRepairTaskList(callback: ServiceCallback<RepairTask[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.RepairTask[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetRepairTaskListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getRepairTaskList_2'
    name: 'getRepairTaskList(ServiceFabricClientGetRepairTaskListOptionalParams, ServiceCallback<RepairTask[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getRepairTaskList(options: ServiceFabricClientGetRepairTaskListOptionalParams, callback: ServiceCallback<RepairTask[]>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetRepairTaskListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.RepairTask[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetRepairTaskListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealth'
    name: 'getReplicaHealth(string, string, Models.ServiceFabricClientGetReplicaHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает сведения о работоспособности реплики Service Fabric.
      EventsHealthStateFilter используется для фильтрации получаемой коллекции событий работоспособности реплики на основе состояния работоспособности.
    syntax:
      content: 'function getReplicaHealth(partitionId: string, replicaId: string, options?: Models.ServiceFabricClientGetReplicaHealthOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: options
          type:
            - Models.ServiceFabricClientGetReplicaHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetReplicaHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealth_1'
    name: 'getReplicaHealth(string, string, ServiceCallback<Models.ReplicaHealthUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getReplicaHealth(partitionId: string, replicaId: string, callback: ServiceCallback<Models.ReplicaHealthUnion>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: callback
          type:
            - ServiceCallback<Models.ReplicaHealthUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetReplicaHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealth_2'
    name: 'getReplicaHealth(string, string, ServiceFabricClientGetReplicaHealthOptionalParams, ServiceCallback<Models.ReplicaHealthUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getReplicaHealth(partitionId: string, replicaId: string, options: ServiceFabricClientGetReplicaHealthOptionalParams, callback: ServiceCallback<Models.ReplicaHealthUnion>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetReplicaHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<Models.ReplicaHealthUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetReplicaHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy'
    name: 'getReplicaHealthUsingPolicy(string, string, Models.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает сведения о работоспособности реплики службы с отслеживанием состояния или экземпляра службы без отслеживания состояния Service Fabric.
      EventsHealthStateFilter используется для фильтрации получаемой коллекции событий работоспособности кластера на основе состояния работоспособности.
      Используйте ApplicationHealthPolicy, чтобы при необходимости переопределить политики работоспособности, используемых для оценки работоспособности. Этот API использует только поле «ConsiderWarningAsError» ApplicationHealthPolicy. Остальные поля учитываются при оценке работоспособности реплики.
    syntax:
      content: 'function getReplicaHealthUsingPolicy(partitionId: string, replicaId: string, options?: Models.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: options
          type:
            - Models.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetReplicaHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy_1'
    name: 'getReplicaHealthUsingPolicy(string, string, ServiceCallback<Models.ReplicaHealthUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getReplicaHealthUsingPolicy(partitionId: string, replicaId: string, callback: ServiceCallback<Models.ReplicaHealthUnion>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: callback
          type:
            - ServiceCallback<Models.ReplicaHealthUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetReplicaHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy_2'
    name: 'getReplicaHealthUsingPolicy(string, string, ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams, ServiceCallback<Models.ReplicaHealthUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getReplicaHealthUsingPolicy(partitionId: string, replicaId: string, options: ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams, callback: ServiceCallback<Models.ReplicaHealthUnion>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<Models.ReplicaHealthUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetReplicaHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfo'
    name: 'getReplicaInfo(string, string, Models.ServiceFabricClientGetReplicaInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Ответ содержит идентификатор, роль, состояние, сведения о работоспособности, имя узла, время доступности и другие сведения о реплике.'
    syntax:
      content: 'function getReplicaInfo(partitionId: string, replicaId: string, options?: Models.ServiceFabricClientGetReplicaInfoOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: options
          type:
            - Models.ServiceFabricClientGetReplicaInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetReplicaInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfo_1'
    name: 'getReplicaInfo(string, string, ServiceCallback<Models.ReplicaInfoUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getReplicaInfo(partitionId: string, replicaId: string, callback: ServiceCallback<Models.ReplicaInfoUnion>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: callback
          type:
            - ServiceCallback<Models.ReplicaInfoUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetReplicaInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfo_2'
    name: 'getReplicaInfo(string, string, ServiceFabricClientGetReplicaInfoOptionalParams, ServiceCallback<Models.ReplicaInfoUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getReplicaInfo(partitionId: string, replicaId: string, options: ServiceFabricClientGetReplicaInfoOptionalParams, callback: ServiceCallback<Models.ReplicaInfoUnion>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetReplicaInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<Models.ReplicaInfoUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetReplicaInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList'
    name: 'getReplicaInfoList(string, Models.ServiceFabricClientGetReplicaInfoListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Конечная точка GetReplicas возвращает сведения о репликах указанной секции. Ответ содержит идентификатор, роль, состояние, сведения о работоспособности, имя узла, время доступности и другие сведения о реплике.'
    syntax:
      content: 'function getReplicaInfoList(partitionId: string, options?: Models.ServiceFabricClientGetReplicaInfoListOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientGetReplicaInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetReplicaInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList_1'
    name: 'getReplicaInfoList(string, ServiceCallback<PagedReplicaInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getReplicaInfoList(partitionId: string, callback: ServiceCallback<PagedReplicaInfoList>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedReplicaInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetReplicaInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList_2'
    name: 'getReplicaInfoList(string, ServiceFabricClientGetReplicaInfoListOptionalParams, ServiceCallback<PagedReplicaInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getReplicaInfoList(partitionId: string, options: ServiceFabricClientGetReplicaInfoListOptionalParams, callback: ServiceCallback<PagedReplicaInfoList>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetReplicaInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedReplicaInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetReplicaInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo'
    name: 'getServiceBackupConfigurationInfo(string, Models.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Получает сведения о конфигурации резервного копирования Service Fabric для службы и секции в этой службе.
    syntax:
      content: 'function getServiceBackupConfigurationInfo(serviceId: string, options?: Models.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceBackupConfigurationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo_1'
    name: 'getServiceBackupConfigurationInfo(string, ServiceCallback<PagedBackupConfigurationInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceBackupConfigurationInfo(serviceId: string, callback: ServiceCallback<PagedBackupConfigurationInfoList>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupConfigurationInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceBackupConfigurationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo_2'
    name: 'getServiceBackupConfigurationInfo(string, ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams, ServiceCallback<PagedBackupConfigurationInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceBackupConfigurationInfo(serviceId: string, options: ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams, callback: ServiceCallback<PagedBackupConfigurationInfoList>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupConfigurationInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceBackupConfigurationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceBackupList'
    name: 'getServiceBackupList(string, Models.ServiceFabricClientGetServiceBackupListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает список резервных копий, доступных для каждой секции в этой службе Service Fabric. Сервер перечисляет все резервные копии, доступные в хранилище резервных копий, настроенные в политике резервного копирования.
      Он также позволяет фильтровать результат, в зависимости от даты и времени начала и окончания или просто получение последней доступной резервной копии для каждой секции.
    syntax:
      content: 'function getServiceBackupList(serviceId: string, options?: Models.ServiceFabricClientGetServiceBackupListOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceBackupListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceBackupListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceBackupList_1'
    name: 'getServiceBackupList(string, ServiceCallback<PagedBackupInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceBackupList(serviceId: string, callback: ServiceCallback<PagedBackupInfoList>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceBackupListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceBackupList_2'
    name: 'getServiceBackupList(string, ServiceFabricClientGetServiceBackupListOptionalParams, ServiceCallback<PagedBackupInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceBackupList(serviceId: string, options: ServiceFabricClientGetServiceBackupListOptionalParams, callback: ServiceCallback<PagedBackupInfoList>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetServiceBackupListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceBackupListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceDescription'
    name: 'getServiceDescription(string, Models.ServiceFabricClientGetServiceDescriptionOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает описание существующей службы Service Fabric. Служба должна быть создана, прежде чем можно будет извлечь ее описание.'
    syntax:
      content: 'function getServiceDescription(serviceId: string, options?: Models.ServiceFabricClientGetServiceDescriptionOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceDescriptionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceDescriptionResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceDescription_1'
    name: 'getServiceDescription(string, ServiceCallback<Models.ServiceDescriptionUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceDescription(serviceId: string, callback: ServiceCallback<Models.ServiceDescriptionUnion>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<Models.ServiceDescriptionUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceDescriptionResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceDescription_2'
    name: 'getServiceDescription(string, ServiceFabricClientGetServiceDescriptionOptionalParams, ServiceCallback<Models.ServiceDescriptionUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceDescription(serviceId: string, options: ServiceFabricClientGetServiceDescriptionOptionalParams, callback: ServiceCallback<Models.ServiceDescriptionUnion>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetServiceDescriptionOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<Models.ServiceDescriptionUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceDescriptionResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceEventList'
    name: 'getServiceEventList(string, string, string, Models.ServiceFabricClientGetServiceEventListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ответ является списком объектов ServiceEvent.
    syntax:
      content: 'function getServiceEventList(serviceId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetServiceEventListOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceEventList_1'
    name: 'getServiceEventList(string, string, string, ServiceCallback<Models.ServiceEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceEventList(serviceId: string, startTimeUtc: string, endTimeUtc: string, callback: ServiceCallback<Models.ServiceEventUnion[]>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.ServiceEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceEventList_2'
    name: 'getServiceEventList(string, string, string, ServiceFabricClientGetServiceEventListOptionalParams, ServiceCallback<Models.ServiceEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceEventList(serviceId: string, startTimeUtc: string, endTimeUtc: string, options: ServiceFabricClientGetServiceEventListOptionalParams, callback: ServiceCallback<Models.ServiceEventUnion[]>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetServiceEventListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<Models.ServiceEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealth'
    name: 'getServiceHealth(string, Models.ServiceFabricClientGetServiceHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает сведения о работоспособности указанной службы.
      EventsHealthStateFilter используется для фильтрации получаемой коллекции событий работоспособности службы на основе состояния работоспособности.
      PartitionsHealthStateFilter используется для фильтрации возвращаемой коллекции секций.
      Если указанная служба не существует в хранилище данных о работоспособности, то этот запрос возвращает ошибку.
    syntax:
      content: 'function getServiceHealth(serviceId: string, options?: Models.ServiceFabricClientGetServiceHealthOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealth_1'
    name: 'getServiceHealth(string, ServiceCallback<ServiceHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceHealth(serviceId: string, callback: ServiceCallback<ServiceHealth>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealth_2'
    name: 'getServiceHealth(string, ServiceFabricClientGetServiceHealthOptionalParams, ServiceCallback<ServiceHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceHealth(serviceId: string, options: ServiceFabricClientGetServiceHealthOptionalParams, callback: ServiceCallback<ServiceHealth>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetServiceHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy'
    name: 'getServiceHealthUsingPolicy(string, Models.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает сведения о работоспособности указанной службы.
      Если политика работоспособности приложения указано, оценка работоспособности использует его для получения общего состояния работоспособности.
      Если политика не указана, оценка работоспособности использует политики работоспособности приложения, определенных в манифесте приложения или политику работоспособности по умолчанию, если политика не определена в манифесте.
      EventsHealthStateFilter используется для фильтрации получаемой коллекции событий работоспособности службы на основе состояния работоспособности.
      PartitionsHealthStateFilter используется для фильтрации возвращаемой коллекции секций.
      Если указанная служба не существует в хранилище данных о работоспособности, то этот запрос возвращает ошибку.
    syntax:
      content: 'function getServiceHealthUsingPolicy(serviceId: string, options?: Models.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy_1'
    name: 'getServiceHealthUsingPolicy(string, ServiceCallback<ServiceHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceHealthUsingPolicy(serviceId: string, callback: ServiceCallback<ServiceHealth>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy_2'
    name: 'getServiceHealthUsingPolicy(string, ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams, ServiceCallback<ServiceHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceHealthUsingPolicy(serviceId: string, options: ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams, callback: ServiceCallback<ServiceHealth>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceHealth>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfo'
    name: 'getServiceInfo(string, string, Models.ServiceFabricClientGetServiceInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает сведения об указанной службе, относящейся к указанному приложению Service Fabric.'
    syntax:
      content: 'function getServiceInfo(applicationId: string, serviceId: string, options?: Models.ServiceFabricClientGetServiceInfoOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfo_1'
    name: 'getServiceInfo(string, string, ServiceCallback<Models.ServiceInfoUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceInfo(applicationId: string, serviceId: string, callback: ServiceCallback<Models.ServiceInfoUnion>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<Models.ServiceInfoUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfo_2'
    name: 'getServiceInfo(string, string, ServiceFabricClientGetServiceInfoOptionalParams, ServiceCallback<Models.ServiceInfoUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceInfo(applicationId: string, serviceId: string, options: ServiceFabricClientGetServiceInfoOptionalParams, callback: ServiceCallback<Models.ServiceInfoUnion>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetServiceInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<Models.ServiceInfoUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfoList'
    name: 'getServiceInfoList(string, Models.ServiceFabricClientGetServiceInfoListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Извлекает сведения обо всех службах, относящихся к приложению, указанному с помощью идентификатора приложения.'
    syntax:
      content: 'function getServiceInfoList(applicationId: string, options?: Models.ServiceFabricClientGetServiceInfoListOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfoList_1'
    name: 'getServiceInfoList(string, ServiceCallback<PagedServiceInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceInfoList(applicationId: string, callback: ServiceCallback<PagedServiceInfoList>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedServiceInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfoList_2'
    name: 'getServiceInfoList(string, ServiceFabricClientGetServiceInfoListOptionalParams, ServiceCallback<PagedServiceInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceInfoList(applicationId: string, options: ServiceFabricClientGetServiceInfoListOptionalParams, callback: ServiceCallback<PagedServiceInfoList>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetServiceInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedServiceInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceManifest'
    name: 'getServiceManifest(string, string, string, Models.ServiceFabricClientGetServiceManifestOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает манифест, описывающий тип службы. Ответ содержит XML манифеста службы в виде строки.'
    syntax:
      content: 'function getServiceManifest(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, options?: Models.ServiceFabricClientGetServiceManifestOptionalParams)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: applicationTypeVersion
          type:
            - string
          description: Версия типа приложения.
        - id: serviceManifestName
          type:
            - string
          description: 'Имя манифеста службы, зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceManifestOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceManifestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceManifest_1'
    name: 'getServiceManifest(string, string, string, ServiceCallback<ServiceTypeManifest>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceManifest(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, callback: ServiceCallback<ServiceTypeManifest>)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: applicationTypeVersion
          type:
            - string
          description: Версия типа приложения.
        - id: serviceManifestName
          type:
            - string
          description: 'Имя манифеста службы, зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceTypeManifest>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceManifestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceManifest_2'
    name: 'getServiceManifest(string, string, string, ServiceFabricClientGetServiceManifestOptionalParams, ServiceCallback<ServiceTypeManifest>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceManifest(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, options: ServiceFabricClientGetServiceManifestOptionalParams, callback: ServiceCallback<ServiceTypeManifest>)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: applicationTypeVersion
          type:
            - string
          description: Версия типа приложения.
        - id: serviceManifestName
          type:
            - string
          description: 'Имя манифеста службы, зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetServiceManifestOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceTypeManifest>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceManifestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo'
    name: 'getServiceNameInfo(string, Models.ServiceFabricClientGetServiceNameInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возвращает имя службы для заданной секции. Возвращается сообщение об ошибке 404, если идентификатор секции не существует в кластере.'
    syntax:
      content: 'function getServiceNameInfo(partitionId: string, options?: Models.ServiceFabricClientGetServiceNameInfoOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceNameInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceNameInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo_1'
    name: 'getServiceNameInfo(string, ServiceCallback<ServiceNameInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceNameInfo(partitionId: string, callback: ServiceCallback<ServiceNameInfo>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceNameInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceNameInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo_2'
    name: 'getServiceNameInfo(string, ServiceFabricClientGetServiceNameInfoOptionalParams, ServiceCallback<ServiceNameInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceNameInfo(partitionId: string, options: ServiceFabricClientGetServiceNameInfoOptionalParams, callback: ServiceCallback<ServiceNameInfo>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetServiceNameInfoOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceNameInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceNameInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServicesEventList'
    name: 'getServicesEventList(string, string, Models.ServiceFabricClientGetServicesEventListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ответ является списком объектов ServiceEvent.
    syntax:
      content: 'function getServicesEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetServicesEventListOptionalParams)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetServicesEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServicesEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServicesEventList_1'
    name: 'getServicesEventList(string, string, ServiceCallback<Models.ServiceEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServicesEventList(startTimeUtc: string, endTimeUtc: string, callback: ServiceCallback<Models.ServiceEventUnion[]>)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.ServiceEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServicesEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServicesEventList_2'
    name: 'getServicesEventList(string, string, ServiceFabricClientGetServicesEventListOptionalParams, ServiceCallback<Models.ServiceEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServicesEventList(startTimeUtc: string, endTimeUtc: string, options: ServiceFabricClientGetServicesEventListOptionalParams, callback: ServiceCallback<Models.ServiceEventUnion[]>)'
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'Время начала запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'Время окончания запроса поиска в формате UTC ISO yyyy-MM-: ссZ.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetServicesEventListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<Models.ServiceEventUnion[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServicesEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName'
    name: 'getServiceTypeInfoByName(string, string, string, Models.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает сведения о типе определенной службы, поддерживаемых подготовленным типом приложения в кластере Service Fabric. Указанный тип приложения должен существовать.
      В противном случае возвращается состояние 404. Номер ответа 204 возвращается в том случае, если указанный тип службы не найден в кластере.
    syntax:
      content: 'function getServiceTypeInfoByName(applicationTypeName: string, applicationTypeVersion: string, serviceTypeName: string, options?: Models.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: applicationTypeVersion
          type:
            - string
          description: Версия типа приложения.
        - id: serviceTypeName
          type:
            - string
          description: Задает имя для типа службы Service Fabric.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceTypeInfoByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName_1'
    name: 'getServiceTypeInfoByName(string, string, string, ServiceCallback<ServiceTypeInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceTypeInfoByName(applicationTypeName: string, applicationTypeVersion: string, serviceTypeName: string, callback: ServiceCallback<ServiceTypeInfo>)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: applicationTypeVersion
          type:
            - string
          description: Версия типа приложения.
        - id: serviceTypeName
          type:
            - string
          description: Задает имя для типа службы Service Fabric.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceTypeInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceTypeInfoByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName_2'
    name: 'getServiceTypeInfoByName(string, string, string, ServiceFabricClientGetServiceTypeInfoByNameOptionalParams, ServiceCallback<ServiceTypeInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceTypeInfoByName(applicationTypeName: string, applicationTypeVersion: string, serviceTypeName: string, options: ServiceFabricClientGetServiceTypeInfoByNameOptionalParams, callback: ServiceCallback<ServiceTypeInfo>)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: applicationTypeVersion
          type:
            - string
          description: Версия типа приложения.
        - id: serviceTypeName
          type:
            - string
          description: Задает имя для типа службы Service Fabric.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceTypeInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceTypeInfoByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList'
    name: 'getServiceTypeInfoList(string, string, Models.ServiceFabricClientGetServiceTypeInfoListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает список, содержащий сведения о типах служб, поддерживаемых подготовленным типом приложения в кластере Service Fabric. Указанный тип приложения должен существовать.
      В противном случае возвращается состояние 404.
    syntax:
      content: 'function getServiceTypeInfoList(applicationTypeName: string, applicationTypeVersion: string, options?: Models.ServiceFabricClientGetServiceTypeInfoListOptionalParams)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: applicationTypeVersion
          type:
            - string
          description: Версия типа приложения.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceTypeInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceTypeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList_1'
    name: 'getServiceTypeInfoList(string, string, ServiceCallback<ServiceTypeInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceTypeInfoList(applicationTypeName: string, applicationTypeVersion: string, callback: ServiceCallback<ServiceTypeInfo[]>)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: applicationTypeVersion
          type:
            - string
          description: Версия типа приложения.
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.ServiceTypeInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceTypeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList_2'
    name: 'getServiceTypeInfoList(string, string, ServiceFabricClientGetServiceTypeInfoListOptionalParams, ServiceCallback<ServiceTypeInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getServiceTypeInfoList(applicationTypeName: string, applicationTypeVersion: string, options: ServiceFabricClientGetServiceTypeInfoListOptionalParams, callback: ServiceCallback<ServiceTypeInfo[]>)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: applicationTypeVersion
          type:
            - string
          description: Версия типа приложения.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetServiceTypeInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.ServiceTypeInfo[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetServiceTypeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList'
    name: 'getSubNameInfoList(string, Models.ServiceFabricClientGetSubNameInfoListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Перечисляет все имена Service Fabric в списке с заданным именем. Если subnames не помещаются на странице, а также маркер продолжения, который может использоваться для получения следующей страницы возвращается одна страница результатов. Имя, которое не существует запрос завершится ошибкой.'
    syntax:
      content: 'function getSubNameInfoList(nameId: string, options?: Models.ServiceFabricClientGetSubNameInfoListOptionalParams)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: options
          type:
            - Models.ServiceFabricClientGetSubNameInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetSubNameInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList_1'
    name: 'getSubNameInfoList(string, ServiceCallback<PagedSubNameInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getSubNameInfoList(nameId: string, callback: ServiceCallback<PagedSubNameInfoList>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedSubNameInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetSubNameInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList_2'
    name: 'getSubNameInfoList(string, ServiceFabricClientGetSubNameInfoListOptionalParams, ServiceCallback<PagedSubNameInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getSubNameInfoList(nameId: string, options: ServiceFabricClientGetSubNameInfoListOptionalParams, callback: ServiceCallback<PagedSubNameInfoList>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetSubNameInfoListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedSubNameInfoList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetSubNameInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation'
    name: 'getUnplacedReplicaInformation(string, Models.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает сведения о неразмещенных репликах службы.
      Если указан PartitionId, результат будет содержать сведения только о неразмещенных репликах для этой секции.
      Если PartitionId не указано, результат будет содержать сведения о неразмещенных репликах для всех секций этой службы.
      Если OnlyQueryPrimaries имеет значение true, то результат будет содержать данные только о первичных реплик и будут игнорировать Неразмещенный вторичных реплик.
    syntax:
      content: 'function getUnplacedReplicaInformation(serviceId: string, options?: Models.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetUnplacedReplicaInformationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation_1'
    name: 'getUnplacedReplicaInformation(string, ServiceCallback<UnplacedReplicaInformation>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getUnplacedReplicaInformation(serviceId: string, callback: ServiceCallback<UnplacedReplicaInformation>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UnplacedReplicaInformation>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetUnplacedReplicaInformationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation_2'
    name: 'getUnplacedReplicaInformation(string, ServiceFabricClientGetUnplacedReplicaInformationOptionalParams, ServiceCallback<UnplacedReplicaInformation>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getUnplacedReplicaInformation(serviceId: string, options: ServiceFabricClientGetUnplacedReplicaInformationOptionalParams, callback: ServiceCallback<UnplacedReplicaInformation>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UnplacedReplicaInformation>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetUnplacedReplicaInformationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState'
    name: getUpgradeOrchestrationServiceState(Models.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Получите состояние службы из службы обновления Оркестрации Service Fabric. Этот API используется внутренним образом для предоставления поддержки.
    syntax:
      content: 'function getUpgradeOrchestrationServiceState(options?: Models.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetUpgradeOrchestrationServiceStateResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState_1'
    name: getUpgradeOrchestrationServiceState(ServiceCallback<UpgradeOrchestrationServiceState>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getUpgradeOrchestrationServiceState(callback: ServiceCallback<UpgradeOrchestrationServiceState>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UpgradeOrchestrationServiceState>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetUpgradeOrchestrationServiceStateResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState_2'
    name: 'getUpgradeOrchestrationServiceState(ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams, ServiceCallback<UpgradeOrchestrationServiceState>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getUpgradeOrchestrationServiceState(options: ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams, callback: ServiceCallback<UpgradeOrchestrationServiceState>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UpgradeOrchestrationServiceState>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.GetUpgradeOrchestrationServiceStateResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeContainerApi'
    name: 'invokeContainerApi(string, string, string, string, string, ContainerApiRequestBody, Models.ServiceFabricClientInvokeContainerApiOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Вызывает API контейнера, развернутого на узле Service Fabric для указанного пакета кода.'
    syntax:
      content: 'function invokeContainerApi(nodeName: string, applicationId: string, serviceManifestName: string, codePackageName: string, codePackageInstanceId: string, containerApiRequestBody: ContainerApiRequestBody, options?: Models.ServiceFabricClientInvokeContainerApiOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceManifestName
          type:
            - string
          description: 'Имя манифеста службы, зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: codePackageName
          type:
            - string
          description: 'Имя пакета кода, указанное в манифесте службы и зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: codePackageInstanceId
          type:
            - string
          description: 'Уникальный идентификатор экземпляра пакета кода, развернутого на узле Service Fabric.'
        - id: containerApiRequestBody
          type:
            - '@azure/servicefabric.ContainerApiRequestBody'
          description: Параметры для выполнения вызова контейнера API
        - id: options
          type:
            - Models.ServiceFabricClientInvokeContainerApiOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.InvokeContainerApiResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeContainerApi_1'
    name: 'invokeContainerApi(string, string, string, string, string, ContainerApiRequestBody, ServiceCallback<ContainerApiResponse>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function invokeContainerApi(nodeName: string, applicationId: string, serviceManifestName: string, codePackageName: string, codePackageInstanceId: string, containerApiRequestBody: ContainerApiRequestBody, callback: ServiceCallback<ContainerApiResponse>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceManifestName
          type:
            - string
          description: 'Имя манифеста службы, зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: codePackageName
          type:
            - string
          description: 'Имя пакета кода, указанное в манифесте службы и зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: codePackageInstanceId
          type:
            - string
          description: 'Уникальный идентификатор экземпляра пакета кода, развернутого на узле Service Fabric.'
        - id: containerApiRequestBody
          type:
            - '@azure/servicefabric.ContainerApiRequestBody'
          description: Параметры для выполнения вызова контейнера API
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ContainerApiResponse>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.InvokeContainerApiResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeContainerApi_2'
    name: 'invokeContainerApi(string, string, string, string, string, ContainerApiRequestBody, ServiceFabricClientInvokeContainerApiOptionalParams, ServiceCallback<ContainerApiResponse>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function invokeContainerApi(nodeName: string, applicationId: string, serviceManifestName: string, codePackageName: string, codePackageInstanceId: string, containerApiRequestBody: ContainerApiRequestBody, options: ServiceFabricClientInvokeContainerApiOptionalParams, callback: ServiceCallback<ContainerApiResponse>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: serviceManifestName
          type:
            - string
          description: 'Имя манифеста службы, зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: codePackageName
          type:
            - string
          description: 'Имя пакета кода, указанное в манифесте службы и зарегистрированное для типа приложения в кластере Service Fabric.'
        - id: codePackageInstanceId
          type:
            - string
          description: 'Уникальный идентификатор экземпляра пакета кода, развернутого на узле Service Fabric.'
        - id: containerApiRequestBody
          type:
            - '@azure/servicefabric.ContainerApiRequestBody'
          description: Параметры для выполнения вызова контейнера API
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientInvokeContainerApiOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ContainerApiResponse>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.InvokeContainerApiResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand'
    name: 'invokeInfrastructureCommand(string, Models.ServiceFabricClientInvokeInfrastructureCommandOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Для кластеров с одним или несколькими экземплярами службы инфраструктуры этот API позволяет отправлять команды инфраструктуры конкретному экземпляру службы инфраструктуры.
      Доступные команды и соответствующий формат ответа различаются в зависимости от инфраструктуры, в которой выполняется кластер.

      Этот API поддерживает платформу Service Fabric. Он не предназначен для использования непосредственно в коде.
    syntax:
      content: 'function invokeInfrastructureCommand(command: string, options?: Models.ServiceFabricClientInvokeInfrastructureCommandOptionalParams)'
      parameters:
        - id: command
          type:
            - string
          description: Текст команды для вызова. Содержимое команды зависит от инфраструктуры.
        - id: options
          type:
            - Models.ServiceFabricClientInvokeInfrastructureCommandOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.InvokeInfrastructureCommandResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand_1'
    name: 'invokeInfrastructureCommand(string, ServiceCallback<string>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function invokeInfrastructureCommand(command: string, callback: ServiceCallback<string>)'
      parameters:
        - id: command
          type:
            - string
          description: Текст команды для вызова. Содержимое команды зависит от инфраструктуры.
        - id: callback
          type:
            - ServiceCallback<string>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.InvokeInfrastructureCommandResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand_2'
    name: 'invokeInfrastructureCommand(string, ServiceFabricClientInvokeInfrastructureCommandOptionalParams, ServiceCallback<string>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function invokeInfrastructureCommand(command: string, options: ServiceFabricClientInvokeInfrastructureCommandOptionalParams, callback: ServiceCallback<string>)'
      parameters:
        - id: command
          type:
            - string
          description: Текст команды для вызова. Содержимое команды зависит от инфраструктуры.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientInvokeInfrastructureCommandOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<string>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.InvokeInfrastructureCommandResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery'
    name: 'invokeInfrastructureQuery(string, Models.ServiceFabricClientInvokeInfrastructureQueryOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Для кластеров с одним или несколькими экземплярами службы инфраструктуры этот API позволяет отправлять запросы к инфраструктуре конкретному экземпляру службы инфраструктуры.
      Доступные команды и соответствующий формат ответа различаются в зависимости от инфраструктуры, в которой выполняется кластер.

      Этот API поддерживает платформу Service Fabric. Он не предназначен для использования непосредственно в коде.
    syntax:
      content: 'function invokeInfrastructureQuery(command: string, options?: Models.ServiceFabricClientInvokeInfrastructureQueryOptionalParams)'
      parameters:
        - id: command
          type:
            - string
          description: Текст команды для вызова. Содержимое команды зависит от инфраструктуры.
        - id: options
          type:
            - Models.ServiceFabricClientInvokeInfrastructureQueryOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.InvokeInfrastructureQueryResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery_1'
    name: 'invokeInfrastructureQuery(string, ServiceCallback<string>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function invokeInfrastructureQuery(command: string, callback: ServiceCallback<string>)'
      parameters:
        - id: command
          type:
            - string
          description: Текст команды для вызова. Содержимое команды зависит от инфраструктуры.
        - id: callback
          type:
            - ServiceCallback<string>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.InvokeInfrastructureQueryResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery_2'
    name: 'invokeInfrastructureQuery(string, ServiceFabricClientInvokeInfrastructureQueryOptionalParams, ServiceCallback<string>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function invokeInfrastructureQuery(command: string, options: ServiceFabricClientInvokeInfrastructureQueryOptionalParams, callback: ServiceCallback<string>)'
      parameters:
        - id: command
          type:
            - string
          description: Текст команды для вызова. Содержимое команды зависит от инфраструктуры.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientInvokeInfrastructureQueryOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<string>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.InvokeInfrastructureQueryResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshApplication'
    name: meshApplication
    fullName: meshApplication
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshApplication: MeshApplication'
      return:
        type:
          - '@azure/servicefabric.MeshApplication'
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshCodePackage'
    name: meshCodePackage
    fullName: meshCodePackage
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshCodePackage: MeshCodePackage'
      return:
        type:
          - '@azure/servicefabric.MeshCodePackage'
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshGateway'
    name: meshGateway
    fullName: meshGateway
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshGateway: MeshGateway'
      return:
        type:
          - '@azure/servicefabric.MeshGateway'
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshNetwork'
    name: meshNetwork
    fullName: meshNetwork
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshNetwork: MeshNetwork'
      return:
        type:
          - '@azure/servicefabric.MeshNetwork'
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshSecret'
    name: meshSecret
    fullName: meshSecret
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshSecret: MeshSecret'
      return:
        type:
          - '@azure/servicefabric.MeshSecret'
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshSecretValue'
    name: meshSecretValue
    fullName: meshSecretValue
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshSecretValue: MeshSecretValue'
      return:
        type:
          - '@azure/servicefabric.MeshSecretValue'
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshService'
    name: meshService
    fullName: meshService
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshService: MeshService'
      return:
        type:
          - '@azure/servicefabric.MeshService'
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshServiceReplica'
    name: meshServiceReplica
    fullName: meshServiceReplica
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshServiceReplica: MeshServiceReplica'
      return:
        type:
          - '@azure/servicefabric.MeshServiceReplica'
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshVolume'
    name: meshVolume
    fullName: meshVolume
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshVolume: MeshVolume'
      return:
        type:
          - '@azure/servicefabric.MeshVolume'
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica'
    name: 'movePrimaryReplica(string, Models.ServiceFabricClientMovePrimaryReplicaOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Эта команда перемещает первичной реплике секции службы с отслеживанием состояния, соблюдение всех ограничений.
      Если параметр NodeName указан, основной перемещаются на указанный узел (если это разрешено ограничений).
      Если NodeName параметр не указан, первичная реплика будут переведены на произвольный узел в кластере.
      Если задан параметр IgnoreConstraints и присвоено значение true, то первичный перемещается независимо от ограничения.
    syntax:
      content: 'function movePrimaryReplica(partitionId: string, options?: Models.ServiceFabricClientMovePrimaryReplicaOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientMovePrimaryReplicaOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica_1'
    name: 'movePrimaryReplica(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function movePrimaryReplica(partitionId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica_2'
    name: 'movePrimaryReplica(string, ServiceFabricClientMovePrimaryReplicaOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function movePrimaryReplica(partitionId: string, options: ServiceFabricClientMovePrimaryReplicaOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientMovePrimaryReplicaOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica'
    name: 'moveSecondaryReplica(string, string, Models.ServiceFabricClientMoveSecondaryReplicaOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Эта команда перемещает вторичной реплике секции службы с отслеживанием состояния, соблюдение всех ограничений.
      Необходимо указать параметр CurrentNodeName для определения реплики, которая перемещается.
      Должно быть указано имя узла источника, но новое имя узла можно опустить, и в этом случае реплики перемещается на произвольный узел.
      Если задан и присвоено значение true, то дополнительный параметр IgnoreConstraints перемещаются независимо от ограничения.
    syntax:
      content: 'function moveSecondaryReplica(partitionId: string, currentNodeName: string, options?: Models.ServiceFabricClientMoveSecondaryReplicaOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: currentNodeName
          type:
            - string
          description: Имя узла источника для вторичной реплики перемещения.
        - id: options
          type:
            - Models.ServiceFabricClientMoveSecondaryReplicaOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica_1'
    name: 'moveSecondaryReplica(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function moveSecondaryReplica(partitionId: string, currentNodeName: string, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: currentNodeName
          type:
            - string
          description: Имя узла источника для вторичной реплики перемещения.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica_2'
    name: 'moveSecondaryReplica(string, string, ServiceFabricClientMoveSecondaryReplicaOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function moveSecondaryReplica(partitionId: string, currentNodeName: string, options: ServiceFabricClientMoveSecondaryReplicaOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: currentNodeName
          type:
            - string
          description: Имя узла источника для вторичной реплики перемещения.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientMoveSecondaryReplicaOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.postChaosSchedule'
    name: 'postChaosSchedule(ChaosScheduleDescription, Models.ServiceFabricClientPostChaosScheduleOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Chaos будет автоматически планировать запуски, основанные на расписании Chaos.
      Chaos расписание будет обновляться, если предоставленная версия совпадает с версией на сервере.
      При обновлении расписания хаос, версии на сервере будет увеличено на 1.
      Версия на сервере будут перенесены в значение 0 после достижения большим числом.
      Если Chaos выполняется, когда этот вызов сделан, вызов завершится ошибкой.
    syntax:
      content: 'function postChaosSchedule(chaosSchedule: ChaosScheduleDescription, options?: Models.ServiceFabricClientPostChaosScheduleOptionalParams)'
      parameters:
        - id: chaosSchedule
          type:
            - '@azure/servicefabric.ChaosScheduleDescription'
          description: 'Описание расписания, которое используется, Chaos.'
        - id: options
          type:
            - Models.ServiceFabricClientPostChaosScheduleOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.postChaosSchedule_1'
    name: 'postChaosSchedule(ChaosScheduleDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function postChaosSchedule(chaosSchedule: ChaosScheduleDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: chaosSchedule
          type:
            - '@azure/servicefabric.ChaosScheduleDescription'
          description: 'Описание расписания, которое используется, Chaos.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.postChaosSchedule_2'
    name: 'postChaosSchedule(ChaosScheduleDescription, ServiceFabricClientPostChaosScheduleOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function postChaosSchedule(chaosSchedule: ChaosScheduleDescription, options: ServiceFabricClientPostChaosScheduleOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: chaosSchedule
          type:
            - '@azure/servicefabric.ChaosScheduleDescription'
          description: 'Описание расписания, которое используется, Chaos.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientPostChaosScheduleOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.provisionApplicationType'
    name: 'provisionApplicationType(Models.ProvisionApplicationTypeDescriptionBaseUnion, Models.ServiceFabricClientProvisionApplicationTypeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Подготавливает тип приложения Service Fabric в кластере. Подготовка является обязательным, прежде чем могут создаваться новые приложения.
      Операция подготовки может выполняться либо на пакета приложения, указанного параметром relativePathInImageStore, или с помощью URI внешних «.sfpkg».
    syntax:
      content: 'function provisionApplicationType(provisionApplicationTypeDescriptionBaseRequiredBodyParam: Models.ProvisionApplicationTypeDescriptionBaseUnion, options?: Models.ServiceFabricClientProvisionApplicationTypeOptionalParams)'
      parameters:
        - id: provisionApplicationTypeDescriptionBaseRequiredBodyParam
          type:
            - Models.ProvisionApplicationTypeDescriptionBaseUnion
          description: 'Базовый тип описания типа приложения подготовки, который поддерживает хранилище на основе подготовки образа или внешняя Подготовка на основе хранилища.'
        - id: options
          type:
            - Models.ServiceFabricClientProvisionApplicationTypeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.provisionApplicationType_1'
    name: 'provisionApplicationType(Models.ProvisionApplicationTypeDescriptionBaseUnion, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function provisionApplicationType(provisionApplicationTypeDescriptionBaseRequiredBodyParam: Models.ProvisionApplicationTypeDescriptionBaseUnion, callback: ServiceCallback<void>)'
      parameters:
        - id: provisionApplicationTypeDescriptionBaseRequiredBodyParam
          type:
            - Models.ProvisionApplicationTypeDescriptionBaseUnion
          description: 'Базовый тип описания типа приложения подготовки, который поддерживает хранилище на основе подготовки образа или внешняя Подготовка на основе хранилища.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.provisionApplicationType_2'
    name: 'provisionApplicationType(Models.ProvisionApplicationTypeDescriptionBaseUnion, ServiceFabricClientProvisionApplicationTypeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function provisionApplicationType(provisionApplicationTypeDescriptionBaseRequiredBodyParam: Models.ProvisionApplicationTypeDescriptionBaseUnion, options: ServiceFabricClientProvisionApplicationTypeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: provisionApplicationTypeDescriptionBaseRequiredBodyParam
          type:
            - Models.ProvisionApplicationTypeDescriptionBaseUnion
          description: 'Базовый тип описания типа приложения подготовки, который поддерживает хранилище на основе подготовки образа или внешняя Подготовка на основе хранилища.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientProvisionApplicationTypeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.provisionCluster'
    name: 'provisionCluster(ProvisionFabricDescription, Models.ServiceFabricClientProvisionClusterOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Проверяет и подготавливает пакеты кода или конфигурации кластера Service Fabric.
    syntax:
      content: 'function provisionCluster(provisionFabricDescription: ProvisionFabricDescription, options?: Models.ServiceFabricClientProvisionClusterOptionalParams)'
      parameters:
        - id: provisionFabricDescription
          type:
            - '@azure/servicefabric.ProvisionFabricDescription'
          description: Описывает параметры для подготовки кластера.
        - id: options
          type:
            - Models.ServiceFabricClientProvisionClusterOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.provisionCluster_1'
    name: 'provisionCluster(ProvisionFabricDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function provisionCluster(provisionFabricDescription: ProvisionFabricDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: provisionFabricDescription
          type:
            - '@azure/servicefabric.ProvisionFabricDescription'
          description: Описывает параметры для подготовки кластера.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.provisionCluster_2'
    name: 'provisionCluster(ProvisionFabricDescription, ServiceFabricClientProvisionClusterOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function provisionCluster(provisionFabricDescription: ProvisionFabricDescription, options: ServiceFabricClientProvisionClusterOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: provisionFabricDescription
          type:
            - '@azure/servicefabric.ProvisionFabricDescription'
          description: Описывает параметры для подготовки кластера.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientProvisionClusterOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.putProperty'
    name: 'putProperty(string, PropertyDescription, Models.ServiceFabricClientPutPropertyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Создает или обновляет указанное свойство Service Fabric с указанным именем.
    syntax:
      content: 'function putProperty(nameId: string, propertyDescription: PropertyDescription, options?: Models.ServiceFabricClientPutPropertyOptionalParams)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: propertyDescription
          type:
            - '@azure/servicefabric.PropertyDescription'
          description: Описание свойства Service Fabric должен быть создан.
        - id: options
          type:
            - Models.ServiceFabricClientPutPropertyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.putProperty_1'
    name: 'putProperty(string, PropertyDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function putProperty(nameId: string, propertyDescription: PropertyDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: propertyDescription
          type:
            - '@azure/servicefabric.PropertyDescription'
          description: Описание свойства Service Fabric должен быть создан.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.putProperty_2'
    name: 'putProperty(string, PropertyDescription, ServiceFabricClientPutPropertyOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function putProperty(nameId: string, propertyDescription: PropertyDescription, options: ServiceFabricClientPutPropertyOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: propertyDescription
          type:
            - '@azure/servicefabric.PropertyDescription'
          description: Описание свойства Service Fabric должен быть создан.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientPutPropertyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions'
    name: recoverAllPartitions(Models.ServiceFabricClientRecoverAllPartitionsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Эту операцию следует выполнять только в том случае, если известно, что неработающие реплики невозможно восстановить. Неправильное использование этого API может привести к потере данных.'
    syntax:
      content: 'function recoverAllPartitions(options?: Models.ServiceFabricClientRecoverAllPartitionsOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientRecoverAllPartitionsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions_1'
    name: recoverAllPartitions(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function recoverAllPartitions(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions_2'
    name: 'recoverAllPartitions(ServiceFabricClientRecoverAllPartitionsOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function recoverAllPartitions(options: ServiceFabricClientRecoverAllPartitionsOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientRecoverAllPartitionsOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverPartition'
    name: 'recoverPartition(string, Models.ServiceFabricClientRecoverPartitionOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Эту операцию следует выполнять только в том случае, если известно, что неработающие реплики невозможно восстановить. Неправильное использование этого API может привести к потере данных.'
    syntax:
      content: 'function recoverPartition(partitionId: string, options?: Models.ServiceFabricClientRecoverPartitionOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientRecoverPartitionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverPartition_1'
    name: 'recoverPartition(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function recoverPartition(partitionId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverPartition_2'
    name: 'recoverPartition(string, ServiceFabricClientRecoverPartitionOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function recoverPartition(partitionId: string, options: ServiceFabricClientRecoverPartitionOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientRecoverPartitionOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions'
    name: 'recoverServicePartitions(string, Models.ServiceFabricClientRecoverServicePartitionsOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Указывает кластеру Service Fabric, что следует попытаться восстановить указанную службу, которая находится в состоянии потери кворума. Эту операцию следует выполнять только в том случае, если известно, что неработающие реплики невозможно восстановить. Неправильное использование этого API может привести к потере данных.'
    syntax:
      content: 'function recoverServicePartitions(serviceId: string, options?: Models.ServiceFabricClientRecoverServicePartitionsOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientRecoverServicePartitionsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions_1'
    name: 'recoverServicePartitions(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function recoverServicePartitions(serviceId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions_2'
    name: 'recoverServicePartitions(string, ServiceFabricClientRecoverServicePartitionsOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function recoverServicePartitions(serviceId: string, options: ServiceFabricClientRecoverServicePartitionsOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientRecoverServicePartitionsOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions'
    name: recoverSystemPartitions(Models.ServiceFabricClientRecoverSystemPartitionsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Указывает кластеру Service Fabric, что следует попытаться восстановить системные службы, которые в настоящее время находятся в состоянии потери кворума. Эту операцию следует выполнять только в том случае, если известно, что неработающие реплики невозможно восстановить. Неправильное использование этого API может привести к потере данных.'
    syntax:
      content: 'function recoverSystemPartitions(options?: Models.ServiceFabricClientRecoverSystemPartitionsOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientRecoverSystemPartitionsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions_1'
    name: recoverSystemPartitions(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function recoverSystemPartitions(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions_2'
    name: 'recoverSystemPartitions(ServiceFabricClientRecoverSystemPartitionsOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function recoverSystemPartitions(options: ServiceFabricClientRecoverSystemPartitionsOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientRecoverSystemPartitionsOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment'
    name: 'removeComposeDeployment(string, Models.ServiceFabricClientRemoveComposeDeploymentOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Удаляет существующее развертывание Compose в Service Fabric.
    syntax:
      content: 'function removeComposeDeployment(deploymentName: string, options?: Models.ServiceFabricClientRemoveComposeDeploymentOptionalParams)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: options
          type:
            - Models.ServiceFabricClientRemoveComposeDeploymentOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment_1'
    name: 'removeComposeDeployment(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeComposeDeployment(deploymentName: string, callback: ServiceCallback<void>)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment_2'
    name: 'removeComposeDeployment(string, ServiceFabricClientRemoveComposeDeploymentOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeComposeDeployment(deploymentName: string, options: ServiceFabricClientRemoveComposeDeploymentOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientRemoveComposeDeploymentOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeNodeState'
    name: 'removeNodeState(string, Models.ServiceFabricClientRemoveNodeStateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Это означает, что восстановить сохраненное состояние этого узла невозможно. Обычно это происходит, если жесткий диск был очищен или если жесткий диск аварийно завершает работу. Для успешного выполнения этой операции узел должен быть недоступен. Эта операция сообщает Service Fabric, что реплики на этом узле больше не существуют и что Service Fabric должна прекратить ожидание этих реплик. Не запускайте этот командлет, если состояние на узле не удалено, и узел может вернуться с сохраненному состоянию. Начиная с Service Fabric 6.5, чтобы использовать этот API для начальных узлов, измените параметр начальных узлов регулярных узлы (не начальное значение), а затем вызовите этот API для удаления состояния узла. Если кластер работает в Azure, после начальный узел выйдет из строя, Service Fabric будет пытаться автоматически изменить его на узел без начального значения. Чтобы это произошло, убедитесь, что количество узлов не начальное значение в тип первичного узла является не меньше числа вниз начальных узлов. При необходимости добавьте дополнительные узлы для типа первичного узла, чтобы добиться этого. Для автономного кластера если начальный узел вниз не должен возвращаться к работе с ее состоянием без изменений, выполните удалить узел из кластера, см. в разделе https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes'
    syntax:
      content: 'function removeNodeState(nodeName: string, options?: Models.ServiceFabricClientRemoveNodeStateOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: options
          type:
            - Models.ServiceFabricClientRemoveNodeStateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeNodeState_1'
    name: 'removeNodeState(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeNodeState(nodeName: string, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeNodeState_2'
    name: 'removeNodeState(string, ServiceFabricClientRemoveNodeStateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeNodeState(nodeName: string, options: ServiceFabricClientRemoveNodeStateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientRemoveNodeStateOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeReplica'
    name: 'removeReplica(string, string, string, Models.ServiceFabricClientRemoveReplicaOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Этот API имитирует сбой реплики Service Fabric, удаляя реплику из кластера Service Fabric. При этом данная реплика закрывается и ей назначается роль "None", а затем из кластера удаляются все сведения о состоянии реплики. Этот API проверяет путь для удаления состояния реплики и имитирует сообщение о сбое постоянного пути через клиентские API. Предупреждение. При использовании этого API отсутствуют какие-либо проверки безопасности. Неправильное использование этого API может привести к потере данных для служб с отслеживанием состояния. Кроме того, флаг forceRemove влияет на все остальные реплики, размещенные в том же процессе.'
    syntax:
      content: 'function removeReplica(nodeName: string, partitionId: string, replicaId: string, options?: Models.ServiceFabricClientRemoveReplicaOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: options
          type:
            - Models.ServiceFabricClientRemoveReplicaOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeReplica_1'
    name: 'removeReplica(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeReplica(nodeName: string, partitionId: string, replicaId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeReplica_2'
    name: 'removeReplica(string, string, string, ServiceFabricClientRemoveReplicaOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeReplica(nodeName: string, partitionId: string, replicaId: string, options: ServiceFabricClientRemoveReplicaOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientRemoveReplicaOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth'
    name: 'reportApplicationHealth(string, HealthInformation, Models.ServiceFabricClientReportApplicationHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает состояние работоспособности для указанного приложения Service Fabric. Отчет должен содержать информацию об источнике отчета о работоспособности и свойство, в котором об этом сообщается.
      Отчет отправляется в приложение шлюза Service Fabric, которое передает его в хранилище данных о работоспособности.
      Отчет может быть принят шлюзом, но затем отклонен хранилищем данных о работоспособности после дополнительной проверки.
      Например, хранилище данных о работоспособности может отклонить отчет из-за недопустимого параметра, например устаревшего порядкового номера.
      Чтобы увидеть, применены ли отчет в хранилище данных о работоспособности, получить состояние работоспособности приложения и убедитесь, что отчет отображается в разделе HealthEvents.
    syntax:
      content: 'function reportApplicationHealth(applicationId: string, healthInformation: HealthInformation, options?: Models.ServiceFabricClientReportApplicationHealthOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - Models.ServiceFabricClientReportApplicationHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth_1'
    name: 'reportApplicationHealth(string, HealthInformation, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportApplicationHealth(applicationId: string, healthInformation: HealthInformation, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth_2'
    name: 'reportApplicationHealth(string, HealthInformation, ServiceFabricClientReportApplicationHealthOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportApplicationHealth(applicationId: string, healthInformation: HealthInformation, options: ServiceFabricClientReportApplicationHealthOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientReportApplicationHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportClusterHealth'
    name: 'reportClusterHealth(HealthInformation, Models.ServiceFabricClientReportClusterHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Отправляет отчет о работоспособности в кластере Service Fabric. Отчет должен содержать информацию об источнике отчета о работоспособности и свойстве, в котором об этом сообщается.
      Отчет отправляется на узел шлюза Service Fabric, который передает его в хранилище данных о работоспособности.
      Отчет может быть принят шлюзом, но затем отклонен хранилищем данных о работоспособности после дополнительной проверки.
      Например, хранилище данных о работоспособности может отклонить отчет из-за недопустимого параметра, например устаревшего порядкового номера.
      Чтобы увидеть, применены ли отчет в хранилище данных о работоспособности, запустите GetClusterHealth и убедитесь, что отчет отображается в разделе HealthEvents.
    syntax:
      content: 'function reportClusterHealth(healthInformation: HealthInformation, options?: Models.ServiceFabricClientReportClusterHealthOptionalParams)'
      parameters:
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - Models.ServiceFabricClientReportClusterHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportClusterHealth_1'
    name: 'reportClusterHealth(HealthInformation, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportClusterHealth(healthInformation: HealthInformation, callback: ServiceCallback<void>)'
      parameters:
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportClusterHealth_2'
    name: 'reportClusterHealth(HealthInformation, ServiceFabricClientReportClusterHealthOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportClusterHealth(healthInformation: HealthInformation, options: ServiceFabricClientReportClusterHealthOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientReportClusterHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth'
    name: 'reportDeployedApplicationHealth(string, string, HealthInformation, Models.ServiceFabricClientReportDeployedApplicationHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Сообщает о состоянии работоспособности приложения, развернутого на узле Service Fabric. Отчет должен содержать информацию об источнике отчета о работоспособности и свойстве, в котором об этом сообщается.
      Отчет отправляется в службу шлюза Service Fabric, которая передает его в хранилище данных о работоспособности.
      Отчет может быть принят шлюзом, но затем отклонен хранилищем данных о работоспособности после дополнительной проверки.
      Например, хранилище данных о работоспособности может отклонить отчет из-за недопустимого параметра, например устаревшего порядкового номера.
      Чтобы увидеть, применены ли отчет в хранилище данных о работоспособности, получить сведения о работоспособности развернутого приложения и убедитесь, что отчет отображается в разделе HealthEvents.
    syntax:
      content: 'function reportDeployedApplicationHealth(nodeName: string, applicationId: string, healthInformation: HealthInformation, options?: Models.ServiceFabricClientReportDeployedApplicationHealthOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - Models.ServiceFabricClientReportDeployedApplicationHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth_1'
    name: 'reportDeployedApplicationHealth(string, string, HealthInformation, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportDeployedApplicationHealth(nodeName: string, applicationId: string, healthInformation: HealthInformation, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth_2'
    name: 'reportDeployedApplicationHealth(string, string, HealthInformation, ServiceFabricClientReportDeployedApplicationHealthOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportDeployedApplicationHealth(nodeName: string, applicationId: string, healthInformation: HealthInformation, options: ServiceFabricClientReportDeployedApplicationHealthOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientReportDeployedApplicationHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth'
    name: 'reportDeployedServicePackageHealth(string, string, string, HealthInformation, Models.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Сообщает о состоянии работоспособности пакета службы приложения, развернутого на узле Service Fabric. Отчет должен содержать информацию об источнике отчета о работоспособности и свойстве, в котором об этом сообщается.
      Отчет отправляется в службу шлюза Service Fabric, которая передает его в хранилище данных о работоспособности.
      Отчет может быть принят шлюзом, но затем отклонен хранилищем данных о работоспособности после дополнительной проверки.
      Например, хранилище данных о работоспособности может отклонить отчет из-за недопустимого параметра, например устаревшего порядкового номера.
      Чтобы увидеть, применены ли отчет в хранилище данных о работоспособности, получение работоспособности развернутого пакета службы и убедитесь, что отчет отображается в разделе HealthEvents.
    syntax:
      content: 'function reportDeployedServicePackageHealth(nodeName: string, applicationId: string, servicePackageName: string, healthInformation: HealthInformation, options?: Models.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: servicePackageName
          type:
            - string
          description: Имя пакета службы.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - Models.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth_1'
    name: 'reportDeployedServicePackageHealth(string, string, string, HealthInformation, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportDeployedServicePackageHealth(nodeName: string, applicationId: string, servicePackageName: string, healthInformation: HealthInformation, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: servicePackageName
          type:
            - string
          description: Имя пакета службы.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth_2'
    name: 'reportDeployedServicePackageHealth(string, string, string, HealthInformation, ServiceFabricClientReportDeployedServicePackageHealthOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportDeployedServicePackageHealth(nodeName: string, applicationId: string, servicePackageName: string, healthInformation: HealthInformation, options: ServiceFabricClientReportDeployedServicePackageHealthOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: servicePackageName
          type:
            - string
          description: Имя пакета службы.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportNodeHealth'
    name: 'reportNodeHealth(string, HealthInformation, Models.ServiceFabricClientReportNodeHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает состояние работоспособности указанного узла Service Fabric. Отчет должен содержать информацию об источнике отчета о работоспособности и свойстве, в котором об этом сообщается.
      Отчет отправляется на узел шлюза Service Fabric, который передает его в хранилище данных о работоспособности.
      Отчет может быть принят шлюзом, но затем отклонен хранилищем данных о работоспособности после дополнительной проверки.
      Например, хранилище данных о работоспособности может отклонить отчет из-за недопустимого параметра, например устаревшего порядкового номера.
      Чтобы увидеть, применены ли отчет в хранилище данных о работоспособности, запустите GetNodeHealth и убедитесь, что отчет отображается в разделе HealthEvents.
    syntax:
      content: 'function reportNodeHealth(nodeName: string, healthInformation: HealthInformation, options?: Models.ServiceFabricClientReportNodeHealthOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - Models.ServiceFabricClientReportNodeHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportNodeHealth_1'
    name: 'reportNodeHealth(string, HealthInformation, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportNodeHealth(nodeName: string, healthInformation: HealthInformation, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportNodeHealth_2'
    name: 'reportNodeHealth(string, HealthInformation, ServiceFabricClientReportNodeHealthOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportNodeHealth(nodeName: string, healthInformation: HealthInformation, options: ServiceFabricClientReportNodeHealthOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientReportNodeHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth'
    name: 'reportPartitionHealth(string, HealthInformation, Models.ServiceFabricClientReportPartitionHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает состояние работоспособности для указанной секции Service Fabric. Отчет должен содержать информацию об источнике отчета о работоспособности и свойство, в котором об этом сообщается.
      Отчет отправляется в секцию шлюза Service Fabric, которая передает его в хранилище данных о работоспособности.
      Отчет может быть принят шлюзом, но затем отклонен хранилищем данных о работоспособности после дополнительной проверки.
      Например, хранилище данных о работоспособности может отклонить отчет из-за недопустимого параметра, например устаревшего порядкового номера.
      Чтобы увидеть, применены ли отчет в хранилище данных о работоспособности, запустите GetPartitionHealth и убедитесь, что отчет отображается в разделе HealthEvents.
    syntax:
      content: 'function reportPartitionHealth(partitionId: string, healthInformation: HealthInformation, options?: Models.ServiceFabricClientReportPartitionHealthOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - Models.ServiceFabricClientReportPartitionHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth_1'
    name: 'reportPartitionHealth(string, HealthInformation, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportPartitionHealth(partitionId: string, healthInformation: HealthInformation, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth_2'
    name: 'reportPartitionHealth(string, HealthInformation, ServiceFabricClientReportPartitionHealthOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportPartitionHealth(partitionId: string, healthInformation: HealthInformation, options: ServiceFabricClientReportPartitionHealthOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientReportPartitionHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth'
    name: 'reportReplicaHealth(string, string, Models.ReplicaHealthReportServiceKind, HealthInformation, Models.ServiceFabricClientReportReplicaHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает состояние работоспособности для указанной реплики Service Fabric. Отчет должен содержать информацию об источнике отчета о работоспособности и свойстве, в котором об этом сообщается.
      Отчет отправляется к реплике шлюза Service Fabric, которая передает его в хранилище данных о работоспособности.
      Отчет может быть принят шлюзом, но затем отклонен хранилищем данных о работоспособности после дополнительной проверки.
      Например, хранилище данных о работоспособности может отклонить отчет из-за недопустимого параметра, например устаревшего порядкового номера.
      Чтобы увидеть, применены ли отчет в хранилище данных о работоспособности, запустите GetReplicaHealth и убедитесь, что отчет отображается в разделе HealthEvents.
    syntax:
      content: 'function reportReplicaHealth(partitionId: string, replicaId: string, serviceKind: Models.ReplicaHealthReportServiceKind, healthInformation: HealthInformation, options?: Models.ServiceFabricClientReportReplicaHealthOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: serviceKind
          type:
            - Models.ReplicaHealthReportServiceKind
          description: 'Тип реплики службы (без отслеживания состояния или с отслеживанием состояния), для которого сообщаются работоспособности. Ниже приведены возможные значения. Ниже перечислены возможные значения. «Без отслеживания состояния», «С отслеживанием состояния»'
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - Models.ServiceFabricClientReportReplicaHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth_1'
    name: 'reportReplicaHealth(string, string, Models.ReplicaHealthReportServiceKind, HealthInformation, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportReplicaHealth(partitionId: string, replicaId: string, serviceKind: Models.ReplicaHealthReportServiceKind, healthInformation: HealthInformation, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: serviceKind
          type:
            - Models.ReplicaHealthReportServiceKind
          description: 'Тип реплики службы (без отслеживания состояния или с отслеживанием состояния), для которого сообщаются работоспособности. Ниже приведены возможные значения. Ниже перечислены возможные значения. «Без отслеживания состояния», «С отслеживанием состояния»'
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth_2'
    name: 'reportReplicaHealth(string, string, Models.ReplicaHealthReportServiceKind, HealthInformation, ServiceFabricClientReportReplicaHealthOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportReplicaHealth(partitionId: string, replicaId: string, serviceKind: Models.ReplicaHealthReportServiceKind, healthInformation: HealthInformation, options: ServiceFabricClientReportReplicaHealthOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: serviceKind
          type:
            - Models.ReplicaHealthReportServiceKind
          description: 'Тип реплики службы (без отслеживания состояния или с отслеживанием состояния), для которого сообщаются работоспособности. Ниже приведены возможные значения. Ниже перечислены возможные значения. «Без отслеживания состояния», «С отслеживанием состояния»'
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientReportReplicaHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportServiceHealth'
    name: 'reportServiceHealth(string, HealthInformation, Models.ServiceFabricClientReportServiceHealthOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Возвращает состояние работоспособности указанной службы Service Fabric. Отчет должен содержать сведения об источнике отчета о работоспособности и свойство, в котором об этом сообщается.
      Отчет отправляется в службу шлюза Service Fabric, которая передает его в хранилище данных о работоспособности.
      Отчет может быть принят шлюзом, но затем отклонен хранилищем данных о работоспособности после дополнительной проверки.
      Например, хранилище данных о работоспособности может отклонить отчет из-за недопустимого параметра, например устаревшего порядкового номера.
      Чтобы увидеть, применены ли отчет в хранилище данных о работоспособности, запустите GetServiceHealth и убедитесь, что отчет отображается в разделе HealthEvents.
    syntax:
      content: 'function reportServiceHealth(serviceId: string, healthInformation: HealthInformation, options?: Models.ServiceFabricClientReportServiceHealthOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - Models.ServiceFabricClientReportServiceHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportServiceHealth_1'
    name: 'reportServiceHealth(string, HealthInformation, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportServiceHealth(serviceId: string, healthInformation: HealthInformation, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportServiceHealth_2'
    name: 'reportServiceHealth(string, HealthInformation, ServiceFabricClientReportServiceHealthOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reportServiceHealth(serviceId: string, healthInformation: HealthInformation, options: ServiceFabricClientReportServiceHealthOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: Описывает сведения о работоспособности для отчета о работоспособности. Эта информация должна присутствовать во всех отчетов о работоспособности отправляется диспетчеру работоспособности.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientReportServiceHealthOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad'
    name: 'resetPartitionLoad(string, Models.ServiceFabricClientResetPartitionLoadOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Сбрасывает текущую нагрузку секции Service Fabric к загрузке по умолчанию для службы.
    syntax:
      content: 'function resetPartitionLoad(partitionId: string, options?: Models.ServiceFabricClientResetPartitionLoadOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientResetPartitionLoadOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad_1'
    name: 'resetPartitionLoad(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resetPartitionLoad(partitionId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad_2'
    name: 'resetPartitionLoad(string, ServiceFabricClientResetPartitionLoadOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resetPartitionLoad(partitionId: string, options: ServiceFabricClientResetPartitionLoadOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientResetPartitionLoadOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resolveService'
    name: 'resolveService(string, Models.ServiceFabricClientResolveServiceOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Разрешает секцию службы Service Fabric для получения конечных точек реплик службы.
    syntax:
      content: 'function resolveService(serviceId: string, options?: Models.ServiceFabricClientResolveServiceOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientResolveServiceOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ResolveServiceResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resolveService_1'
    name: 'resolveService(string, ServiceCallback<ResolvedServicePartition>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resolveService(serviceId: string, callback: ServiceCallback<ResolvedServicePartition>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ResolvedServicePartition>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.ResolveServiceResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resolveService_2'
    name: 'resolveService(string, ServiceFabricClientResolveServiceOptionalParams, ServiceCallback<ResolvedServicePartition>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resolveService(serviceId: string, options: ServiceFabricClientResolveServiceOptionalParams, callback: ServiceCallback<ResolvedServicePartition>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientResolveServiceOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ResolvedServicePartition>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.ResolveServiceResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage'
    name: 'restartDeployedCodePackage(string, string, RestartDeployedCodePackageDescription, Models.ServiceFabricClientRestartDeployedCodePackageOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Перезапуск пакета кода, развернутого на узле Service Fabric в кластере. Это приводит к прерыванию процесса пакета кода, который перезапустит все реплики пользовательской службы, размещенные в этом процессе.'
    syntax:
      content: 'function restartDeployedCodePackage(nodeName: string, applicationId: string, restartDeployedCodePackageDescription: RestartDeployedCodePackageDescription, options?: Models.ServiceFabricClientRestartDeployedCodePackageOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: restartDeployedCodePackageDescription
          type:
            - '@azure/servicefabric.RestartDeployedCodePackageDescription'
          description: Описание пакета кода развернутого на узле Service Fabric для перезапуска.
        - id: options
          type:
            - Models.ServiceFabricClientRestartDeployedCodePackageOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage_1'
    name: 'restartDeployedCodePackage(string, string, RestartDeployedCodePackageDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function restartDeployedCodePackage(nodeName: string, applicationId: string, restartDeployedCodePackageDescription: RestartDeployedCodePackageDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: restartDeployedCodePackageDescription
          type:
            - '@azure/servicefabric.RestartDeployedCodePackageDescription'
          description: Описание пакета кода развернутого на узле Service Fabric для перезапуска.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage_2'
    name: 'restartDeployedCodePackage(string, string, RestartDeployedCodePackageDescription, ServiceFabricClientRestartDeployedCodePackageOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function restartDeployedCodePackage(nodeName: string, applicationId: string, restartDeployedCodePackageDescription: RestartDeployedCodePackageDescription, options: ServiceFabricClientRestartDeployedCodePackageOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: restartDeployedCodePackageDescription
          type:
            - '@azure/servicefabric.RestartDeployedCodePackageDescription'
          description: Описание пакета кода развернутого на узле Service Fabric для перезапуска.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientRestartDeployedCodePackageOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartNode'
    name: 'restartNode(string, RestartNodeDescription, Models.ServiceFabricClientRestartNodeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Перезапускает узел кластера Service Fabric, который уже запущен.'
    syntax:
      content: 'function restartNode(nodeName: string, restartNodeDescription: RestartNodeDescription, options?: Models.ServiceFabricClientRestartNodeOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: restartNodeDescription
          type:
            - '@azure/servicefabric.RestartNodeDescription'
          description: 'Экземпляр узла, перезапуск и флаг, указывающий необходимость создания дампа процесса fabric.'
        - id: options
          type:
            - Models.ServiceFabricClientRestartNodeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartNode_1'
    name: 'restartNode(string, RestartNodeDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function restartNode(nodeName: string, restartNodeDescription: RestartNodeDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: restartNodeDescription
          type:
            - '@azure/servicefabric.RestartNodeDescription'
          description: 'Экземпляр узла, перезапуск и флаг, указывающий необходимость создания дампа процесса fabric.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartNode_2'
    name: 'restartNode(string, RestartNodeDescription, ServiceFabricClientRestartNodeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function restartNode(nodeName: string, restartNodeDescription: RestartNodeDescription, options: ServiceFabricClientRestartNodeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: restartNodeDescription
          type:
            - '@azure/servicefabric.RestartNodeDescription'
          description: 'Экземпляр узла, перезапуск и флаг, указывающий необходимость создания дампа процесса fabric.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientRestartNodeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartReplica'
    name: 'restartReplica(string, string, string, Models.ServiceFabricClientRestartReplicaOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Перезапускает реплику сохраненной службы, работающую на узле. Предупреждение. При использовании этого API отсутствуют какие-либо проверки безопасности. Неправильное использование этого API может привести к потере доступности служб с отслеживанием состояния.'
    syntax:
      content: 'function restartReplica(nodeName: string, partitionId: string, replicaId: string, options?: Models.ServiceFabricClientRestartReplicaOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: options
          type:
            - Models.ServiceFabricClientRestartReplicaOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartReplica_1'
    name: 'restartReplica(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function restartReplica(nodeName: string, partitionId: string, replicaId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartReplica_2'
    name: 'restartReplica(string, string, string, ServiceFabricClientRestartReplicaOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function restartReplica(nodeName: string, partitionId: string, replicaId: string, options: ServiceFabricClientRestartReplicaOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: replicaId
          type:
            - string
          description: Идентификатор реплики.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientRestartReplicaOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restorePartition'
    name: 'restorePartition(string, RestorePartitionDescription, Models.ServiceFabricClientRestorePartitionOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Восстановление состояния объекта с отслеживанием состояния сохраняются секции с помощью указанной точки резервного копирования. В случае, если раздел уже периодически копируемую, затем по умолчанию точки резервного копирования производится поиск в хранилище, указанном в политике архивации. Один также же, можно переопределить, указав сведения хранилища резервных копий как часть описание раздела восстановления в тексте. После запуска восстановления, ход его выполнения можно отслеживать с помощью операции GetRestoreProgress.
      В случае истечения времени ожидания операции, укажите значение времени ожидания больше восстановления в параметр запроса.
    syntax:
      content: 'function restorePartition(partitionId: string, restorePartitionDescription: RestorePartitionDescription, options?: Models.ServiceFabricClientRestorePartitionOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: restorePartitionDescription
          type:
            - '@azure/servicefabric.RestorePartitionDescription'
          description: Описывает параметры для восстановления раздела.
        - id: options
          type:
            - Models.ServiceFabricClientRestorePartitionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restorePartition_1'
    name: 'restorePartition(string, RestorePartitionDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function restorePartition(partitionId: string, restorePartitionDescription: RestorePartitionDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: restorePartitionDescription
          type:
            - '@azure/servicefabric.RestorePartitionDescription'
          description: Описывает параметры для восстановления раздела.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restorePartition_2'
    name: 'restorePartition(string, RestorePartitionDescription, ServiceFabricClientRestorePartitionOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function restorePartition(partitionId: string, restorePartitionDescription: RestorePartitionDescription, options: ServiceFabricClientRestorePartitionOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: restorePartitionDescription
          type:
            - '@azure/servicefabric.RestorePartitionDescription'
          description: Описывает параметры для восстановления раздела.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientRestorePartitionOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup'
    name: 'resumeApplicationBackup(string, Models.ServiceFabricClientResumeApplicationBackupOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Ранее приостановленного приложения Service Fabric возобновляет периодического резервного копирования согласно политике архивации, настроенные в настоящее время для того же.'
    syntax:
      content: 'function resumeApplicationBackup(applicationId: string, options?: Models.ServiceFabricClientResumeApplicationBackupOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientResumeApplicationBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup_1'
    name: 'resumeApplicationBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resumeApplicationBackup(applicationId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup_2'
    name: 'resumeApplicationBackup(string, ServiceFabricClientResumeApplicationBackupOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resumeApplicationBackup(applicationId: string, options: ServiceFabricClientResumeApplicationBackupOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientResumeApplicationBackupOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade'
    name: 'resumeApplicationUpgrade(string, ResumeApplicationUpgradeDescription, Models.ServiceFabricClientResumeApplicationUpgradeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Возобновление неотслеживаемого ручного обновления приложения Service Fabric. Service Fabric обновляет домены обновления по одному. При неотслеживаемом обновлении вручную по завершении обновления домена обновления Service Fabric ожидает вызов этого API, прежде чем переходить к следующему домену обновления.'
    syntax:
      content: 'function resumeApplicationUpgrade(applicationId: string, resumeApplicationUpgradeDescription: ResumeApplicationUpgradeDescription, options?: Models.ServiceFabricClientResumeApplicationUpgradeOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: resumeApplicationUpgradeDescription
          type:
            - '@azure/servicefabric.ResumeApplicationUpgradeDescription'
          description: Описывает параметры для возобновления обновления приложения.
        - id: options
          type:
            - Models.ServiceFabricClientResumeApplicationUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade_1'
    name: 'resumeApplicationUpgrade(string, ResumeApplicationUpgradeDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resumeApplicationUpgrade(applicationId: string, resumeApplicationUpgradeDescription: ResumeApplicationUpgradeDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: resumeApplicationUpgradeDescription
          type:
            - '@azure/servicefabric.ResumeApplicationUpgradeDescription'
          description: Описывает параметры для возобновления обновления приложения.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade_2'
    name: 'resumeApplicationUpgrade(string, ResumeApplicationUpgradeDescription, ServiceFabricClientResumeApplicationUpgradeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resumeApplicationUpgrade(applicationId: string, resumeApplicationUpgradeDescription: ResumeApplicationUpgradeDescription, options: ServiceFabricClientResumeApplicationUpgradeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: resumeApplicationUpgradeDescription
          type:
            - '@azure/servicefabric.ResumeApplicationUpgradeDescription'
          description: Описывает параметры для возобновления обновления приложения.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientResumeApplicationUpgradeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade'
    name: 'resumeClusterUpgrade(ResumeClusterUpgradeDescription, Models.ServiceFabricClientResumeClusterUpgradeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Переместите код кластера или обновление конфигурации на следующий домен обновления при необходимости.
    syntax:
      content: 'function resumeClusterUpgrade(resumeClusterUpgradeDescription: ResumeClusterUpgradeDescription, options?: Models.ServiceFabricClientResumeClusterUpgradeOptionalParams)'
      parameters:
        - id: resumeClusterUpgradeDescription
          type:
            - '@azure/servicefabric.ResumeClusterUpgradeDescription'
          description: Описывает параметры для возобновления обновления кластера.
        - id: options
          type:
            - Models.ServiceFabricClientResumeClusterUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade_1'
    name: 'resumeClusterUpgrade(ResumeClusterUpgradeDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resumeClusterUpgrade(resumeClusterUpgradeDescription: ResumeClusterUpgradeDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: resumeClusterUpgradeDescription
          type:
            - '@azure/servicefabric.ResumeClusterUpgradeDescription'
          description: Описывает параметры для возобновления обновления кластера.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade_2'
    name: 'resumeClusterUpgrade(ResumeClusterUpgradeDescription, ServiceFabricClientResumeClusterUpgradeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resumeClusterUpgrade(resumeClusterUpgradeDescription: ResumeClusterUpgradeDescription, options: ServiceFabricClientResumeClusterUpgradeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: resumeClusterUpgradeDescription
          type:
            - '@azure/servicefabric.ResumeClusterUpgradeDescription'
          description: Описывает параметры для возобновления обновления кластера.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientResumeClusterUpgradeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup'
    name: 'resumePartitionBackup(string, Models.ServiceFabricClientResumePartitionBackupOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Ранее приостановленного секции возобновляет периодического резервного копирования согласно политике архивации, настроенные в настоящее время для того же.'
    syntax:
      content: 'function resumePartitionBackup(partitionId: string, options?: Models.ServiceFabricClientResumePartitionBackupOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientResumePartitionBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup_1'
    name: 'resumePartitionBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resumePartitionBackup(partitionId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup_2'
    name: 'resumePartitionBackup(string, ServiceFabricClientResumePartitionBackupOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resumePartitionBackup(partitionId: string, options: ServiceFabricClientResumePartitionBackupOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientResumePartitionBackupOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup'
    name: 'resumeServiceBackup(string, Models.ServiceFabricClientResumeServiceBackupOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Периодическое резервное копирование выполняется согласно политике архивации, настроенные в настоящее время для того же возобновлении ранее приостановленного службы Service Fabric.'
    syntax:
      content: 'function resumeServiceBackup(serviceId: string, options?: Models.ServiceFabricClientResumeServiceBackupOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientResumeServiceBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup_1'
    name: 'resumeServiceBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resumeServiceBackup(serviceId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup_2'
    name: 'resumeServiceBackup(string, ServiceFabricClientResumeServiceBackupOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resumeServiceBackup(serviceId: string, options: ServiceFabricClientResumeServiceBackupOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientResumeServiceBackupOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade'
    name: 'rollbackApplicationUpgrade(string, Models.ServiceFabricClientRollbackApplicationUpgradeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Запускает откат текущего обновления приложения до предыдущей версии. Этот API можно использовать только для отката текущего активного обновления, при котором выполняется накат до новой версии. Если обновление приложения в текущий момент не выполняется, используйте API StartApplicationUpgrade, чтобы обновить его до нужной версии, включая откат до предыдущей версии.'
    syntax:
      content: 'function rollbackApplicationUpgrade(applicationId: string, options?: Models.ServiceFabricClientRollbackApplicationUpgradeOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientRollbackApplicationUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade_1'
    name: 'rollbackApplicationUpgrade(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function rollbackApplicationUpgrade(applicationId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade_2'
    name: 'rollbackApplicationUpgrade(string, ServiceFabricClientRollbackApplicationUpgradeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function rollbackApplicationUpgrade(applicationId: string, options: ServiceFabricClientRollbackApplicationUpgradeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientRollbackApplicationUpgradeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade'
    name: rollbackClusterUpgrade(Models.ServiceFabricClientRollbackClusterUpgradeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Откатите обновление кода или конфигурации кластера Service Fabric.
    syntax:
      content: 'function rollbackClusterUpgrade(options?: Models.ServiceFabricClientRollbackClusterUpgradeOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientRollbackClusterUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade_1'
    name: rollbackClusterUpgrade(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function rollbackClusterUpgrade(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade_2'
    name: 'rollbackClusterUpgrade(ServiceFabricClientRollbackClusterUpgradeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function rollbackClusterUpgrade(options: ServiceFabricClientRollbackClusterUpgradeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientRollbackClusterUpgradeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.sendOperationRequest'
    name: 'sendOperationRequest(OperationArguments, OperationSpec, ServiceCallback<any>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Отправьте запрос HTTP, который заполняется с помощью предоставленного OperationSpec.'
    syntax:
      content: 'function sendOperationRequest(operationArguments: OperationArguments, operationSpec: OperationSpec, callback?: ServiceCallback<any>)'
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: 'Аргументы, которые будут заполнены шаблонного значения HTTP-запроса из.'
        - id: operationSpec
          type:
            - OperationSpec
          description: 'OperationSpec, используемые для заполнения httpRequest.'
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            Обратный вызов, вызываемый после получения ответа.
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.sendRequest'
    name: sendRequest(RequestPrepareOptions | WebResource)
    children: []
    type: method
    langs:
      - typeScript
    summary: Отправьте предоставленный httpRequest.
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResource)'
      parameters:
        - id: options
          type:
            - RequestPrepareOptions | WebResource
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.constructor'
    name: ServiceFabricClient(Models.ServiceFabricClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Инициализирует новый экземпляр класса ServiceFabricClient.
    syntax:
      content: 'new ServiceFabricClient(options?: Models.ServiceFabricClientOptions)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientOptions
          description: ''
          optional: true
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState'
    name: 'setUpgradeOrchestrationServiceState(UpgradeOrchestrationServiceState, Models.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Обновите состояние службы из службы обновления Оркестрации Service Fabric. Этот API используется внутренним образом для предоставления поддержки.
    syntax:
      content: 'function setUpgradeOrchestrationServiceState(upgradeOrchestrationServiceState: UpgradeOrchestrationServiceState, options?: Models.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams)'
      parameters:
        - id: upgradeOrchestrationServiceState
          type:
            - '@azure/servicefabric.UpgradeOrchestrationServiceState'
          description: Состояние службы из службы обновления Оркестрации Service Fabric.
        - id: options
          type:
            - Models.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SetUpgradeOrchestrationServiceStateResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState_1'
    name: 'setUpgradeOrchestrationServiceState(UpgradeOrchestrationServiceState, ServiceCallback<UpgradeOrchestrationServiceStateSummary>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setUpgradeOrchestrationServiceState(upgradeOrchestrationServiceState: UpgradeOrchestrationServiceState, callback: ServiceCallback<UpgradeOrchestrationServiceStateSummary>)'
      parameters:
        - id: upgradeOrchestrationServiceState
          type:
            - '@azure/servicefabric.UpgradeOrchestrationServiceState'
          description: Состояние службы из службы обновления Оркестрации Service Fabric.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UpgradeOrchestrationServiceStateSummary>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.SetUpgradeOrchestrationServiceStateResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState_2'
    name: 'setUpgradeOrchestrationServiceState(UpgradeOrchestrationServiceState, ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams, ServiceCallback<UpgradeOrchestrationServiceStateSummary>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setUpgradeOrchestrationServiceState(upgradeOrchestrationServiceState: UpgradeOrchestrationServiceState, options: ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams, callback: ServiceCallback<UpgradeOrchestrationServiceStateSummary>)'
      parameters:
        - id: upgradeOrchestrationServiceState
          type:
            - '@azure/servicefabric.UpgradeOrchestrationServiceState'
          description: Состояние службы из службы обновления Оркестрации Service Fabric.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UpgradeOrchestrationServiceStateSummary>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.SetUpgradeOrchestrationServiceStateResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade'
    name: 'startApplicationUpgrade(string, ApplicationUpgradeDescription, Models.ServiceFabricClientStartApplicationUpgradeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Проверяет указанные параметры обновления приложения и запускает обновление приложения, если параметры являются допустимыми.'
    syntax:
      content: 'function startApplicationUpgrade(applicationId: string, applicationUpgradeDescription: ApplicationUpgradeDescription, options?: Models.ServiceFabricClientStartApplicationUpgradeOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: applicationUpgradeDescription
          type:
            - '@azure/servicefabric.ApplicationUpgradeDescription'
          description: Параметры для обновления приложения.
        - id: options
          type:
            - Models.ServiceFabricClientStartApplicationUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade_1'
    name: 'startApplicationUpgrade(string, ApplicationUpgradeDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startApplicationUpgrade(applicationId: string, applicationUpgradeDescription: ApplicationUpgradeDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: applicationUpgradeDescription
          type:
            - '@azure/servicefabric.ApplicationUpgradeDescription'
          description: Параметры для обновления приложения.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade_2'
    name: 'startApplicationUpgrade(string, ApplicationUpgradeDescription, ServiceFabricClientStartApplicationUpgradeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startApplicationUpgrade(applicationId: string, applicationUpgradeDescription: ApplicationUpgradeDescription, options: ServiceFabricClientStartApplicationUpgradeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: applicationUpgradeDescription
          type:
            - '@azure/servicefabric.ApplicationUpgradeDescription'
          description: Параметры для обновления приложения.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientStartApplicationUpgradeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startChaos'
    name: 'startChaos(ChaosParameters, Models.ServiceFabricClientStartChaosOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Если служба Chaos еще не запущена в кластере, sfctl chaos start запускает ее с переданными параметрами.
      Если во время вызова служба Chaos уже выполняется, вызов завершается ошибкой с кодом FABRIC_E_CHAOS_ALREADY_RUNNING.
      Ознакомьтесь со статьей [Induce управлением Chaos в кластерах Service Fabric](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) для получения дополнительных сведений.
    syntax:
      content: 'function startChaos(chaosParameters: ChaosParameters, options?: Models.ServiceFabricClientStartChaosOptionalParams)'
      parameters:
        - id: chaosParameters
          type:
            - '@azure/servicefabric.ChaosParameters'
          description: 'Описание всех параметров, чтобы настроить запуск Chaos.'
        - id: options
          type:
            - Models.ServiceFabricClientStartChaosOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startChaos_1'
    name: 'startChaos(ChaosParameters, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startChaos(chaosParameters: ChaosParameters, callback: ServiceCallback<void>)'
      parameters:
        - id: chaosParameters
          type:
            - '@azure/servicefabric.ChaosParameters'
          description: 'Описание всех параметров, чтобы настроить запуск Chaos.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startChaos_2'
    name: 'startChaos(ChaosParameters, ServiceFabricClientStartChaosOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startChaos(chaosParameters: ChaosParameters, options: ServiceFabricClientStartChaosOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: chaosParameters
          type:
            - '@azure/servicefabric.ChaosParameters'
          description: 'Описание всех параметров, чтобы настроить запуск Chaos.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientStartChaosOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade'
    name: 'startClusterConfigurationUpgrade(ClusterConfigurationUpgradeDescription, Models.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Проверка указанных параметров обновления поставляемой конфигурации и запуск обновления конфигурации кластера, если параметры действительны.'
    syntax:
      content: 'function startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription: ClusterConfigurationUpgradeDescription, options?: Models.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams)'
      parameters:
        - id: clusterConfigurationUpgradeDescription
          type:
            - '@azure/servicefabric.ClusterConfigurationUpgradeDescription'
          description: Параметры для обновления конфигурации автономного кластера.
        - id: options
          type:
            - Models.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade_1'
    name: 'startClusterConfigurationUpgrade(ClusterConfigurationUpgradeDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription: ClusterConfigurationUpgradeDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: clusterConfigurationUpgradeDescription
          type:
            - '@azure/servicefabric.ClusterConfigurationUpgradeDescription'
          description: Параметры для обновления конфигурации автономного кластера.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade_2'
    name: 'startClusterConfigurationUpgrade(ClusterConfigurationUpgradeDescription, ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription: ClusterConfigurationUpgradeDescription, options: ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: clusterConfigurationUpgradeDescription
          type:
            - '@azure/servicefabric.ClusterConfigurationUpgradeDescription'
          description: Параметры для обновления конфигурации автономного кластера.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade'
    name: 'startClusterUpgrade(StartClusterUpgradeDescription, Models.ServiceFabricClientStartClusterUpgradeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Проверяет указанные параметры обновления и начинает обновление версии кода или конфигурации кластера Service Fabric, если параметры являются допустимыми.'
    syntax:
      content: 'function startClusterUpgrade(startClusterUpgradeDescription: StartClusterUpgradeDescription, options?: Models.ServiceFabricClientStartClusterUpgradeOptionalParams)'
      parameters:
        - id: startClusterUpgradeDescription
          type:
            - '@azure/servicefabric.StartClusterUpgradeDescription'
          description: Описывает параметры для запуска обновления кластера.
        - id: options
          type:
            - Models.ServiceFabricClientStartClusterUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade_1'
    name: 'startClusterUpgrade(StartClusterUpgradeDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startClusterUpgrade(startClusterUpgradeDescription: StartClusterUpgradeDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: startClusterUpgradeDescription
          type:
            - '@azure/servicefabric.StartClusterUpgradeDescription'
          description: Описывает параметры для запуска обновления кластера.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade_2'
    name: 'startClusterUpgrade(StartClusterUpgradeDescription, ServiceFabricClientStartClusterUpgradeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startClusterUpgrade(startClusterUpgradeDescription: StartClusterUpgradeDescription, options: ServiceFabricClientStartClusterUpgradeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: startClusterUpgradeDescription
          type:
            - '@azure/servicefabric.StartClusterUpgradeDescription'
          description: Описывает параметры для запуска обновления кластера.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientStartClusterUpgradeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade'
    name: 'startComposeDeploymentUpgrade(string, ComposeDeploymentUpgradeDescription, Models.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Проверяет указанные параметры обновления и запускает обновление развертывания, если параметры верные.'
    syntax:
      content: 'function startComposeDeploymentUpgrade(deploymentName: string, composeDeploymentUpgradeDescription: ComposeDeploymentUpgradeDescription, options?: Models.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: composeDeploymentUpgradeDescription
          type:
            - '@azure/servicefabric.ComposeDeploymentUpgradeDescription'
          description: Параметры обновления развертывания compose.
        - id: options
          type:
            - Models.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade_1'
    name: 'startComposeDeploymentUpgrade(string, ComposeDeploymentUpgradeDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startComposeDeploymentUpgrade(deploymentName: string, composeDeploymentUpgradeDescription: ComposeDeploymentUpgradeDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: composeDeploymentUpgradeDescription
          type:
            - '@azure/servicefabric.ComposeDeploymentUpgradeDescription'
          description: Параметры обновления развертывания compose.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade_2'
    name: 'startComposeDeploymentUpgrade(string, ComposeDeploymentUpgradeDescription, ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startComposeDeploymentUpgrade(deploymentName: string, composeDeploymentUpgradeDescription: ComposeDeploymentUpgradeDescription, options: ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: composeDeploymentUpgradeDescription
          type:
            - '@azure/servicefabric.ComposeDeploymentUpgradeDescription'
          description: Параметры обновления развертывания compose.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startDataLoss'
    name: 'startDataLoss(string, string, string, Models.DataLossMode, Models.ServiceFabricClientStartDataLossOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Этот API вызовет потерю данных в указанной секции. Он активирует вызов API OnDataLoss секции.
      Потеря фактических данных будет зависеть от указанного DataLossMode.
      - PartialDataLoss. Только кворум реплик будет удален и OnDataLoss запустится для секции, но фактическая потеря данных зависит от наличия репликации на лету.
      - FullDataLoss. Все реплики удаляются, таким образом все данные будут потеряны и активируется OnDataLoss.

      Этот API следует вызывать только со службой с отслеживанием состояния в качестве целевого объекта.

      Вызов этого API с системной службой в качестве целевого объекта не рекомендуется.

      Примечание.  Вызов этого API нельзя отменить. Вызов CancelOperation только остановит выполнение и очистит внутреннее состояния системы.
      Данные не восстановятся, если команда выполнялась достаточное время, чтобы вызвать потерю данных.

      Вызовите API GetDataLossProgress с тем же OperationId, чтобы вернуть сведения об операции, запущенной с помощью этого API.
    syntax:
      content: 'function startDataLoss(serviceId: string, partitionId: string, operationId: string, dataLossMode: Models.DataLossMode, options?: Models.ServiceFabricClientStartDataLossOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: dataLossMode
          type:
            - Models.DataLossMode
          description: 'Это перечисление передается в API StartDataLoss, чтобы указать, какой тип потери данных следует вызвать. Ниже перечислены возможные значения. «Invalid», «PartialDataLoss», «FullDataLoss»'
        - id: options
          type:
            - Models.ServiceFabricClientStartDataLossOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startDataLoss_1'
    name: 'startDataLoss(string, string, string, Models.DataLossMode, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startDataLoss(serviceId: string, partitionId: string, operationId: string, dataLossMode: Models.DataLossMode, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: dataLossMode
          type:
            - Models.DataLossMode
          description: 'Это перечисление передается в API StartDataLoss, чтобы указать, какой тип потери данных следует вызвать. Ниже перечислены возможные значения. «Invalid», «PartialDataLoss», «FullDataLoss»'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startDataLoss_2'
    name: 'startDataLoss(string, string, string, Models.DataLossMode, ServiceFabricClientStartDataLossOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startDataLoss(serviceId: string, partitionId: string, operationId: string, dataLossMode: Models.DataLossMode, options: ServiceFabricClientStartDataLossOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: dataLossMode
          type:
            - Models.DataLossMode
          description: 'Это перечисление передается в API StartDataLoss, чтобы указать, какой тип потери данных следует вызвать. Ниже перечислены возможные значения. «Invalid», «PartialDataLoss», «FullDataLoss»'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientStartDataLossOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startNodeTransition'
    name: 'startNodeTransition(string, string, Models.NodeTransitionType, string, number, Models.ServiceFabricClientStartNodeTransitionOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Запускает или останавливает узел кластера.  Узел кластера — это процесс, а не экземпляр операционной системы.  Для запуска узла передайте значение "Start" в параметр NodeTransitionType.
      Для остановки узла передайте в параметр NodeTransitionType значение "Stop".  Этот API начнет операцию. Когда API вернется, возможно, узел еще не завершит переход.
      Вызовите GetNodeTransitionProgress с тем же значением OperationId, чтобы узнать ход выполнения операции.
    syntax:
      content: 'function startNodeTransition(nodeName: string, operationId: string, nodeTransitionType: Models.NodeTransitionType, nodeInstanceId: string, stopDurationInSeconds: number, options?: Models.ServiceFabricClientStartNodeTransitionOptionalParams)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: nodeTransitionType
          type:
            - Models.NodeTransitionType
          description: 'Указывает тип выполняемого перехода.  NodeTransitionType.Start запускает остановленный узел.  NodeTransitionType.Stop останавливает работающий узел. Ниже перечислены возможные значения. «Invalid», «Start», «Stop»'
        - id: nodeInstanceId
          type:
            - string
          description: Идентификатор экземпляра целевого узла.  Его можно определить с помощью API GetNodeInfo.
        - id: stopDurationInSeconds
          type:
            - number
          description: 'Длительность остановки узла в секундах.  Минимальное значение равно 600, а максимальное — 14400.  После истечения этого времени узел автоматически возобновляет работу.'
        - id: options
          type:
            - Models.ServiceFabricClientStartNodeTransitionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startNodeTransition_1'
    name: 'startNodeTransition(string, string, Models.NodeTransitionType, string, number, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startNodeTransition(nodeName: string, operationId: string, nodeTransitionType: Models.NodeTransitionType, nodeInstanceId: string, stopDurationInSeconds: number, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: nodeTransitionType
          type:
            - Models.NodeTransitionType
          description: 'Указывает тип выполняемого перехода.  NodeTransitionType.Start запускает остановленный узел.  NodeTransitionType.Stop останавливает работающий узел. Ниже перечислены возможные значения. «Invalid», «Start», «Stop»'
        - id: nodeInstanceId
          type:
            - string
          description: Идентификатор экземпляра целевого узла.  Его можно определить с помощью API GetNodeInfo.
        - id: stopDurationInSeconds
          type:
            - number
          description: 'Длительность остановки узла в секундах.  Минимальное значение равно 600, а максимальное — 14400.  После истечения этого времени узел автоматически возобновляет работу.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startNodeTransition_2'
    name: 'startNodeTransition(string, string, Models.NodeTransitionType, string, number, ServiceFabricClientStartNodeTransitionOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startNodeTransition(nodeName: string, operationId: string, nodeTransitionType: Models.NodeTransitionType, nodeInstanceId: string, stopDurationInSeconds: number, options: ServiceFabricClientStartNodeTransitionOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: Имя узла.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: nodeTransitionType
          type:
            - Models.NodeTransitionType
          description: 'Указывает тип выполняемого перехода.  NodeTransitionType.Start запускает остановленный узел.  NodeTransitionType.Stop останавливает работающий узел. Ниже перечислены возможные значения. «Invalid», «Start», «Stop»'
        - id: nodeInstanceId
          type:
            - string
          description: Идентификатор экземпляра целевого узла.  Его можно определить с помощью API GetNodeInfo.
        - id: stopDurationInSeconds
          type:
            - number
          description: 'Длительность остановки узла в секундах.  Минимальное значение равно 600, а максимальное — 14400.  После истечения этого времени узел автоматически возобновляет работу.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientStartNodeTransitionOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startPartitionRestart'
    name: 'startPartitionRestart(string, string, string, Models.RestartPartitionMode, Models.ServiceFabricClientStartPartitionRestartOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Этот API удобен для тестирования отработки отказа.
      Если он используется для секции службы без отслеживания состояния, то параметр RestartPartitionMode должен иметь значение AllReplicasOrInstances.

      Вызовите API GetPartitionRestartProgress, указав то же значение OperationId, чтобы узнать ход выполнения.
    syntax:
      content: 'function startPartitionRestart(serviceId: string, partitionId: string, operationId: string, restartPartitionMode: Models.RestartPartitionMode, options?: Models.ServiceFabricClientStartPartitionRestartOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: restartPartitionMode
          type:
            - Models.RestartPartitionMode
          description: 'Указывает, какие секции нужно перезапустить. Ниже перечислены возможные значения. «Invalid», «AllReplicasOrInstances», «OnlyActiveSecondaries»'
        - id: options
          type:
            - Models.ServiceFabricClientStartPartitionRestartOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startPartitionRestart_1'
    name: 'startPartitionRestart(string, string, string, Models.RestartPartitionMode, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startPartitionRestart(serviceId: string, partitionId: string, operationId: string, restartPartitionMode: Models.RestartPartitionMode, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: restartPartitionMode
          type:
            - Models.RestartPartitionMode
          description: 'Указывает, какие секции нужно перезапустить. Ниже перечислены возможные значения. «Invalid», «AllReplicasOrInstances», «OnlyActiveSecondaries»'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startPartitionRestart_2'
    name: 'startPartitionRestart(string, string, string, Models.RestartPartitionMode, ServiceFabricClientStartPartitionRestartOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startPartitionRestart(serviceId: string, partitionId: string, operationId: string, restartPartitionMode: Models.RestartPartitionMode, options: ServiceFabricClientStartPartitionRestartOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: restartPartitionMode
          type:
            - Models.RestartPartitionMode
          description: 'Указывает, какие секции нужно перезапустить. Ниже перечислены возможные значения. «Invalid», «AllReplicasOrInstances», «OnlyActiveSecondaries»'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientStartPartitionRestartOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startQuorumLoss'
    name: 'startQuorumLoss(string, string, string, Models.QuorumLossMode, number, Models.ServiceFabricClientStartQuorumLossOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Этот API полезен в ситуации временной потери кворума в службе.
      Вызовите API GetQuorumLossProgress с тем же OperationId, чтобы вернуть сведения об операции, запущенной с помощью этого API.

      Его можно вызвать только в постоянных службах с отслеживанием состояния (HasPersistedState имеет значение true).  Не используйте этот API в службах без отслеживания состояния или в службах с отслеживанием состояния, применяемых только в памяти.
    syntax:
      content: 'function startQuorumLoss(serviceId: string, partitionId: string, operationId: string, quorumLossMode: Models.QuorumLossMode, quorumLossDuration: number, options?: Models.ServiceFabricClientStartQuorumLossOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: quorumLossMode
          type:
            - Models.QuorumLossMode
          description: 'Это перечисление передается в API StartQuorumLoss, чтобы указать, какой тип потери кворума следует вызвать. Ниже перечислены возможные значения. «Invalid», «QuorumReplicas», «AllReplicas»'
        - id: quorumLossDuration
          type:
            - number
          description: 'Количество времени, в течение которого секция будет находиться в состоянии потери кворума.  Значение должно указываться в секундах.'
        - id: options
          type:
            - Models.ServiceFabricClientStartQuorumLossOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startQuorumLoss_1'
    name: 'startQuorumLoss(string, string, string, Models.QuorumLossMode, number, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startQuorumLoss(serviceId: string, partitionId: string, operationId: string, quorumLossMode: Models.QuorumLossMode, quorumLossDuration: number, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: quorumLossMode
          type:
            - Models.QuorumLossMode
          description: 'Это перечисление передается в API StartQuorumLoss, чтобы указать, какой тип потери кворума следует вызвать. Ниже перечислены возможные значения. «Invalid», «QuorumReplicas», «AllReplicas»'
        - id: quorumLossDuration
          type:
            - number
          description: 'Количество времени, в течение которого секция будет находиться в состоянии потери кворума.  Значение должно указываться в секундах.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startQuorumLoss_2'
    name: 'startQuorumLoss(string, string, string, Models.QuorumLossMode, number, ServiceFabricClientStartQuorumLossOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startQuorumLoss(serviceId: string, partitionId: string, operationId: string, quorumLossMode: Models.QuorumLossMode, quorumLossDuration: number, options: ServiceFabricClientStartQuorumLossOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: operationId
          type:
            - string
          description: 'Идентификатор GUID, определяющий вызов этого API.  Он передается в соответствующий API GetProgress'
        - id: quorumLossMode
          type:
            - Models.QuorumLossMode
          description: 'Это перечисление передается в API StartQuorumLoss, чтобы указать, какой тип потери кворума следует вызвать. Ниже перечислены возможные значения. «Invalid», «QuorumReplicas», «AllReplicas»'
        - id: quorumLossDuration
          type:
            - number
          description: 'Количество времени, в течение которого секция будет находиться в состоянии потери кворума.  Значение должно указываться в секундах.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientStartQuorumLossOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade'
    name: 'startRollbackComposeDeploymentUpgrade(string, Models.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Выполняет откат обновления развертывания Compose в Service Fabric.
    syntax:
      content: 'function startRollbackComposeDeploymentUpgrade(deploymentName: string, options?: Models.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: options
          type:
            - Models.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade_1'
    name: 'startRollbackComposeDeploymentUpgrade(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startRollbackComposeDeploymentUpgrade(deploymentName: string, callback: ServiceCallback<void>)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade_2'
    name: 'startRollbackComposeDeploymentUpgrade(string, ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startRollbackComposeDeploymentUpgrade(deploymentName: string, options: ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: deploymentName
          type:
            - string
          description: Идентификатор развертывания.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.stopChaos'
    name: stopChaos(Models.ServiceFabricClientStopChaosOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Останавливает службу Chaos от выполнения новых неполадок. Ошибки в активном состоянии будут продолжать выполняться, пока не завершатся. Текущее расписание Chaos переведено в состояние остановки.
      После остановки расписания оно останется в остановленном состоянии и не будет использоваться расписанием Chaos для новых запусков службы Chaos. Чтобы возобновить планирование, необходимо задать новое расписание Chaos.
    syntax:
      content: 'function stopChaos(options?: Models.ServiceFabricClientStopChaosOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientStopChaosOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.stopChaos_1'
    name: stopChaos(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function stopChaos(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.stopChaos_2'
    name: 'stopChaos(ServiceFabricClientStopChaosOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function stopChaos(options: ServiceFabricClientStopChaosOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientStopChaosOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch'
    name: 'submitPropertyBatch(string, PropertyBatchDescriptionList, Models.ServiceFabricClientSubmitPropertyBatchOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Отправляет пакет операций свойств. Все или ни одна из операций будут зафиксированы.
    syntax:
      content: 'function submitPropertyBatch(nameId: string, propertyBatchDescriptionList: PropertyBatchDescriptionList, options?: Models.ServiceFabricClientSubmitPropertyBatchOptionalParams)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: propertyBatchDescriptionList
          type:
            - '@azure/servicefabric.PropertyBatchDescriptionList'
          description: Описывает свойство пакетные операции отправки.
        - id: options
          type:
            - Models.ServiceFabricClientSubmitPropertyBatchOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SubmitPropertyBatchResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch_1'
    name: 'submitPropertyBatch(string, PropertyBatchDescriptionList, ServiceCallback<Models.PropertyBatchInfoUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function submitPropertyBatch(nameId: string, propertyBatchDescriptionList: PropertyBatchDescriptionList, callback: ServiceCallback<Models.PropertyBatchInfoUnion>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: propertyBatchDescriptionList
          type:
            - '@azure/servicefabric.PropertyBatchDescriptionList'
          description: Описывает свойство пакетные операции отправки.
        - id: callback
          type:
            - ServiceCallback<Models.PropertyBatchInfoUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.SubmitPropertyBatchResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch_2'
    name: 'submitPropertyBatch(string, PropertyBatchDescriptionList, ServiceFabricClientSubmitPropertyBatchOptionalParams, ServiceCallback<Models.PropertyBatchInfoUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function submitPropertyBatch(nameId: string, propertyBatchDescriptionList: PropertyBatchDescriptionList, options: ServiceFabricClientSubmitPropertyBatchOptionalParams, callback: ServiceCallback<Models.PropertyBatchInfoUnion>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'Назовите Service Fabric, без "fabric:" схемы универсального кода ресурса (URI) "fabric:".'
        - id: propertyBatchDescriptionList
          type:
            - '@azure/servicefabric.PropertyBatchDescriptionList'
          description: Описывает свойство пакетные операции отправки.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientSubmitPropertyBatchOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<Models.PropertyBatchInfoUnion>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.SubmitPropertyBatchResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup'
    name: 'suspendApplicationBackup(string, Models.ServiceFabricClientSuspendApplicationBackupOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Приложения, который настроен на периодическую архивацию приостановлена для дальнейшего создание резервных копий, пока он снова возобновляется. Эта операция применяется к иерархии, все приложение.
      Это означает, что все службы и разделах этого приложения теперь приостанавливаются для резервного копирования.
    syntax:
      content: 'function suspendApplicationBackup(applicationId: string, options?: Models.ServiceFabricClientSuspendApplicationBackupOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - Models.ServiceFabricClientSuspendApplicationBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup_1'
    name: 'suspendApplicationBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function suspendApplicationBackup(applicationId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup_2'
    name: 'suspendApplicationBackup(string, ServiceFabricClientSuspendApplicationBackupOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function suspendApplicationBackup(applicationId: string, options: ServiceFabricClientSuspendApplicationBackupOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientSuspendApplicationBackupOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup'
    name: 'suspendPartitionBackup(string, Models.ServiceFabricClientSuspendPartitionBackupOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Раздел, который настроен на периодическую архивацию приостановлена для дальнейшего создание резервных копий, пока он снова возобновляется.'
    syntax:
      content: 'function suspendPartitionBackup(partitionId: string, options?: Models.ServiceFabricClientSuspendPartitionBackupOptionalParams)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - Models.ServiceFabricClientSuspendPartitionBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup_1'
    name: 'suspendPartitionBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function suspendPartitionBackup(partitionId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup_2'
    name: 'suspendPartitionBackup(string, ServiceFabricClientSuspendPartitionBackupOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function suspendPartitionBackup(partitionId: string, options: ServiceFabricClientSuspendPartitionBackupOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: partitionId
          type:
            - string
          description: Идентификатор секции.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientSuspendPartitionBackupOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup'
    name: 'suspendServiceBackup(string, Models.ServiceFabricClientSuspendServiceBackupOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Службы, который настроен на периодическую архивацию приостановлена для дальнейшего создание резервных копий, пока он снова возобновляется. Эта операция применяется к иерархии всей службы. Это означает, что все секции в этой службе теперь будут приостановлены для резервного копирования.'
    syntax:
      content: 'function suspendServiceBackup(serviceId: string, options?: Models.ServiceFabricClientSuspendServiceBackupOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - Models.ServiceFabricClientSuspendServiceBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup_1'
    name: 'suspendServiceBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function suspendServiceBackup(serviceId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup_2'
    name: 'suspendServiceBackup(string, ServiceFabricClientSuspendServiceBackupOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function suspendServiceBackup(serviceId: string, options: ServiceFabricClientSuspendServiceBackupOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientSuspendServiceBackupOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting'
    name: 'toggleVerboseServicePlacementHealthReporting(boolean, Models.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Если уровень детализации имеет значение true, то создается подробных отчетов о работоспособности, если реплики нельзя поместить или удалить.
      Если уровень детализации имеет значение false, то создается не отчеты о работоспособности, если реплики нельзя поместить или удалить.
    syntax:
      content: 'function toggleVerboseServicePlacementHealthReporting(enabled: boolean, options?: Models.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams)'
      parameters:
        - id: enabled
          type:
            - boolean
          description: Уровень детализации отчетов о работоспособности размещения службы.
        - id: options
          type:
            - Models.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting_1'
    name: 'toggleVerboseServicePlacementHealthReporting(boolean, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function toggleVerboseServicePlacementHealthReporting(enabled: boolean, callback: ServiceCallback<void>)'
      parameters:
        - id: enabled
          type:
            - boolean
          description: Уровень детализации отчетов о работоспособности размещения службы.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting_2'
    name: 'toggleVerboseServicePlacementHealthReporting(boolean, ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function toggleVerboseServicePlacementHealthReporting(enabled: boolean, options: ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: enabled
          type:
            - boolean
          description: Уровень детализации отчетов о работоспособности размещения службы.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType'
    name: 'unprovisionApplicationType(string, UnprovisionApplicationTypeDescriptionInfo, Models.ServiceFabricClientUnprovisionApplicationTypeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Эта операция может быть выполнена только в том случае, если были удалены все экземпляры приложения указанного типа. После отмены регистрации типа приложения создание экземпляров приложения этого типа невозможно.'
    syntax:
      content: 'function unprovisionApplicationType(applicationTypeName: string, unprovisionApplicationTypeDescriptionInfo: UnprovisionApplicationTypeDescriptionInfo, options?: Models.ServiceFabricClientUnprovisionApplicationTypeOptionalParams)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: unprovisionApplicationTypeDescriptionInfo
          type:
            - '@azure/servicefabric.UnprovisionApplicationTypeDescriptionInfo'
          description: Относительный путь для пакета приложения в хранилище образов указывается во время операции копирования предыдущего.
        - id: options
          type:
            - Models.ServiceFabricClientUnprovisionApplicationTypeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType_1'
    name: 'unprovisionApplicationType(string, UnprovisionApplicationTypeDescriptionInfo, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function unprovisionApplicationType(applicationTypeName: string, unprovisionApplicationTypeDescriptionInfo: UnprovisionApplicationTypeDescriptionInfo, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: unprovisionApplicationTypeDescriptionInfo
          type:
            - '@azure/servicefabric.UnprovisionApplicationTypeDescriptionInfo'
          description: Относительный путь для пакета приложения в хранилище образов указывается во время операции копирования предыдущего.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType_2'
    name: 'unprovisionApplicationType(string, UnprovisionApplicationTypeDescriptionInfo, ServiceFabricClientUnprovisionApplicationTypeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function unprovisionApplicationType(applicationTypeName: string, unprovisionApplicationTypeDescriptionInfo: UnprovisionApplicationTypeDescriptionInfo, options: ServiceFabricClientUnprovisionApplicationTypeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: Имя типа приложения.
        - id: unprovisionApplicationTypeDescriptionInfo
          type:
            - '@azure/servicefabric.UnprovisionApplicationTypeDescriptionInfo'
          description: Относительный путь для пакета приложения в хранилище образов указывается во время операции копирования предыдущего.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientUnprovisionApplicationTypeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.unprovisionCluster'
    name: 'unprovisionCluster(UnprovisionFabricDescription, Models.ServiceFabricClientUnprovisionClusterOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Поддерживается отмена подготовки кода и конфигурации отдельно.
    syntax:
      content: 'function unprovisionCluster(unprovisionFabricDescription: UnprovisionFabricDescription, options?: Models.ServiceFabricClientUnprovisionClusterOptionalParams)'
      parameters:
        - id: unprovisionFabricDescription
          type:
            - '@azure/servicefabric.UnprovisionFabricDescription'
          description: Описывает параметры для отмены подготовки кластера.
        - id: options
          type:
            - Models.ServiceFabricClientUnprovisionClusterOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.unprovisionCluster_1'
    name: 'unprovisionCluster(UnprovisionFabricDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function unprovisionCluster(unprovisionFabricDescription: UnprovisionFabricDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: unprovisionFabricDescription
          type:
            - '@azure/servicefabric.UnprovisionFabricDescription'
          description: Описывает параметры для отмены подготовки кластера.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.unprovisionCluster_2'
    name: 'unprovisionCluster(UnprovisionFabricDescription, ServiceFabricClientUnprovisionClusterOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function unprovisionCluster(unprovisionFabricDescription: UnprovisionFabricDescription, options: ServiceFabricClientUnprovisionClusterOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: unprovisionFabricDescription
          type:
            - '@azure/servicefabric.UnprovisionFabricDescription'
          description: Описывает параметры для отмены подготовки кластера.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientUnprovisionClusterOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade'
    name: 'updateApplicationUpgrade(string, ApplicationUpgradeUpdateDescription, Models.ServiceFabricClientUpdateApplicationUpgradeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Обновления параметров текущего приложения после обновления с значений, указанных во время запуска обновления приложения. Это может потребоваться во избежание обновления заблокированной приложения из-за неверные параметры или проблем в приложении прогресса.'
    syntax:
      content: 'function updateApplicationUpgrade(applicationId: string, applicationUpgradeUpdateDescription: ApplicationUpgradeUpdateDescription, options?: Models.ServiceFabricClientUpdateApplicationUpgradeOptionalParams)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: applicationUpgradeUpdateDescription
          type:
            - '@azure/servicefabric.ApplicationUpgradeUpdateDescription'
          description: Параметры для обновления существующего обновления приложения.
        - id: options
          type:
            - Models.ServiceFabricClientUpdateApplicationUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade_1'
    name: 'updateApplicationUpgrade(string, ApplicationUpgradeUpdateDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateApplicationUpgrade(applicationId: string, applicationUpgradeUpdateDescription: ApplicationUpgradeUpdateDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: applicationUpgradeUpdateDescription
          type:
            - '@azure/servicefabric.ApplicationUpgradeUpdateDescription'
          description: Параметры для обновления существующего обновления приложения.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade_2'
    name: 'updateApplicationUpgrade(string, ApplicationUpgradeUpdateDescription, ServiceFabricClientUpdateApplicationUpgradeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateApplicationUpgrade(applicationId: string, applicationUpgradeUpdateDescription: ApplicationUpgradeUpdateDescription, options: ServiceFabricClientUpdateApplicationUpgradeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: applicationId
          type:
            - string
          description: |-
            Идентификатор приложения. Обычно это полное имя приложения без указания схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя приложения — "fabric:/myapp/app1", то в версии 6.0 и более поздних версиях идентификатором приложения будет "myapp~app1", а в предыдущих версиях идентификатором был бы "myapp/app1".
        - id: applicationUpgradeUpdateDescription
          type:
            - '@azure/servicefabric.ApplicationUpgradeUpdateDescription'
          description: Параметры для обновления существующего обновления приложения.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientUpdateApplicationUpgradeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy'
    name: 'updateBackupPolicy(BackupPolicyDescription, string, Models.ServiceFabricClientUpdateBackupPolicyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Обновляет политику резервного копирования определяется {backupPolicyName}'
    syntax:
      content: 'function updateBackupPolicy(backupPolicyDescription: BackupPolicyDescription, backupPolicyName: string, options?: Models.ServiceFabricClientUpdateBackupPolicyOptionalParams)'
      parameters:
        - id: backupPolicyDescription
          type:
            - '@azure/servicefabric.BackupPolicyDescription'
          description: Описывает политику резервного копирования.
        - id: backupPolicyName
          type:
            - string
          description: Имя политики резервного копирования.
        - id: options
          type:
            - Models.ServiceFabricClientUpdateBackupPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy_1'
    name: 'updateBackupPolicy(BackupPolicyDescription, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateBackupPolicy(backupPolicyDescription: BackupPolicyDescription, backupPolicyName: string, callback: ServiceCallback<void>)'
      parameters:
        - id: backupPolicyDescription
          type:
            - '@azure/servicefabric.BackupPolicyDescription'
          description: Описывает политику резервного копирования.
        - id: backupPolicyName
          type:
            - string
          description: Имя политики резервного копирования.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy_2'
    name: 'updateBackupPolicy(BackupPolicyDescription, string, ServiceFabricClientUpdateBackupPolicyOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateBackupPolicy(backupPolicyDescription: BackupPolicyDescription, backupPolicyName: string, options: ServiceFabricClientUpdateBackupPolicyOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: backupPolicyDescription
          type:
            - '@azure/servicefabric.BackupPolicyDescription'
          description: Описывает политику резервного копирования.
        - id: backupPolicyName
          type:
            - string
          description: Имя политики резервного копирования.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientUpdateBackupPolicyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade'
    name: 'updateClusterUpgrade(UpdateClusterUpgradeDescription, Models.ServiceFabricClientUpdateClusterUpgradeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Обновляет параметры обновления, используемый во время обновления кластера Service Fabric.'
    syntax:
      content: 'function updateClusterUpgrade(updateClusterUpgradeDescription: UpdateClusterUpgradeDescription, options?: Models.ServiceFabricClientUpdateClusterUpgradeOptionalParams)'
      parameters:
        - id: updateClusterUpgradeDescription
          type:
            - '@azure/servicefabric.UpdateClusterUpgradeDescription'
          description: Параметры для обновления обновления кластера.
        - id: options
          type:
            - Models.ServiceFabricClientUpdateClusterUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade_1'
    name: 'updateClusterUpgrade(UpdateClusterUpgradeDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateClusterUpgrade(updateClusterUpgradeDescription: UpdateClusterUpgradeDescription, callback: ServiceCallback<void>)'
      parameters:
        - id: updateClusterUpgradeDescription
          type:
            - '@azure/servicefabric.UpdateClusterUpgradeDescription'
          description: Параметры для обновления обновления кластера.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade_2'
    name: 'updateClusterUpgrade(UpdateClusterUpgradeDescription, ServiceFabricClientUpdateClusterUpgradeOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateClusterUpgrade(updateClusterUpgradeDescription: UpdateClusterUpgradeDescription, options: ServiceFabricClientUpdateClusterUpgradeOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: updateClusterUpgradeDescription
          type:
            - '@azure/servicefabric.UpdateClusterUpgradeDescription'
          description: Параметры для обновления обновления кластера.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientUpdateClusterUpgradeOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState'
    name: 'updateRepairExecutionState(RepairTask, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Этот API поддерживает платформу Service Fabric. Он не предназначен для использования непосредственно в коде.
    syntax:
      content: 'function updateRepairExecutionState(repairTask: RepairTask, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: repairTask
          type:
            - '@azure/servicefabric.RepairTask'
          description: Описание задачи восстановления для создания или обновления.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UpdateRepairExecutionStateResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState_2'
    name: 'updateRepairExecutionState(RepairTask, RequestOptionsBase, ServiceCallback<RepairTaskUpdateInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateRepairExecutionState(repairTask: RepairTask, options: RequestOptionsBase, callback: ServiceCallback<RepairTaskUpdateInfo>)'
      parameters:
        - id: repairTask
          type:
            - '@azure/servicefabric.RepairTask'
          description: Описание задачи восстановления для создания или обновления.
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.UpdateRepairExecutionStateResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState_1'
    name: 'updateRepairExecutionState(RepairTask, ServiceCallback<RepairTaskUpdateInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateRepairExecutionState(repairTask: RepairTask, callback: ServiceCallback<RepairTaskUpdateInfo>)'
      parameters:
        - id: repairTask
          type:
            - '@azure/servicefabric.RepairTask'
          description: Описание задачи восстановления для создания или обновления.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.UpdateRepairExecutionStateResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy'
    name: 'updateRepairTaskHealthPolicy(RepairTaskUpdateHealthPolicyDescription, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Этот API поддерживает платформу Service Fabric. Он не предназначен для использования непосредственно в коде.
    syntax:
      content: 'function updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription: RepairTaskUpdateHealthPolicyDescription, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: repairTaskUpdateHealthPolicyDescription
          type:
            - '@azure/servicefabric.RepairTaskUpdateHealthPolicyDescription'
          description: Описывает политику работоспособности задачи восстановления обновления.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UpdateRepairTaskHealthPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy_2'
    name: 'updateRepairTaskHealthPolicy(RepairTaskUpdateHealthPolicyDescription, RequestOptionsBase, ServiceCallback<RepairTaskUpdateInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription: RepairTaskUpdateHealthPolicyDescription, options: RequestOptionsBase, callback: ServiceCallback<RepairTaskUpdateInfo>)'
      parameters:
        - id: repairTaskUpdateHealthPolicyDescription
          type:
            - '@azure/servicefabric.RepairTaskUpdateHealthPolicyDescription'
          description: Описывает политику работоспособности задачи восстановления обновления.
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.UpdateRepairTaskHealthPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy_1'
    name: 'updateRepairTaskHealthPolicy(RepairTaskUpdateHealthPolicyDescription, ServiceCallback<RepairTaskUpdateInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription: RepairTaskUpdateHealthPolicyDescription, callback: ServiceCallback<RepairTaskUpdateInfo>)'
      parameters:
        - id: repairTaskUpdateHealthPolicyDescription
          type:
            - '@azure/servicefabric.RepairTaskUpdateHealthPolicyDescription'
          description: Описывает политику работоспособности задачи восстановления обновления.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.UpdateRepairTaskHealthPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateService'
    name: 'updateService(string, Models.ServiceUpdateDescriptionUnion, Models.ServiceFabricClientUpdateServiceOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Этот API позволяет обновлять свойства работающей службы Service Fabric. Набор свойств, которые могут быть обновлены представляют собой подмножество свойств, которые были указаны во время создания службы. Текущий набор свойств можно получить с помощью `GetServiceDescription` API.
      Обратите внимание, что обновление свойств работающей службы отличается от обновления приложения с помощью `StartApplicationUpgrade` API. Обновления является длительная операция фона, включает в себя перемещение приложения из одной версии в другую, одному домену обновления за раз, а обновление применимо новые свойства непосредственно в службу.
    syntax:
      content: 'function updateService(serviceId: string, serviceUpdateDescription: Models.ServiceUpdateDescriptionUnion, options?: Models.ServiceFabricClientUpdateServiceOptionalParams)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: serviceUpdateDescription
          type:
            - Models.ServiceUpdateDescriptionUnion
          description: 'Сведения, необходимые для обновления службы.'
        - id: options
          type:
            - Models.ServiceFabricClientUpdateServiceOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateService_1'
    name: 'updateService(string, Models.ServiceUpdateDescriptionUnion, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateService(serviceId: string, serviceUpdateDescription: Models.ServiceUpdateDescriptionUnion, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: serviceUpdateDescription
          type:
            - Models.ServiceUpdateDescriptionUnion
          description: 'Сведения, необходимые для обновления службы.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateService_2'
    name: 'updateService(string, Models.ServiceUpdateDescriptionUnion, ServiceFabricClientUpdateServiceOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateService(serviceId: string, serviceUpdateDescription: Models.ServiceUpdateDescriptionUnion, options: ServiceFabricClientUpdateServiceOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: serviceId
          type:
            - string
          description: |-
            Идентификатор службы. Этот идентификатор обычно — полное имя службы без "fabric:" схемы универсального кода ресурса (URI) "fabric:".
            Начиная с версии 6.0, иерархические имена разделяются знаком "~".
            Например, если имя службы — «fabric: / myapp/app1/svc1», идентификатором службы будет «myapp ~ app1 ~ svc1, а» в 6.0 + и «myapp/app1/svc1» в предыдущих версиях.
        - id: serviceUpdateDescription
          type:
            - Models.ServiceUpdateDescriptionUnion
          description: 'Сведения, необходимые для обновления службы.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientUpdateServiceOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.uploadFile'
    name: 'uploadFile(string, Models.ServiceFabricClientUploadFileOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Отправляет содержимое файла в хранилище образов. Этот API можно используйте, если файл является достаточно небольшим, чтобы отправить еще раз, в случае сбоя подключения. Файл данных должен быть добавлен в тело запроса. Содержимое будет отправляться по указанному пути. Службу хранилища образов использует пометить файл для указания доступности папки. Пометить файл — это пустой файл с именем «_.dir». Пометить файл создается при передаче всех файлов в папке службы хранилища образов. При использовании подхода файлы для отправки пакета приложения в REST службы хранилища образов не будет учитывать иерархию файлов пакета приложения. требуется для создания пометить файл в папке и отправьте его последнего, чтобы разрешить службу хранилища образов, в папке считается завершенной.'
    syntax:
      content: 'function uploadFile(contentPath: string, options?: Models.ServiceFabricClientUploadFileOptionalParams)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: options
          type:
            - Models.ServiceFabricClientUploadFileOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.uploadFile_1'
    name: 'uploadFile(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function uploadFile(contentPath: string, callback: ServiceCallback<void>)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.uploadFile_2'
    name: 'uploadFile(string, ServiceFabricClientUploadFileOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function uploadFile(contentPath: string, options: ServiceFabricClientUploadFileOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientUploadFileOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.uploadFileChunk'
    name: 'uploadFileChunk(string, string, string, Models.ServiceFabricClientUploadFileChunkOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Передает фрагмент файла в хранилище образов с помощью сеанса указанного передачи, идентификатор и образ относительному пути к хранилищу. Этот API дает пользователю возможность возобновить операции загрузки файла. пользователю не нужно перезапустить Загрузка файла с нуля каждый раз при обнаружении перебоев в работе сети. Используйте этот параметр, если файл имеет большой размер.
      Чтобы выполнить передачу файла возобновляемой, пользователю нужно разбить файл на несколько фрагменты и отправить эти блоки в хранилище образов по одному. Блоки не нужно отправить в порядке. Если файл, представленный относительного пути к хранилищу изображение уже существует, он перезаписывается при фиксации сеанса передачи.
    syntax:
      content: 'function uploadFileChunk(contentPath: string, sessionId: string, contentRange: string, options?: Models.ServiceFabricClientUploadFileChunkOptionalParams)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: sessionId
          type:
            - string
          description: 'Идентификатор GUID, создаваемых пользователем для загрузки файлов. Он идентифицирует сеанс передачи образа хранилища, который отслеживает все фрагменты файла пока она не будет зафиксирована.'
        - id: contentRange
          type:
            - string
          description: 'При передаче фрагменты файлов в хранилище образов, то поле заголовка Content-Range должны быть настроены и отправлены с запросом. Формат должен выглядит как «байты {First-Byte-Position}-{Last-Byte-Position}/{File-Length}». Например, содержимого-диапазона: байт 300 до 5000/20000 указывает, что для пользователя отправляет байт 300 через 5 000, так и для длину всего файла составляет 20 000 байт.'
        - id: options
          type:
            - Models.ServiceFabricClientUploadFileChunkOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.uploadFileChunk_1'
    name: 'uploadFileChunk(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function uploadFileChunk(contentPath: string, sessionId: string, contentRange: string, callback: ServiceCallback<void>)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: sessionId
          type:
            - string
          description: 'Идентификатор GUID, создаваемых пользователем для загрузки файлов. Он идентифицирует сеанс передачи образа хранилища, который отслеживает все фрагменты файла пока она не будет зафиксирована.'
        - id: contentRange
          type:
            - string
          description: 'При передаче фрагменты файлов в хранилище образов, то поле заголовка Content-Range должны быть настроены и отправлены с запросом. Формат должен выглядит как «байты {First-Byte-Position}-{Last-Byte-Position}/{File-Length}». Например, содержимого-диапазона: байт 300 до 5000/20000 указывает, что для пользователя отправляет байт 300 через 5 000, так и для длину всего файла составляет 20 000 байт.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.uploadFileChunk_2'
    name: 'uploadFileChunk(string, string, string, ServiceFabricClientUploadFileChunkOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function uploadFileChunk(contentPath: string, sessionId: string, contentRange: string, options: ServiceFabricClientUploadFileChunkOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: contentPath
          type:
            - string
          description: Путь к файлу или папке в хранилище образов относительно его корня.
        - id: sessionId
          type:
            - string
          description: 'Идентификатор GUID, создаваемых пользователем для загрузки файлов. Он идентифицирует сеанс передачи образа хранилища, который отслеживает все фрагменты файла пока она не будет зафиксирована.'
        - id: contentRange
          type:
            - string
          description: 'При передаче фрагменты файлов в хранилище образов, то поле заголовка Content-Range должны быть настроены и отправлены с запросом. Формат должен выглядит как «байты {First-Byte-Position}-{Last-Byte-Position}/{File-Length}». Например, содержимого-диапазона: байт 300 до 5000/20000 указывает, что для пользователя отправляет байт 300 через 5 000, так и для длину всего файла составляет 20 000 байт.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientUploadFileChunkOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/servicefabric'
references:
  - uid: '@azure/servicefabric.ServiceFabricClientContext'
    name: ServiceFabricClientContext
    spec.typeScript:
      - name: ServiceFabricClientContext
        fullName: ServiceFabricClientContext
        uid: '@azure/servicefabric.ServiceFabricClientContext'
  - uid: '@azure/servicefabric.MeshApplication'
    name: MeshApplication
    spec.typeScript:
      - name: MeshApplication
        fullName: MeshApplication
        uid: '@azure/servicefabric.MeshApplication'
  - uid: '@azure/servicefabric.MeshCodePackage'
    name: MeshCodePackage
    spec.typeScript:
      - name: MeshCodePackage
        fullName: MeshCodePackage
        uid: '@azure/servicefabric.MeshCodePackage'
  - uid: '@azure/servicefabric.MeshGateway'
    name: MeshGateway
    spec.typeScript:
      - name: MeshGateway
        fullName: MeshGateway
        uid: '@azure/servicefabric.MeshGateway'
  - uid: '@azure/servicefabric.MeshNetwork'
    name: MeshNetwork
    spec.typeScript:
      - name: MeshNetwork
        fullName: MeshNetwork
        uid: '@azure/servicefabric.MeshNetwork'
  - uid: '@azure/servicefabric.MeshSecret'
    name: MeshSecret
    spec.typeScript:
      - name: MeshSecret
        fullName: MeshSecret
        uid: '@azure/servicefabric.MeshSecret'
  - uid: '@azure/servicefabric.MeshSecretValue'
    name: MeshSecretValue
    spec.typeScript:
      - name: MeshSecretValue
        fullName: MeshSecretValue
        uid: '@azure/servicefabric.MeshSecretValue'
  - uid: '@azure/servicefabric.MeshService'
    name: MeshService
    spec.typeScript:
      - name: MeshService
        fullName: MeshService
        uid: '@azure/servicefabric.MeshService'
  - uid: '@azure/servicefabric.MeshServiceReplica'
    name: MeshServiceReplica
    spec.typeScript:
      - name: MeshServiceReplica
        fullName: MeshServiceReplica
        uid: '@azure/servicefabric.MeshServiceReplica'
  - uid: '@azure/servicefabric.MeshVolume'
    name: MeshVolume
    spec.typeScript:
      - name: MeshVolume
        fullName: MeshVolume
        uid: '@azure/servicefabric.MeshVolume'
  - uid: '@azure/servicefabric.ServiceFabricClientBackupPartitionOptionalParams'
    name: ServiceFabricClientBackupPartitionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientBackupPartitionOptionalParams
        fullName: ServiceFabricClientBackupPartitionOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientBackupPartitionOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientCancelOperationOptionalParams'
    name: ServiceFabricClientCancelOperationOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCancelOperationOptionalParams
        fullName: ServiceFabricClientCancelOperationOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientCancelOperationOptionalParams'
  - uid: '@azure/servicefabric.RepairTaskCancelDescription'
    name: RepairTaskCancelDescription
    spec.typeScript:
      - name: RepairTaskCancelDescription
        fullName: RepairTaskCancelDescription
        uid: '@azure/servicefabric.RepairTaskCancelDescription'
  - uid: ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
    name: RepairTaskUpdateInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: RepairTaskUpdateInfo
        fullName: RepairTaskUpdateInfo
        uid: '@azure/servicefabric.RepairTaskUpdateInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams'
    name: ServiceFabricClientCommitImageStoreUploadSessionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCommitImageStoreUploadSessionOptionalParams
        fullName: ServiceFabricClientCommitImageStoreUploadSessionOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams'
  - uid: '@azure/servicefabric.ImageStoreCopyDescription'
    name: ImageStoreCopyDescription
    spec.typeScript:
      - name: ImageStoreCopyDescription
        fullName: ImageStoreCopyDescription
        uid: '@azure/servicefabric.ImageStoreCopyDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientCopyImageStoreContentOptionalParams'
    name: ServiceFabricClientCopyImageStoreContentOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCopyImageStoreContentOptionalParams
        fullName: ServiceFabricClientCopyImageStoreContentOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientCopyImageStoreContentOptionalParams'
  - uid: '@azure/servicefabric.ApplicationDescription'
    name: ApplicationDescription
    spec.typeScript:
      - name: ApplicationDescription
        fullName: ApplicationDescription
        uid: '@azure/servicefabric.ApplicationDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientCreateApplicationOptionalParams'
    name: ServiceFabricClientCreateApplicationOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCreateApplicationOptionalParams
        fullName: ServiceFabricClientCreateApplicationOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientCreateApplicationOptionalParams'
  - uid: '@azure/servicefabric.BackupPolicyDescription'
    name: BackupPolicyDescription
    spec.typeScript:
      - name: BackupPolicyDescription
        fullName: BackupPolicyDescription
        uid: '@azure/servicefabric.BackupPolicyDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientCreateBackupPolicyOptionalParams'
    name: ServiceFabricClientCreateBackupPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCreateBackupPolicyOptionalParams
        fullName: ServiceFabricClientCreateBackupPolicyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientCreateBackupPolicyOptionalParams'
  - uid: '@azure/servicefabric.CreateComposeDeploymentDescription'
    name: CreateComposeDeploymentDescription
    spec.typeScript:
      - name: CreateComposeDeploymentDescription
        fullName: CreateComposeDeploymentDescription
        uid: '@azure/servicefabric.CreateComposeDeploymentDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientCreateComposeDeploymentOptionalParams'
    name: ServiceFabricClientCreateComposeDeploymentOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCreateComposeDeploymentOptionalParams
        fullName: ServiceFabricClientCreateComposeDeploymentOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientCreateComposeDeploymentOptionalParams'
  - uid: '@azure/servicefabric.NameDescription'
    name: NameDescription
    spec.typeScript:
      - name: NameDescription
        fullName: NameDescription
        uid: '@azure/servicefabric.NameDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientCreateNameOptionalParams'
    name: ServiceFabricClientCreateNameOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCreateNameOptionalParams
        fullName: ServiceFabricClientCreateNameOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientCreateNameOptionalParams'
  - uid: '@azure/servicefabric.RepairTask'
    name: RepairTask
    spec.typeScript:
      - name: RepairTask
        fullName: RepairTask
        uid: '@azure/servicefabric.RepairTask'
  - uid: '@azure/servicefabric.ServiceFabricClientCreateServiceOptionalParams'
    name: ServiceFabricClientCreateServiceOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCreateServiceOptionalParams
        fullName: ServiceFabricClientCreateServiceOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientCreateServiceOptionalParams'
  - uid: '@azure/servicefabric.ServiceFromTemplateDescription'
    name: ServiceFromTemplateDescription
    spec.typeScript:
      - name: ServiceFromTemplateDescription
        fullName: ServiceFromTemplateDescription
        uid: '@azure/servicefabric.ServiceFromTemplateDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientCreateServiceFromTemplateOptionalParams'
    name: ServiceFabricClientCreateServiceFromTemplateOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCreateServiceFromTemplateOptionalParams
        fullName: ServiceFabricClientCreateServiceFromTemplateOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientCreateServiceFromTemplateOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientDeleteApplicationOptionalParams'
    name: ServiceFabricClientDeleteApplicationOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeleteApplicationOptionalParams
        fullName: ServiceFabricClientDeleteApplicationOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDeleteApplicationOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientDeleteBackupPolicyOptionalParams'
    name: ServiceFabricClientDeleteBackupPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeleteBackupPolicyOptionalParams
        fullName: ServiceFabricClientDeleteBackupPolicyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDeleteBackupPolicyOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientDeleteImageStoreContentOptionalParams'
    name: ServiceFabricClientDeleteImageStoreContentOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeleteImageStoreContentOptionalParams
        fullName: ServiceFabricClientDeleteImageStoreContentOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDeleteImageStoreContentOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams'
    name: ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams
        fullName: ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientDeleteNameOptionalParams'
    name: ServiceFabricClientDeleteNameOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeleteNameOptionalParams
        fullName: ServiceFabricClientDeleteNameOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDeleteNameOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientDeletePropertyOptionalParams'
    name: ServiceFabricClientDeletePropertyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeletePropertyOptionalParams
        fullName: ServiceFabricClientDeletePropertyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDeletePropertyOptionalParams'
  - uid: '@azure/servicefabric.RepairTaskDeleteDescription'
    name: RepairTaskDeleteDescription
    spec.typeScript:
      - name: RepairTaskDeleteDescription
        fullName: RepairTaskDeleteDescription
        uid: '@azure/servicefabric.RepairTaskDeleteDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientDeleteServiceOptionalParams'
    name: ServiceFabricClientDeleteServiceOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeleteServiceOptionalParams
        fullName: ServiceFabricClientDeleteServiceOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDeleteServiceOptionalParams'
  - uid: '@azure/servicefabric.DeployServicePackageToNodeDescription'
    name: DeployServicePackageToNodeDescription
    spec.typeScript:
      - name: DeployServicePackageToNodeDescription
        fullName: DeployServicePackageToNodeDescription
        uid: '@azure/servicefabric.DeployServicePackageToNodeDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientDeployServicePackageToNodeOptionalParams'
    name: ServiceFabricClientDeployServicePackageToNodeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeployServicePackageToNodeOptionalParams
        fullName: ServiceFabricClientDeployServicePackageToNodeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDeployServicePackageToNodeOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientDisableApplicationBackupOptionalParams'
    name: ServiceFabricClientDisableApplicationBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDisableApplicationBackupOptionalParams
        fullName: ServiceFabricClientDisableApplicationBackupOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDisableApplicationBackupOptionalParams'
  - uid: '@azure/servicefabric.DeactivationIntentDescription'
    name: DeactivationIntentDescription
    spec.typeScript:
      - name: DeactivationIntentDescription
        fullName: DeactivationIntentDescription
        uid: '@azure/servicefabric.DeactivationIntentDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientDisableNodeOptionalParams'
    name: ServiceFabricClientDisableNodeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDisableNodeOptionalParams
        fullName: ServiceFabricClientDisableNodeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDisableNodeOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientDisablePartitionBackupOptionalParams'
    name: ServiceFabricClientDisablePartitionBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDisablePartitionBackupOptionalParams
        fullName: ServiceFabricClientDisablePartitionBackupOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDisablePartitionBackupOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientDisableServiceBackupOptionalParams'
    name: ServiceFabricClientDisableServiceBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDisableServiceBackupOptionalParams
        fullName: ServiceFabricClientDisableServiceBackupOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDisableServiceBackupOptionalParams'
  - uid: '@azure/servicefabric.EnableBackupDescription'
    name: EnableBackupDescription
    spec.typeScript:
      - name: EnableBackupDescription
        fullName: EnableBackupDescription
        uid: '@azure/servicefabric.EnableBackupDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientEnableApplicationBackupOptionalParams'
    name: ServiceFabricClientEnableApplicationBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientEnableApplicationBackupOptionalParams
        fullName: ServiceFabricClientEnableApplicationBackupOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientEnableApplicationBackupOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientEnableNodeOptionalParams'
    name: ServiceFabricClientEnableNodeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientEnableNodeOptionalParams
        fullName: ServiceFabricClientEnableNodeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientEnableNodeOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientEnablePartitionBackupOptionalParams'
    name: ServiceFabricClientEnablePartitionBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientEnablePartitionBackupOptionalParams
        fullName: ServiceFabricClientEnablePartitionBackupOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientEnablePartitionBackupOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientEnableServiceBackupOptionalParams'
    name: ServiceFabricClientEnableServiceBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientEnableServiceBackupOptionalParams
        fullName: ServiceFabricClientEnableServiceBackupOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientEnableServiceBackupOptionalParams'
  - uid: '@azure/servicefabric.RepairTaskApproveDescription'
    name: RepairTaskApproveDescription
    spec.typeScript:
      - name: RepairTaskApproveDescription
        fullName: RepairTaskApproveDescription
        uid: '@azure/servicefabric.RepairTaskApproveDescription'
  - uid: ServiceCallback<@azure/servicefabric.AadMetadataObject>
    name: AadMetadataObject>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: AadMetadataObject
        fullName: AadMetadataObject
        uid: '@azure/servicefabric.AadMetadataObject'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetAadMetadataOptionalParams'
    name: ServiceFabricClientGetAadMetadataOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetAadMetadataOptionalParams
        fullName: ServiceFabricClientGetAadMetadataOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetAadMetadataOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedBackupEntityList>
    name: PagedBackupEntityList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedBackupEntityList
        fullName: PagedBackupEntityList
        uid: '@azure/servicefabric.PagedBackupEntityList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams'
    name: ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams
        fullName: ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedBackupConfigurationInfoList>
    name: PagedBackupConfigurationInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedBackupConfigurationInfoList
        fullName: PagedBackupConfigurationInfoList
        uid: '@azure/servicefabric.PagedBackupConfigurationInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams'
    name: ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams
        fullName: ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
    name: PagedBackupInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedBackupInfoList
        fullName: PagedBackupInfoList
        uid: '@azure/servicefabric.PagedBackupInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationBackupListOptionalParams'
    name: ServiceFabricClientGetApplicationBackupListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationBackupListOptionalParams
        fullName: ServiceFabricClientGetApplicationBackupListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetApplicationBackupListOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationEventListOptionalParams'
    name: ServiceFabricClientGetApplicationEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationEventListOptionalParams
        fullName: ServiceFabricClientGetApplicationEventListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetApplicationEventListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ApplicationHealth>
    name: ApplicationHealth>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ApplicationHealth
        fullName: ApplicationHealth
        uid: '@azure/servicefabric.ApplicationHealth'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationHealthOptionalParams'
    name: ServiceFabricClientGetApplicationHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationHealthOptionalParams
        fullName: ServiceFabricClientGetApplicationHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetApplicationHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams'
    name: ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams
        fullName: ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ApplicationInfo>
    name: ApplicationInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ApplicationInfo
        fullName: ApplicationInfo
        uid: '@azure/servicefabric.ApplicationInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationInfoOptionalParams'
    name: ServiceFabricClientGetApplicationInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationInfoOptionalParams
        fullName: ServiceFabricClientGetApplicationInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetApplicationInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedApplicationInfoList>
    name: PagedApplicationInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedApplicationInfoList
        fullName: PagedApplicationInfoList
        uid: '@azure/servicefabric.PagedApplicationInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationInfoListOptionalParams'
    name: ServiceFabricClientGetApplicationInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationInfoListOptionalParams
        fullName: ServiceFabricClientGetApplicationInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetApplicationInfoListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ApplicationLoadInfo>
    name: ApplicationLoadInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ApplicationLoadInfo
        fullName: ApplicationLoadInfo
        uid: '@azure/servicefabric.ApplicationLoadInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationLoadInfoOptionalParams'
    name: ServiceFabricClientGetApplicationLoadInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationLoadInfoOptionalParams
        fullName: ServiceFabricClientGetApplicationLoadInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetApplicationLoadInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ApplicationTypeManifest>
    name: ApplicationTypeManifest>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ApplicationTypeManifest
        fullName: ApplicationTypeManifest
        uid: '@azure/servicefabric.ApplicationTypeManifest'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationManifestOptionalParams'
    name: ServiceFabricClientGetApplicationManifestOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationManifestOptionalParams
        fullName: ServiceFabricClientGetApplicationManifestOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetApplicationManifestOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ApplicationNameInfo>
    name: ApplicationNameInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ApplicationNameInfo
        fullName: ApplicationNameInfo
        uid: '@azure/servicefabric.ApplicationNameInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationNameInfoOptionalParams'
    name: ServiceFabricClientGetApplicationNameInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationNameInfoOptionalParams
        fullName: ServiceFabricClientGetApplicationNameInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetApplicationNameInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedApplicationTypeInfoList>
    name: PagedApplicationTypeInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedApplicationTypeInfoList
        fullName: PagedApplicationTypeInfoList
        uid: '@azure/servicefabric.PagedApplicationTypeInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationTypeInfoListOptionalParams'
    name: ServiceFabricClientGetApplicationTypeInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationTypeInfoListOptionalParams
        fullName: ServiceFabricClientGetApplicationTypeInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetApplicationTypeInfoListOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams'
    name: ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams
        fullName: ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ApplicationUpgradeProgressInfo>
    name: ApplicationUpgradeProgressInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ApplicationUpgradeProgressInfo
        fullName: ApplicationUpgradeProgressInfo
        uid: '@azure/servicefabric.ApplicationUpgradeProgressInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationUpgradeOptionalParams'
    name: ServiceFabricClientGetApplicationUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationUpgradeOptionalParams
        fullName: ServiceFabricClientGetApplicationUpgradeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetApplicationUpgradeOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationsEventListOptionalParams'
    name: ServiceFabricClientGetApplicationsEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationsEventListOptionalParams
        fullName: ServiceFabricClientGetApplicationsEventListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetApplicationsEventListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.BackupPolicyDescription>
    name: BackupPolicyDescription>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: BackupPolicyDescription
        fullName: BackupPolicyDescription
        uid: '@azure/servicefabric.BackupPolicyDescription'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetBackupPolicyByNameOptionalParams'
    name: ServiceFabricClientGetBackupPolicyByNameOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetBackupPolicyByNameOptionalParams
        fullName: ServiceFabricClientGetBackupPolicyByNameOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetBackupPolicyByNameOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedBackupPolicyDescriptionList>
    name: PagedBackupPolicyDescriptionList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedBackupPolicyDescriptionList
        fullName: PagedBackupPolicyDescriptionList
        uid: '@azure/servicefabric.PagedBackupPolicyDescriptionList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetBackupPolicyListOptionalParams'
    name: ServiceFabricClientGetBackupPolicyListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetBackupPolicyListOptionalParams
        fullName: ServiceFabricClientGetBackupPolicyListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetBackupPolicyListOptionalParams'
  - uid: '@azure/servicefabric.GetBackupByStorageQueryDescription'
    name: GetBackupByStorageQueryDescription
    spec.typeScript:
      - name: GetBackupByStorageQueryDescription
        fullName: GetBackupByStorageQueryDescription
        uid: '@azure/servicefabric.GetBackupByStorageQueryDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams'
    name: ServiceFabricClientGetBackupsFromBackupLocationOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetBackupsFromBackupLocationOptionalParams
        fullName: ServiceFabricClientGetBackupsFromBackupLocationOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.Chaos>
    name: Chaos>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: Chaos
        fullName: Chaos
        uid: '@azure/servicefabric.Chaos'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetChaosOptionalParams'
    name: ServiceFabricClientGetChaosOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetChaosOptionalParams
        fullName: ServiceFabricClientGetChaosOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetChaosOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ChaosEventsSegment>
    name: ChaosEventsSegment>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ChaosEventsSegment
        fullName: ChaosEventsSegment
        uid: '@azure/servicefabric.ChaosEventsSegment'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetChaosEventsOptionalParams'
    name: ServiceFabricClientGetChaosEventsOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetChaosEventsOptionalParams
        fullName: ServiceFabricClientGetChaosEventsOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetChaosEventsOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ChaosScheduleDescription>
    name: ChaosScheduleDescription>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ChaosScheduleDescription
        fullName: ChaosScheduleDescription
        uid: '@azure/servicefabric.ChaosScheduleDescription'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetChaosScheduleOptionalParams'
    name: ServiceFabricClientGetChaosScheduleOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetChaosScheduleOptionalParams
        fullName: ServiceFabricClientGetChaosScheduleOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetChaosScheduleOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ClusterConfiguration>
    name: ClusterConfiguration>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterConfiguration
        fullName: ClusterConfiguration
        uid: '@azure/servicefabric.ClusterConfiguration'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterConfigurationOptionalParams'
    name: ServiceFabricClientGetClusterConfigurationOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterConfigurationOptionalParams
        fullName: ServiceFabricClientGetClusterConfigurationOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetClusterConfigurationOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ClusterConfigurationUpgradeStatusInfo>
    name: ClusterConfigurationUpgradeStatusInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterConfigurationUpgradeStatusInfo
        fullName: ClusterConfigurationUpgradeStatusInfo
        uid: '@azure/servicefabric.ClusterConfigurationUpgradeStatusInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams'
    name: ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams
        fullName: ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterEventListOptionalParams'
    name: ServiceFabricClientGetClusterEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterEventListOptionalParams
        fullName: ServiceFabricClientGetClusterEventListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetClusterEventListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ClusterHealth>
    name: ClusterHealth>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterHealth
        fullName: ClusterHealth
        uid: '@azure/servicefabric.ClusterHealth'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterHealthOptionalParams'
    name: ServiceFabricClientGetClusterHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterHealthOptionalParams
        fullName: ServiceFabricClientGetClusterHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetClusterHealthOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ClusterHealthChunk>
    name: ClusterHealthChunk>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterHealthChunk
        fullName: ClusterHealthChunk
        uid: '@azure/servicefabric.ClusterHealthChunk'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterHealthChunkOptionalParams'
    name: ServiceFabricClientGetClusterHealthChunkOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterHealthChunkOptionalParams
        fullName: ServiceFabricClientGetClusterHealthChunkOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetClusterHealthChunkOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams'
    name: ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams
        fullName: ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams'
    name: ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams
        fullName: ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ClusterLoadInfo>
    name: ClusterLoadInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterLoadInfo
        fullName: ClusterLoadInfo
        uid: '@azure/servicefabric.ClusterLoadInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterLoadOptionalParams'
    name: ServiceFabricClientGetClusterLoadOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterLoadOptionalParams
        fullName: ServiceFabricClientGetClusterLoadOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetClusterLoadOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ClusterManifest>
    name: ClusterManifest>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterManifest
        fullName: ClusterManifest
        uid: '@azure/servicefabric.ClusterManifest'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterManifestOptionalParams'
    name: ServiceFabricClientGetClusterManifestOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterManifestOptionalParams
        fullName: ServiceFabricClientGetClusterManifestOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetClusterManifestOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ClusterUpgradeProgressObject>
    name: ClusterUpgradeProgressObject>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterUpgradeProgressObject
        fullName: ClusterUpgradeProgressObject
        uid: '@azure/servicefabric.ClusterUpgradeProgressObject'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterUpgradeProgressOptionalParams'
    name: ServiceFabricClientGetClusterUpgradeProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterUpgradeProgressOptionalParams
        fullName: ServiceFabricClientGetClusterUpgradeProgressOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetClusterUpgradeProgressOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ClusterVersion>
    name: ClusterVersion>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterVersion
        fullName: ClusterVersion
        uid: '@azure/servicefabric.ClusterVersion'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterVersionOptionalParams'
    name: ServiceFabricClientGetClusterVersionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterVersionOptionalParams
        fullName: ServiceFabricClientGetClusterVersionOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetClusterVersionOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ComposeDeploymentStatusInfo>
    name: ComposeDeploymentStatusInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ComposeDeploymentStatusInfo
        fullName: ComposeDeploymentStatusInfo
        uid: '@azure/servicefabric.ComposeDeploymentStatusInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetComposeDeploymentStatusOptionalParams'
    name: ServiceFabricClientGetComposeDeploymentStatusOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetComposeDeploymentStatusOptionalParams
        fullName: ServiceFabricClientGetComposeDeploymentStatusOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetComposeDeploymentStatusOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedComposeDeploymentStatusInfoList>
    name: PagedComposeDeploymentStatusInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedComposeDeploymentStatusInfoList
        fullName: PagedComposeDeploymentStatusInfoList
        uid: '@azure/servicefabric.PagedComposeDeploymentStatusInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams'
    name: ServiceFabricClientGetComposeDeploymentStatusListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetComposeDeploymentStatusListOptionalParams
        fullName: ServiceFabricClientGetComposeDeploymentStatusListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ComposeDeploymentUpgradeProgressInfo>
    name: ComposeDeploymentUpgradeProgressInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ComposeDeploymentUpgradeProgressInfo
        fullName: ComposeDeploymentUpgradeProgressInfo
        uid: '@azure/servicefabric.ComposeDeploymentUpgradeProgressInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams'
    name: ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams
        fullName: ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ContainerLogs>
    name: ContainerLogs>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ContainerLogs
        fullName: ContainerLogs
        uid: '@azure/servicefabric.ContainerLogs'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams'
    name: ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams
        fullName: ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams'
  - uid: 'ServiceCallback<@azure/servicefabric.ContainerInstanceEvent[]>'
    name: 'ContainerInstanceEvent[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ContainerInstanceEvent
        fullName: ContainerInstanceEvent
        uid: '@azure/servicefabric.ContainerInstanceEvent'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetContainersEventListOptionalParams'
    name: ServiceFabricClientGetContainersEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetContainersEventListOptionalParams
        fullName: ServiceFabricClientGetContainersEventListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetContainersEventListOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetCorrelatedEventListOptionalParams'
    name: ServiceFabricClientGetCorrelatedEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetCorrelatedEventListOptionalParams
        fullName: ServiceFabricClientGetCorrelatedEventListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetCorrelatedEventListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PartitionDataLossProgress>
    name: PartitionDataLossProgress>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PartitionDataLossProgress
        fullName: PartitionDataLossProgress
        uid: '@azure/servicefabric.PartitionDataLossProgress'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDataLossProgressOptionalParams'
    name: ServiceFabricClientGetDataLossProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDataLossProgressOptionalParams
        fullName: ServiceFabricClientGetDataLossProgressOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDataLossProgressOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.DeployedApplicationHealth>
    name: DeployedApplicationHealth>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeployedApplicationHealth
        fullName: DeployedApplicationHealth
        uid: '@azure/servicefabric.DeployedApplicationHealth'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDeployedApplicationHealthOptionalParams'
    name: ServiceFabricClientGetDeployedApplicationHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedApplicationHealthOptionalParams
        fullName: ServiceFabricClientGetDeployedApplicationHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDeployedApplicationHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams'
    name: ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams
        fullName: ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.DeployedApplicationInfo>
    name: DeployedApplicationInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeployedApplicationInfo
        fullName: DeployedApplicationInfo
        uid: '@azure/servicefabric.DeployedApplicationInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDeployedApplicationInfoOptionalParams'
    name: ServiceFabricClientGetDeployedApplicationInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedApplicationInfoOptionalParams
        fullName: ServiceFabricClientGetDeployedApplicationInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDeployedApplicationInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedDeployedApplicationInfoList>
    name: PagedDeployedApplicationInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedDeployedApplicationInfoList
        fullName: PagedDeployedApplicationInfoList
        uid: '@azure/servicefabric.PagedDeployedApplicationInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams'
    name: ServiceFabricClientGetDeployedApplicationInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedApplicationInfoListOptionalParams
        fullName: ServiceFabricClientGetDeployedApplicationInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams'
  - uid: 'ServiceCallback<@azure/servicefabric.DeployedCodePackageInfo[]>'
    name: 'DeployedCodePackageInfo[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeployedCodePackageInfo
        fullName: DeployedCodePackageInfo
        uid: '@azure/servicefabric.DeployedCodePackageInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams'
    name: ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams
        fullName: ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.DeployedServicePackageHealth>
    name: DeployedServicePackageHealth>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeployedServicePackageHealth
        fullName: DeployedServicePackageHealth
        uid: '@azure/servicefabric.DeployedServicePackageHealth'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams'
    name: ServiceFabricClientGetDeployedServicePackageHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServicePackageHealthOptionalParams
        fullName: ServiceFabricClientGetDeployedServicePackageHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams'
    name: ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams
        fullName: ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams'
  - uid: 'ServiceCallback<@azure/servicefabric.DeployedServicePackageInfo[]>'
    name: 'DeployedServicePackageInfo[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeployedServicePackageInfo
        fullName: DeployedServicePackageInfo
        uid: '@azure/servicefabric.DeployedServicePackageInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams'
    name: ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams
        fullName: ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams'
    name: ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams
        fullName: ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams'
    name: ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams
        fullName: ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams'
    name: ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams
        fullName: ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams'
    name: ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams
        fullName: ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams'
  - uid: 'ServiceCallback<@azure/servicefabric.DeployedServiceTypeInfo[]>'
    name: 'DeployedServiceTypeInfo[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeployedServiceTypeInfo
        fullName: DeployedServiceTypeInfo
        uid: '@azure/servicefabric.DeployedServiceTypeInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams'
    name: ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams
        fullName: ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams'
    name: ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams
        fullName: ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams'
  - uid: 'ServiceCallback<@azure/servicefabric.OperationStatus[]>'
    name: 'OperationStatus[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: OperationStatus
        fullName: OperationStatus
        uid: '@azure/servicefabric.OperationStatus'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetFaultOperationListOptionalParams'
    name: ServiceFabricClientGetFaultOperationListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetFaultOperationListOptionalParams
        fullName: ServiceFabricClientGetFaultOperationListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetFaultOperationListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ImageStoreContent>
    name: ImageStoreContent>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ImageStoreContent
        fullName: ImageStoreContent
        uid: '@azure/servicefabric.ImageStoreContent'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetImageStoreContentOptionalParams'
    name: ServiceFabricClientGetImageStoreContentOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetImageStoreContentOptionalParams
        fullName: ServiceFabricClientGetImageStoreContentOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetImageStoreContentOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.FolderSizeInfo>
    name: FolderSizeInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: FolderSizeInfo
        fullName: FolderSizeInfo
        uid: '@azure/servicefabric.FolderSizeInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetImageStoreFolderSizeOptionalParams'
    name: ServiceFabricClientGetImageStoreFolderSizeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetImageStoreFolderSizeOptionalParams
        fullName: ServiceFabricClientGetImageStoreFolderSizeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetImageStoreFolderSizeOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetImageStoreRootContentOptionalParams'
    name: ServiceFabricClientGetImageStoreRootContentOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetImageStoreRootContentOptionalParams
        fullName: ServiceFabricClientGetImageStoreRootContentOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetImageStoreRootContentOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams'
    name: ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams
        fullName: ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.UploadSession>
    name: UploadSession>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: UploadSession
        fullName: UploadSession
        uid: '@azure/servicefabric.UploadSession'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams'
    name: ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams
        fullName: ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams'
    name: ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams
        fullName: ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetNameExistsInfoOptionalParams'
    name: ServiceFabricClientGetNameExistsInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNameExistsInfoOptionalParams
        fullName: ServiceFabricClientGetNameExistsInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetNameExistsInfoOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetNodeEventListOptionalParams'
    name: ServiceFabricClientGetNodeEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodeEventListOptionalParams
        fullName: ServiceFabricClientGetNodeEventListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetNodeEventListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.NodeHealth>
    name: NodeHealth>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: NodeHealth
        fullName: NodeHealth
        uid: '@azure/servicefabric.NodeHealth'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetNodeHealthOptionalParams'
    name: ServiceFabricClientGetNodeHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodeHealthOptionalParams
        fullName: ServiceFabricClientGetNodeHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetNodeHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams'
    name: ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams
        fullName: ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.NodeInfo>
    name: NodeInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: NodeInfo
        fullName: NodeInfo
        uid: '@azure/servicefabric.NodeInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetNodeInfoOptionalParams'
    name: ServiceFabricClientGetNodeInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodeInfoOptionalParams
        fullName: ServiceFabricClientGetNodeInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetNodeInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedNodeInfoList>
    name: PagedNodeInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedNodeInfoList
        fullName: PagedNodeInfoList
        uid: '@azure/servicefabric.PagedNodeInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetNodeInfoListOptionalParams'
    name: ServiceFabricClientGetNodeInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodeInfoListOptionalParams
        fullName: ServiceFabricClientGetNodeInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetNodeInfoListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.NodeLoadInfo>
    name: NodeLoadInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: NodeLoadInfo
        fullName: NodeLoadInfo
        uid: '@azure/servicefabric.NodeLoadInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetNodeLoadInfoOptionalParams'
    name: ServiceFabricClientGetNodeLoadInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodeLoadInfoOptionalParams
        fullName: ServiceFabricClientGetNodeLoadInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetNodeLoadInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.NodeTransitionProgress>
    name: NodeTransitionProgress>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: NodeTransitionProgress
        fullName: NodeTransitionProgress
        uid: '@azure/servicefabric.NodeTransitionProgress'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetNodeTransitionProgressOptionalParams'
    name: ServiceFabricClientGetNodeTransitionProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodeTransitionProgressOptionalParams
        fullName: ServiceFabricClientGetNodeTransitionProgressOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetNodeTransitionProgressOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetNodesEventListOptionalParams'
    name: ServiceFabricClientGetNodesEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodesEventListOptionalParams
        fullName: ServiceFabricClientGetNodesEventListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetNodesEventListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PartitionBackupConfigurationInfo>
    name: PartitionBackupConfigurationInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PartitionBackupConfigurationInfo
        fullName: PartitionBackupConfigurationInfo
        uid: '@azure/servicefabric.PartitionBackupConfigurationInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams'
    name: ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams
        fullName: ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionBackupListOptionalParams'
    name: ServiceFabricClientGetPartitionBackupListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionBackupListOptionalParams
        fullName: ServiceFabricClientGetPartitionBackupListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionBackupListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.BackupProgressInfo>
    name: BackupProgressInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: BackupProgressInfo
        fullName: BackupProgressInfo
        uid: '@azure/servicefabric.BackupProgressInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionBackupProgressOptionalParams'
    name: ServiceFabricClientGetPartitionBackupProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionBackupProgressOptionalParams
        fullName: ServiceFabricClientGetPartitionBackupProgressOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionBackupProgressOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionEventListOptionalParams'
    name: ServiceFabricClientGetPartitionEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionEventListOptionalParams
        fullName: ServiceFabricClientGetPartitionEventListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionEventListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PartitionHealth>
    name: PartitionHealth>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PartitionHealth
        fullName: PartitionHealth
        uid: '@azure/servicefabric.PartitionHealth'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionHealthOptionalParams'
    name: ServiceFabricClientGetPartitionHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionHealthOptionalParams
        fullName: ServiceFabricClientGetPartitionHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams'
    name: ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams
        fullName: ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionInfoOptionalParams'
    name: ServiceFabricClientGetPartitionInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionInfoOptionalParams
        fullName: ServiceFabricClientGetPartitionInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedServicePartitionInfoList>
    name: PagedServicePartitionInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedServicePartitionInfoList
        fullName: PagedServicePartitionInfoList
        uid: '@azure/servicefabric.PagedServicePartitionInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionInfoListOptionalParams'
    name: ServiceFabricClientGetPartitionInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionInfoListOptionalParams
        fullName: ServiceFabricClientGetPartitionInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionInfoListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PartitionLoadInformation>
    name: PartitionLoadInformation>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PartitionLoadInformation
        fullName: PartitionLoadInformation
        uid: '@azure/servicefabric.PartitionLoadInformation'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionLoadInformationOptionalParams'
    name: ServiceFabricClientGetPartitionLoadInformationOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionLoadInformationOptionalParams
        fullName: ServiceFabricClientGetPartitionLoadInformationOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionLoadInformationOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionReplicaEventListOptionalParams'
    name: ServiceFabricClientGetPartitionReplicaEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionReplicaEventListOptionalParams
        fullName: ServiceFabricClientGetPartitionReplicaEventListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionReplicaEventListOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionReplicasEventListOptionalParams'
    name: ServiceFabricClientGetPartitionReplicasEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionReplicasEventListOptionalParams
        fullName: ServiceFabricClientGetPartitionReplicasEventListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionReplicasEventListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PartitionRestartProgress>
    name: PartitionRestartProgress>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PartitionRestartProgress
        fullName: PartitionRestartProgress
        uid: '@azure/servicefabric.PartitionRestartProgress'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionRestartProgressOptionalParams'
    name: ServiceFabricClientGetPartitionRestartProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionRestartProgressOptionalParams
        fullName: ServiceFabricClientGetPartitionRestartProgressOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionRestartProgressOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.RestoreProgressInfo>
    name: RestoreProgressInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: RestoreProgressInfo
        fullName: RestoreProgressInfo
        uid: '@azure/servicefabric.RestoreProgressInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionRestoreProgressOptionalParams'
    name: ServiceFabricClientGetPartitionRestoreProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionRestoreProgressOptionalParams
        fullName: ServiceFabricClientGetPartitionRestoreProgressOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionRestoreProgressOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionsEventListOptionalParams'
    name: ServiceFabricClientGetPartitionsEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionsEventListOptionalParams
        fullName: ServiceFabricClientGetPartitionsEventListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionsEventListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PropertyInfo>
    name: PropertyInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PropertyInfo
        fullName: PropertyInfo
        uid: '@azure/servicefabric.PropertyInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPropertyInfoOptionalParams'
    name: ServiceFabricClientGetPropertyInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPropertyInfoOptionalParams
        fullName: ServiceFabricClientGetPropertyInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPropertyInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedPropertyInfoList>
    name: PagedPropertyInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedPropertyInfoList
        fullName: PagedPropertyInfoList
        uid: '@azure/servicefabric.PagedPropertyInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPropertyInfoListOptionalParams'
    name: ServiceFabricClientGetPropertyInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPropertyInfoListOptionalParams
        fullName: ServiceFabricClientGetPropertyInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPropertyInfoListOptionalParams'
  - uid: 'ServiceCallback<@azure/servicefabric.FabricCodeVersionInfo[]>'
    name: 'FabricCodeVersionInfo[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: FabricCodeVersionInfo
        fullName: FabricCodeVersionInfo
        uid: '@azure/servicefabric.FabricCodeVersionInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams'
    name: ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams
        fullName: ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams'
  - uid: 'ServiceCallback<@azure/servicefabric.FabricConfigVersionInfo[]>'
    name: 'FabricConfigVersionInfo[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: FabricConfigVersionInfo
        fullName: FabricConfigVersionInfo
        uid: '@azure/servicefabric.FabricConfigVersionInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams'
    name: ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams
        fullName: ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PartitionQuorumLossProgress>
    name: PartitionQuorumLossProgress>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PartitionQuorumLossProgress
        fullName: PartitionQuorumLossProgress
        uid: '@azure/servicefabric.PartitionQuorumLossProgress'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetQuorumLossProgressOptionalParams'
    name: ServiceFabricClientGetQuorumLossProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetQuorumLossProgressOptionalParams
        fullName: ServiceFabricClientGetQuorumLossProgressOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetQuorumLossProgressOptionalParams'
  - uid: 'ServiceCallback<@azure/servicefabric.RepairTask[]>'
    name: 'RepairTask[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: RepairTask
        fullName: RepairTask
        uid: '@azure/servicefabric.RepairTask'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetRepairTaskListOptionalParams'
    name: ServiceFabricClientGetRepairTaskListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetRepairTaskListOptionalParams
        fullName: ServiceFabricClientGetRepairTaskListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetRepairTaskListOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetReplicaHealthOptionalParams'
    name: ServiceFabricClientGetReplicaHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetReplicaHealthOptionalParams
        fullName: ServiceFabricClientGetReplicaHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetReplicaHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams'
    name: ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams
        fullName: ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetReplicaInfoOptionalParams'
    name: ServiceFabricClientGetReplicaInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetReplicaInfoOptionalParams
        fullName: ServiceFabricClientGetReplicaInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetReplicaInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedReplicaInfoList>
    name: PagedReplicaInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedReplicaInfoList
        fullName: PagedReplicaInfoList
        uid: '@azure/servicefabric.PagedReplicaInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetReplicaInfoListOptionalParams'
    name: ServiceFabricClientGetReplicaInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetReplicaInfoListOptionalParams
        fullName: ServiceFabricClientGetReplicaInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetReplicaInfoListOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams'
    name: ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams
        fullName: ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceBackupListOptionalParams'
    name: ServiceFabricClientGetServiceBackupListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceBackupListOptionalParams
        fullName: ServiceFabricClientGetServiceBackupListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServiceBackupListOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceDescriptionOptionalParams'
    name: ServiceFabricClientGetServiceDescriptionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceDescriptionOptionalParams
        fullName: ServiceFabricClientGetServiceDescriptionOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServiceDescriptionOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceEventListOptionalParams'
    name: ServiceFabricClientGetServiceEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceEventListOptionalParams
        fullName: ServiceFabricClientGetServiceEventListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServiceEventListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ServiceHealth>
    name: ServiceHealth>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ServiceHealth
        fullName: ServiceHealth
        uid: '@azure/servicefabric.ServiceHealth'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceHealthOptionalParams'
    name: ServiceFabricClientGetServiceHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceHealthOptionalParams
        fullName: ServiceFabricClientGetServiceHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServiceHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams'
    name: ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams
        fullName: ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceInfoOptionalParams'
    name: ServiceFabricClientGetServiceInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceInfoOptionalParams
        fullName: ServiceFabricClientGetServiceInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServiceInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedServiceInfoList>
    name: PagedServiceInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedServiceInfoList
        fullName: PagedServiceInfoList
        uid: '@azure/servicefabric.PagedServiceInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceInfoListOptionalParams'
    name: ServiceFabricClientGetServiceInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceInfoListOptionalParams
        fullName: ServiceFabricClientGetServiceInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServiceInfoListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ServiceTypeManifest>
    name: ServiceTypeManifest>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ServiceTypeManifest
        fullName: ServiceTypeManifest
        uid: '@azure/servicefabric.ServiceTypeManifest'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceManifestOptionalParams'
    name: ServiceFabricClientGetServiceManifestOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceManifestOptionalParams
        fullName: ServiceFabricClientGetServiceManifestOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServiceManifestOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ServiceNameInfo>
    name: ServiceNameInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ServiceNameInfo
        fullName: ServiceNameInfo
        uid: '@azure/servicefabric.ServiceNameInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceNameInfoOptionalParams'
    name: ServiceFabricClientGetServiceNameInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceNameInfoOptionalParams
        fullName: ServiceFabricClientGetServiceNameInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServiceNameInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ServiceTypeInfo>
    name: ServiceTypeInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ServiceTypeInfo
        fullName: ServiceTypeInfo
        uid: '@azure/servicefabric.ServiceTypeInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams'
    name: ServiceFabricClientGetServiceTypeInfoByNameOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceTypeInfoByNameOptionalParams
        fullName: ServiceFabricClientGetServiceTypeInfoByNameOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams'
  - uid: 'ServiceCallback<@azure/servicefabric.ServiceTypeInfo[]>'
    name: 'ServiceTypeInfo[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ServiceTypeInfo
        fullName: ServiceTypeInfo
        uid: '@azure/servicefabric.ServiceTypeInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceTypeInfoListOptionalParams'
    name: ServiceFabricClientGetServiceTypeInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceTypeInfoListOptionalParams
        fullName: ServiceFabricClientGetServiceTypeInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServiceTypeInfoListOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServicesEventListOptionalParams'
    name: ServiceFabricClientGetServicesEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServicesEventListOptionalParams
        fullName: ServiceFabricClientGetServicesEventListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServicesEventListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedSubNameInfoList>
    name: PagedSubNameInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedSubNameInfoList
        fullName: PagedSubNameInfoList
        uid: '@azure/servicefabric.PagedSubNameInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetSubNameInfoListOptionalParams'
    name: ServiceFabricClientGetSubNameInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetSubNameInfoListOptionalParams
        fullName: ServiceFabricClientGetSubNameInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetSubNameInfoListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.UnplacedReplicaInformation>
    name: UnplacedReplicaInformation>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: UnplacedReplicaInformation
        fullName: UnplacedReplicaInformation
        uid: '@azure/servicefabric.UnplacedReplicaInformation'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams'
    name: ServiceFabricClientGetUnplacedReplicaInformationOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetUnplacedReplicaInformationOptionalParams
        fullName: ServiceFabricClientGetUnplacedReplicaInformationOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.UpgradeOrchestrationServiceState>
    name: UpgradeOrchestrationServiceState>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: UpgradeOrchestrationServiceState
        fullName: UpgradeOrchestrationServiceState
        uid: '@azure/servicefabric.UpgradeOrchestrationServiceState'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams'
    name: ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams
        fullName: ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams'
  - uid: '@azure/servicefabric.ContainerApiRequestBody'
    name: ContainerApiRequestBody
    spec.typeScript:
      - name: ContainerApiRequestBody
        fullName: ContainerApiRequestBody
        uid: '@azure/servicefabric.ContainerApiRequestBody'
  - uid: ServiceCallback<@azure/servicefabric.ContainerApiResponse>
    name: ContainerApiResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ContainerApiResponse
        fullName: ContainerApiResponse
        uid: '@azure/servicefabric.ContainerApiResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientInvokeContainerApiOptionalParams'
    name: ServiceFabricClientInvokeContainerApiOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientInvokeContainerApiOptionalParams
        fullName: ServiceFabricClientInvokeContainerApiOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientInvokeContainerApiOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientInvokeInfrastructureCommandOptionalParams'
    name: ServiceFabricClientInvokeInfrastructureCommandOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientInvokeInfrastructureCommandOptionalParams
        fullName: ServiceFabricClientInvokeInfrastructureCommandOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientInvokeInfrastructureCommandOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientInvokeInfrastructureQueryOptionalParams'
    name: ServiceFabricClientInvokeInfrastructureQueryOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientInvokeInfrastructureQueryOptionalParams
        fullName: ServiceFabricClientInvokeInfrastructureQueryOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientInvokeInfrastructureQueryOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientMovePrimaryReplicaOptionalParams'
    name: ServiceFabricClientMovePrimaryReplicaOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientMovePrimaryReplicaOptionalParams
        fullName: ServiceFabricClientMovePrimaryReplicaOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientMovePrimaryReplicaOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientMoveSecondaryReplicaOptionalParams'
    name: ServiceFabricClientMoveSecondaryReplicaOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientMoveSecondaryReplicaOptionalParams
        fullName: ServiceFabricClientMoveSecondaryReplicaOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientMoveSecondaryReplicaOptionalParams'
  - uid: '@azure/servicefabric.ChaosScheduleDescription'
    name: ChaosScheduleDescription
    spec.typeScript:
      - name: ChaosScheduleDescription
        fullName: ChaosScheduleDescription
        uid: '@azure/servicefabric.ChaosScheduleDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientPostChaosScheduleOptionalParams'
    name: ServiceFabricClientPostChaosScheduleOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientPostChaosScheduleOptionalParams
        fullName: ServiceFabricClientPostChaosScheduleOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientPostChaosScheduleOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientProvisionApplicationTypeOptionalParams'
    name: ServiceFabricClientProvisionApplicationTypeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientProvisionApplicationTypeOptionalParams
        fullName: ServiceFabricClientProvisionApplicationTypeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientProvisionApplicationTypeOptionalParams'
  - uid: '@azure/servicefabric.ProvisionFabricDescription'
    name: ProvisionFabricDescription
    spec.typeScript:
      - name: ProvisionFabricDescription
        fullName: ProvisionFabricDescription
        uid: '@azure/servicefabric.ProvisionFabricDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientProvisionClusterOptionalParams'
    name: ServiceFabricClientProvisionClusterOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientProvisionClusterOptionalParams
        fullName: ServiceFabricClientProvisionClusterOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientProvisionClusterOptionalParams'
  - uid: '@azure/servicefabric.PropertyDescription'
    name: PropertyDescription
    spec.typeScript:
      - name: PropertyDescription
        fullName: PropertyDescription
        uid: '@azure/servicefabric.PropertyDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientPutPropertyOptionalParams'
    name: ServiceFabricClientPutPropertyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientPutPropertyOptionalParams
        fullName: ServiceFabricClientPutPropertyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientPutPropertyOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientRecoverAllPartitionsOptionalParams'
    name: ServiceFabricClientRecoverAllPartitionsOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRecoverAllPartitionsOptionalParams
        fullName: ServiceFabricClientRecoverAllPartitionsOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRecoverAllPartitionsOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientRecoverPartitionOptionalParams'
    name: ServiceFabricClientRecoverPartitionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRecoverPartitionOptionalParams
        fullName: ServiceFabricClientRecoverPartitionOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRecoverPartitionOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientRecoverServicePartitionsOptionalParams'
    name: ServiceFabricClientRecoverServicePartitionsOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRecoverServicePartitionsOptionalParams
        fullName: ServiceFabricClientRecoverServicePartitionsOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRecoverServicePartitionsOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientRecoverSystemPartitionsOptionalParams'
    name: ServiceFabricClientRecoverSystemPartitionsOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRecoverSystemPartitionsOptionalParams
        fullName: ServiceFabricClientRecoverSystemPartitionsOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRecoverSystemPartitionsOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientRemoveComposeDeploymentOptionalParams'
    name: ServiceFabricClientRemoveComposeDeploymentOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRemoveComposeDeploymentOptionalParams
        fullName: ServiceFabricClientRemoveComposeDeploymentOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRemoveComposeDeploymentOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientRemoveNodeStateOptionalParams'
    name: ServiceFabricClientRemoveNodeStateOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRemoveNodeStateOptionalParams
        fullName: ServiceFabricClientRemoveNodeStateOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRemoveNodeStateOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientRemoveReplicaOptionalParams'
    name: ServiceFabricClientRemoveReplicaOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRemoveReplicaOptionalParams
        fullName: ServiceFabricClientRemoveReplicaOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRemoveReplicaOptionalParams'
  - uid: '@azure/servicefabric.HealthInformation'
    name: HealthInformation
    spec.typeScript:
      - name: HealthInformation
        fullName: HealthInformation
        uid: '@azure/servicefabric.HealthInformation'
  - uid: '@azure/servicefabric.ServiceFabricClientReportApplicationHealthOptionalParams'
    name: ServiceFabricClientReportApplicationHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportApplicationHealthOptionalParams
        fullName: ServiceFabricClientReportApplicationHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientReportApplicationHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientReportClusterHealthOptionalParams'
    name: ServiceFabricClientReportClusterHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportClusterHealthOptionalParams
        fullName: ServiceFabricClientReportClusterHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientReportClusterHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientReportDeployedApplicationHealthOptionalParams'
    name: ServiceFabricClientReportDeployedApplicationHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportDeployedApplicationHealthOptionalParams
        fullName: ServiceFabricClientReportDeployedApplicationHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientReportDeployedApplicationHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams'
    name: ServiceFabricClientReportDeployedServicePackageHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportDeployedServicePackageHealthOptionalParams
        fullName: ServiceFabricClientReportDeployedServicePackageHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientReportNodeHealthOptionalParams'
    name: ServiceFabricClientReportNodeHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportNodeHealthOptionalParams
        fullName: ServiceFabricClientReportNodeHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientReportNodeHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientReportPartitionHealthOptionalParams'
    name: ServiceFabricClientReportPartitionHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportPartitionHealthOptionalParams
        fullName: ServiceFabricClientReportPartitionHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientReportPartitionHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientReportReplicaHealthOptionalParams'
    name: ServiceFabricClientReportReplicaHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportReplicaHealthOptionalParams
        fullName: ServiceFabricClientReportReplicaHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientReportReplicaHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientReportServiceHealthOptionalParams'
    name: ServiceFabricClientReportServiceHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportServiceHealthOptionalParams
        fullName: ServiceFabricClientReportServiceHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientReportServiceHealthOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientResetPartitionLoadOptionalParams'
    name: ServiceFabricClientResetPartitionLoadOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientResetPartitionLoadOptionalParams
        fullName: ServiceFabricClientResetPartitionLoadOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientResetPartitionLoadOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ResolvedServicePartition>
    name: ResolvedServicePartition>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ResolvedServicePartition
        fullName: ResolvedServicePartition
        uid: '@azure/servicefabric.ResolvedServicePartition'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientResolveServiceOptionalParams'
    name: ServiceFabricClientResolveServiceOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientResolveServiceOptionalParams
        fullName: ServiceFabricClientResolveServiceOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientResolveServiceOptionalParams'
  - uid: '@azure/servicefabric.RestartDeployedCodePackageDescription'
    name: RestartDeployedCodePackageDescription
    spec.typeScript:
      - name: RestartDeployedCodePackageDescription
        fullName: RestartDeployedCodePackageDescription
        uid: '@azure/servicefabric.RestartDeployedCodePackageDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientRestartDeployedCodePackageOptionalParams'
    name: ServiceFabricClientRestartDeployedCodePackageOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRestartDeployedCodePackageOptionalParams
        fullName: ServiceFabricClientRestartDeployedCodePackageOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRestartDeployedCodePackageOptionalParams'
  - uid: '@azure/servicefabric.RestartNodeDescription'
    name: RestartNodeDescription
    spec.typeScript:
      - name: RestartNodeDescription
        fullName: RestartNodeDescription
        uid: '@azure/servicefabric.RestartNodeDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientRestartNodeOptionalParams'
    name: ServiceFabricClientRestartNodeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRestartNodeOptionalParams
        fullName: ServiceFabricClientRestartNodeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRestartNodeOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientRestartReplicaOptionalParams'
    name: ServiceFabricClientRestartReplicaOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRestartReplicaOptionalParams
        fullName: ServiceFabricClientRestartReplicaOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRestartReplicaOptionalParams'
  - uid: '@azure/servicefabric.RestorePartitionDescription'
    name: RestorePartitionDescription
    spec.typeScript:
      - name: RestorePartitionDescription
        fullName: RestorePartitionDescription
        uid: '@azure/servicefabric.RestorePartitionDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientRestorePartitionOptionalParams'
    name: ServiceFabricClientRestorePartitionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRestorePartitionOptionalParams
        fullName: ServiceFabricClientRestorePartitionOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRestorePartitionOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientResumeApplicationBackupOptionalParams'
    name: ServiceFabricClientResumeApplicationBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientResumeApplicationBackupOptionalParams
        fullName: ServiceFabricClientResumeApplicationBackupOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientResumeApplicationBackupOptionalParams'
  - uid: '@azure/servicefabric.ResumeApplicationUpgradeDescription'
    name: ResumeApplicationUpgradeDescription
    spec.typeScript:
      - name: ResumeApplicationUpgradeDescription
        fullName: ResumeApplicationUpgradeDescription
        uid: '@azure/servicefabric.ResumeApplicationUpgradeDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientResumeApplicationUpgradeOptionalParams'
    name: ServiceFabricClientResumeApplicationUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientResumeApplicationUpgradeOptionalParams
        fullName: ServiceFabricClientResumeApplicationUpgradeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientResumeApplicationUpgradeOptionalParams'
  - uid: '@azure/servicefabric.ResumeClusterUpgradeDescription'
    name: ResumeClusterUpgradeDescription
    spec.typeScript:
      - name: ResumeClusterUpgradeDescription
        fullName: ResumeClusterUpgradeDescription
        uid: '@azure/servicefabric.ResumeClusterUpgradeDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientResumeClusterUpgradeOptionalParams'
    name: ServiceFabricClientResumeClusterUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientResumeClusterUpgradeOptionalParams
        fullName: ServiceFabricClientResumeClusterUpgradeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientResumeClusterUpgradeOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientResumePartitionBackupOptionalParams'
    name: ServiceFabricClientResumePartitionBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientResumePartitionBackupOptionalParams
        fullName: ServiceFabricClientResumePartitionBackupOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientResumePartitionBackupOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientResumeServiceBackupOptionalParams'
    name: ServiceFabricClientResumeServiceBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientResumeServiceBackupOptionalParams
        fullName: ServiceFabricClientResumeServiceBackupOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientResumeServiceBackupOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientRollbackApplicationUpgradeOptionalParams'
    name: ServiceFabricClientRollbackApplicationUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRollbackApplicationUpgradeOptionalParams
        fullName: ServiceFabricClientRollbackApplicationUpgradeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRollbackApplicationUpgradeOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientRollbackClusterUpgradeOptionalParams'
    name: ServiceFabricClientRollbackClusterUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRollbackClusterUpgradeOptionalParams
        fullName: ServiceFabricClientRollbackClusterUpgradeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRollbackClusterUpgradeOptionalParams'
  - uid: '@azure/servicefabric.UpgradeOrchestrationServiceState'
    name: UpgradeOrchestrationServiceState
    spec.typeScript:
      - name: UpgradeOrchestrationServiceState
        fullName: UpgradeOrchestrationServiceState
        uid: '@azure/servicefabric.UpgradeOrchestrationServiceState'
  - uid: ServiceCallback<@azure/servicefabric.UpgradeOrchestrationServiceStateSummary>
    name: UpgradeOrchestrationServiceStateSummary>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: UpgradeOrchestrationServiceStateSummary
        fullName: UpgradeOrchestrationServiceStateSummary
        uid: '@azure/servicefabric.UpgradeOrchestrationServiceStateSummary'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams'
    name: ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams
        fullName: ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams'
  - uid: '@azure/servicefabric.ApplicationUpgradeDescription'
    name: ApplicationUpgradeDescription
    spec.typeScript:
      - name: ApplicationUpgradeDescription
        fullName: ApplicationUpgradeDescription
        uid: '@azure/servicefabric.ApplicationUpgradeDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientStartApplicationUpgradeOptionalParams'
    name: ServiceFabricClientStartApplicationUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartApplicationUpgradeOptionalParams
        fullName: ServiceFabricClientStartApplicationUpgradeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStartApplicationUpgradeOptionalParams'
  - uid: '@azure/servicefabric.ChaosParameters'
    name: ChaosParameters
    spec.typeScript:
      - name: ChaosParameters
        fullName: ChaosParameters
        uid: '@azure/servicefabric.ChaosParameters'
  - uid: '@azure/servicefabric.ServiceFabricClientStartChaosOptionalParams'
    name: ServiceFabricClientStartChaosOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartChaosOptionalParams
        fullName: ServiceFabricClientStartChaosOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStartChaosOptionalParams'
  - uid: '@azure/servicefabric.ClusterConfigurationUpgradeDescription'
    name: ClusterConfigurationUpgradeDescription
    spec.typeScript:
      - name: ClusterConfigurationUpgradeDescription
        fullName: ClusterConfigurationUpgradeDescription
        uid: '@azure/servicefabric.ClusterConfigurationUpgradeDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams'
    name: ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams
        fullName: ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams'
  - uid: '@azure/servicefabric.StartClusterUpgradeDescription'
    name: StartClusterUpgradeDescription
    spec.typeScript:
      - name: StartClusterUpgradeDescription
        fullName: StartClusterUpgradeDescription
        uid: '@azure/servicefabric.StartClusterUpgradeDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientStartClusterUpgradeOptionalParams'
    name: ServiceFabricClientStartClusterUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartClusterUpgradeOptionalParams
        fullName: ServiceFabricClientStartClusterUpgradeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStartClusterUpgradeOptionalParams'
  - uid: '@azure/servicefabric.ComposeDeploymentUpgradeDescription'
    name: ComposeDeploymentUpgradeDescription
    spec.typeScript:
      - name: ComposeDeploymentUpgradeDescription
        fullName: ComposeDeploymentUpgradeDescription
        uid: '@azure/servicefabric.ComposeDeploymentUpgradeDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams'
    name: ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams
        fullName: ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientStartDataLossOptionalParams'
    name: ServiceFabricClientStartDataLossOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartDataLossOptionalParams
        fullName: ServiceFabricClientStartDataLossOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStartDataLossOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientStartNodeTransitionOptionalParams'
    name: ServiceFabricClientStartNodeTransitionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartNodeTransitionOptionalParams
        fullName: ServiceFabricClientStartNodeTransitionOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStartNodeTransitionOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientStartPartitionRestartOptionalParams'
    name: ServiceFabricClientStartPartitionRestartOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartPartitionRestartOptionalParams
        fullName: ServiceFabricClientStartPartitionRestartOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStartPartitionRestartOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientStartQuorumLossOptionalParams'
    name: ServiceFabricClientStartQuorumLossOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartQuorumLossOptionalParams
        fullName: ServiceFabricClientStartQuorumLossOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStartQuorumLossOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams'
    name: ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams
        fullName: ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientStopChaosOptionalParams'
    name: ServiceFabricClientStopChaosOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStopChaosOptionalParams
        fullName: ServiceFabricClientStopChaosOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStopChaosOptionalParams'
  - uid: '@azure/servicefabric.PropertyBatchDescriptionList'
    name: PropertyBatchDescriptionList
    spec.typeScript:
      - name: PropertyBatchDescriptionList
        fullName: PropertyBatchDescriptionList
        uid: '@azure/servicefabric.PropertyBatchDescriptionList'
  - uid: '@azure/servicefabric.ServiceFabricClientSubmitPropertyBatchOptionalParams'
    name: ServiceFabricClientSubmitPropertyBatchOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientSubmitPropertyBatchOptionalParams
        fullName: ServiceFabricClientSubmitPropertyBatchOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientSubmitPropertyBatchOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientSuspendApplicationBackupOptionalParams'
    name: ServiceFabricClientSuspendApplicationBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientSuspendApplicationBackupOptionalParams
        fullName: ServiceFabricClientSuspendApplicationBackupOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientSuspendApplicationBackupOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientSuspendPartitionBackupOptionalParams'
    name: ServiceFabricClientSuspendPartitionBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientSuspendPartitionBackupOptionalParams
        fullName: ServiceFabricClientSuspendPartitionBackupOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientSuspendPartitionBackupOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientSuspendServiceBackupOptionalParams'
    name: ServiceFabricClientSuspendServiceBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientSuspendServiceBackupOptionalParams
        fullName: ServiceFabricClientSuspendServiceBackupOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientSuspendServiceBackupOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams'
    name: ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams
        fullName: ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams'
  - uid: '@azure/servicefabric.UnprovisionApplicationTypeDescriptionInfo'
    name: UnprovisionApplicationTypeDescriptionInfo
    spec.typeScript:
      - name: UnprovisionApplicationTypeDescriptionInfo
        fullName: UnprovisionApplicationTypeDescriptionInfo
        uid: '@azure/servicefabric.UnprovisionApplicationTypeDescriptionInfo'
  - uid: '@azure/servicefabric.ServiceFabricClientUnprovisionApplicationTypeOptionalParams'
    name: ServiceFabricClientUnprovisionApplicationTypeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUnprovisionApplicationTypeOptionalParams
        fullName: ServiceFabricClientUnprovisionApplicationTypeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientUnprovisionApplicationTypeOptionalParams'
  - uid: '@azure/servicefabric.UnprovisionFabricDescription'
    name: UnprovisionFabricDescription
    spec.typeScript:
      - name: UnprovisionFabricDescription
        fullName: UnprovisionFabricDescription
        uid: '@azure/servicefabric.UnprovisionFabricDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientUnprovisionClusterOptionalParams'
    name: ServiceFabricClientUnprovisionClusterOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUnprovisionClusterOptionalParams
        fullName: ServiceFabricClientUnprovisionClusterOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientUnprovisionClusterOptionalParams'
  - uid: '@azure/servicefabric.ApplicationUpgradeUpdateDescription'
    name: ApplicationUpgradeUpdateDescription
    spec.typeScript:
      - name: ApplicationUpgradeUpdateDescription
        fullName: ApplicationUpgradeUpdateDescription
        uid: '@azure/servicefabric.ApplicationUpgradeUpdateDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientUpdateApplicationUpgradeOptionalParams'
    name: ServiceFabricClientUpdateApplicationUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUpdateApplicationUpgradeOptionalParams
        fullName: ServiceFabricClientUpdateApplicationUpgradeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientUpdateApplicationUpgradeOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientUpdateBackupPolicyOptionalParams'
    name: ServiceFabricClientUpdateBackupPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUpdateBackupPolicyOptionalParams
        fullName: ServiceFabricClientUpdateBackupPolicyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientUpdateBackupPolicyOptionalParams'
  - uid: '@azure/servicefabric.UpdateClusterUpgradeDescription'
    name: UpdateClusterUpgradeDescription
    spec.typeScript:
      - name: UpdateClusterUpgradeDescription
        fullName: UpdateClusterUpgradeDescription
        uid: '@azure/servicefabric.UpdateClusterUpgradeDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientUpdateClusterUpgradeOptionalParams'
    name: ServiceFabricClientUpdateClusterUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUpdateClusterUpgradeOptionalParams
        fullName: ServiceFabricClientUpdateClusterUpgradeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientUpdateClusterUpgradeOptionalParams'
  - uid: '@azure/servicefabric.RepairTaskUpdateHealthPolicyDescription'
    name: RepairTaskUpdateHealthPolicyDescription
    spec.typeScript:
      - name: RepairTaskUpdateHealthPolicyDescription
        fullName: RepairTaskUpdateHealthPolicyDescription
        uid: '@azure/servicefabric.RepairTaskUpdateHealthPolicyDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientUpdateServiceOptionalParams'
    name: ServiceFabricClientUpdateServiceOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUpdateServiceOptionalParams
        fullName: ServiceFabricClientUpdateServiceOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientUpdateServiceOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientUploadFileOptionalParams'
    name: ServiceFabricClientUploadFileOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUploadFileOptionalParams
        fullName: ServiceFabricClientUploadFileOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientUploadFileOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientUploadFileChunkOptionalParams'
    name: ServiceFabricClientUploadFileChunkOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUploadFileChunkOptionalParams
        fullName: ServiceFabricClientUploadFileChunkOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientUploadFileChunkOptionalParams'