### YamlMime:UniversalReference
ms.openlocfilehash: 22c72faefd43f0429a42377817a2b14111e1a1f3
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 12/13/2018
ms.locfileid: "52054069"
items:
- uid: '@azure/cosmos.Item'
  name: Item
  fullName: Item
  children:
  - '@azure/cosmos.Item.container'
  - '@azure/cosmos.Item.delete'
  - '@azure/cosmos.Item.delete_1'
  - '@azure/cosmos.Item.id'
  - '@azure/cosmos.Item.primaryKey'
  - '@azure/cosmos.Item.read'
  - '@azure/cosmos.Item.read_1'
  - '@azure/cosmos.Item.replace'
  - '@azure/cosmos.Item.replace_1'
  - '@azure/cosmos.Item.url'
  langs:
  - typeScript
  type: class
  summary: Используется для выполнения операций на конкретном элементе.
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.container'
  name: container
  fullName: container
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'container: Container'
    return:
      type:
      - '@azure/cosmos.Container'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.delete'
  name: delete(RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Удалите элемент.
  syntax:
    content: 'function delete(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Дополнительные параметры для запроса, таких как ключ раздела.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.delete_1'
  name: delete(RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Удалите элемент.

    Любой при условии, что тип T, не обязательно принудительно с помощью пакета SDK.

    Может появиться больше или меньше свойств, и именно логика должна обеспечивать его выполнение.
  syntax:
    content: 'function delete<T>(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Дополнительные параметры для запроса, таких как ключ раздела.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.id'
  name: id
  fullName: id
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'id: string'
    return:
      type:
      - string
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.primaryKey'
  name: primaryKey
  fullName: primaryKey
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'primaryKey: string'
    return:
      type:
      - string
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.read'
  name: read(RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Считывание определения элемента.

    Нет схемы, набор элементов JSON. Они могут содержать любое количество пользовательских свойств.
  syntax:
    content: 'function read(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Дополнительные параметры для запроса, таких как ключ раздела.

        Обратите внимание, что если указать ключ секции в объекте параметры, то он будет переопределять первичный ключ на `this.primaryKey`.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.read_1'
  name: read(RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Считывание определения элемента.

    Любой при условии, что тип T, не обязательно принудительно с помощью пакета SDK.

    Может появиться больше или меньше свойств, и именно логика должна обеспечивать его выполнение.

    Если тип T является классом, он не будет передавать `typeof` сравнения, так как он не имеет соответствия прототипа.

    Рекомендуется использовать только интерфейсы.


    Нет схемы, набор элементов JSON. Они могут содержать любое количество пользовательских свойств.
  syntax:
    content: 'function read<T>(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Дополнительные параметры для запроса, таких как ключ раздела.

        Обратите внимание, что если указать ключ секции в объекте параметры, то он будет переопределять первичный ключ на `this.primaryKey`.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.replace'
  name: replace(ItemDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Замените определение элемента.

    Нет схемы, набор элементов JSON. Они могут содержать любое количество пользовательских свойств.
  syntax:
    content: 'function replace(body: ItemDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ItemDefinition'
      description: Определение для замены существующего <xref:Item>в определение с.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Дополнительные параметры для запроса, таких как ключ раздела.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.replace_1'
  name: replace(T, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Замените определение элемента.

    Любой при условии, что тип T, не обязательно принудительно с помощью пакета SDK.

    Может появиться больше или меньше свойств, и именно логика должна обеспечивать его выполнение.


    Нет схемы, набор элементов JSON. Они могут содержать любое количество пользовательских свойств.
  syntax:
    content: 'function replace<T>(body: T, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - T
      description: Определение для замены существующего <xref:Item>в определение с.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Дополнительные параметры для запроса, таких как ключ раздела.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Item.url'
  name: url
  fullName: url
  children: []
  langs:
  - typeScript
  type: property
  summary: Возвращает URL-адрес ссылки на ресурс. Используется для связывания в разрешениях.
  syntax:
    content: 'url: string'
    return:
      type:
      - string
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Container'
  name: Container
  spec.typeScript:
  - name: Container
    fullName: Container
    uid: '@azure/cosmos.Container'
- uid: '@azure/cosmos.RequestOptions'
  name: RequestOptions
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
  name: ItemDefinition>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ItemResponse
    fullName: ItemResponse
    uid: '@azure/cosmos.ItemResponse'
  - name: <
    fullName: <
  - name: ItemDefinition
    fullName: ItemDefinition
    uid: '@azure/cosmos.ItemDefinition'
  - name: '>>'
    fullName: '>>'
- uid: Promise<@azure/cosmos.ItemResponse<T>>
  name: ItemResponse<T>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ItemResponse
    fullName: ItemResponse
    uid: '@azure/cosmos.ItemResponse'
  - name: <T>>
    fullName: <T>>
- uid: '@azure/cosmos.ItemDefinition'
  name: ItemDefinition
  spec.typeScript:
  - name: ItemDefinition
    fullName: ItemDefinition
    uid: '@azure/cosmos.ItemDefinition'
