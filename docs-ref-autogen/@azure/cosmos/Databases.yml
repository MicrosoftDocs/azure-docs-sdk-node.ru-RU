### YamlMime:UniversalReference
ms.openlocfilehash: e9c942e1c15d221260137950bb93d6df02a16008
ms.sourcegitcommit: 87f95d58ec8de16e115bc344efeb084afc346b74
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 08/12/2018
ms.locfileid: "40073189"
items:
- uid: '@azure/cosmos.Databases'
  name: Databases
  fullName: Databases
  children:
  - '@azure/cosmos.Databases.create'
  - '@azure/cosmos.Databases.createIfNotExists'
  - '@azure/cosmos.Databases.constructor'
  - '@azure/cosmos.Databases.query'
  - '@azure/cosmos.Databases.readAll'
  langs:
  - typeScript
  type: class
  summary: Операции для создания новых баз данных и чтения/запроса всех баз данных
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.create'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Отправка запроса для создания базы данных.

    Базы данных управляет пользователями, разрешениями и контейнеры.

    Каждая учетная запись базы данных Azure Cosmos DB поддерживает несколько независимых именованных баз данных, база данных находится логический контейнер для данных.


    Каждая база данных состоит из одного или нескольких контейнеров, в свою очередь, каждая из которых содержит один или несколько документов. Так как базы данных являются ресурс администратора главного ключа службы потребуется для получения доступа и успешно выполнить любое действие, с помощью API-интерфейсы пользователя.
  syntax:
    content: 'function create(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: <xref:DatabaseDefinition> , Представляющий <xref:Database> должен быть создан.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Используйте, чтобы задать параметры, такие как размер страницы ответов, маркеры продолжения и т. д.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.createIfNotExists'
  name: createIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Проверьте, если база данных существует, и если он не создает его.

    Это сделает операцией чтения, на основе идентификатора в `body`, затем, если он не найден, операция создания.

    Базы данных управляет пользователями, разрешениями и контейнеры.

    Каждая учетная запись базы данных Azure Cosmos DB поддерживает несколько независимых именованных баз данных, база данных находится логический контейнер для данных.


    Каждая база данных состоит из одного или нескольких контейнеров, в свою очередь, каждая из которых содержит один или несколько документов. Так как базы данных являются ресурс администратора главного ключа службы потребуется для получения доступа и успешно выполнить любое действие, с помощью API-интерфейсы пользователя.
  syntax:
    content: 'function createIfNotExists(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: <xref:DatabaseDefinition> , Представляющий <xref:Database> должен быть создан.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: "\n"
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.constructor'
  name: Databases
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Databases(client: CosmosClient)'
    parameters:
    - id: client
      type:
      - '@azure/cosmos.CosmosClient'
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.query'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: Запрос всех баз данных.
  syntax:
    content: 'function query(query: string | SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - string | @azure/cosmos.SqlQuerySpec
      description: Настройка запроса для операции. См. в разделе <xref:SqlQuerySpec> Дополнительные сведения о том, как настроить запрос.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Используйте, чтобы задать параметры, такие как размер страницы ответов, маркеры продолжения и т. д.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.readAll'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: Считывает все базы данных.
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Используйте, чтобы задать параметры, такие как размер страницы ответов, маркеры продолжения и т. д.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.CosmosClient'
  spec.typeScript:
  - name: CosmosClient
    fullName: CosmosClient
    uid: '@azure/cosmos.CosmosClient'
- uid: '@azure/cosmos.DatabaseDefinition'
  spec.typeScript:
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.DatabaseResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DatabaseResponse
    fullName: DatabaseResponse
    uid: '@azure/cosmos.DatabaseResponse'
  - name: '>'
    fullName: '>'
- uid: string | @azure/cosmos.SqlQuerySpec
  spec.typeScript:
  - name: 'string | '
    fullName: 'string | '
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
  - name: '>'
    fullName: '>'
