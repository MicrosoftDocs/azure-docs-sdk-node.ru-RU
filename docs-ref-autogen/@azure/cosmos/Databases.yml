### YamlMime:UniversalReference
ms.openlocfilehash: e9c942e1c15d221260137950bb93d6df02a16008
ms.sourcegitcommit: 87f95d58ec8de16e115bc344efeb084afc346b74
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 08/12/2018
ms.locfileid: "40073189"
items:
- uid: '@azure/cosmos.Databases'
  name: Databases
  fullName: Databases
  children:
  - '@azure/cosmos.Databases.create'
  - '@azure/cosmos.Databases.createIfNotExists'
  - '@azure/cosmos.Databases.constructor'
  - '@azure/cosmos.Databases.query'
  - '@azure/cosmos.Databases.readAll'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="0a66f-101">Операции для создания новых баз данных и чтения/запроса всех баз данных</span><span class="sxs-lookup"><span data-stu-id="0a66f-101">Operations for creating new databases, and reading/querying all databases</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.create'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="0a66f-102">Отправка запроса для создания базы данных.</span><span class="sxs-lookup"><span data-stu-id="0a66f-102">Send a request for creating a database.</span></span>

    <span data-ttu-id="0a66f-103">Базы данных управляет пользователями, разрешениями и контейнеры.</span><span class="sxs-lookup"><span data-stu-id="0a66f-103">A database manages users, permissions and a set of containers.</span></span>

    <span data-ttu-id="0a66f-104">Каждая учетная запись базы данных Azure Cosmos DB поддерживает несколько независимых именованных баз данных, база данных находится логический контейнер для данных.</span><span class="sxs-lookup"><span data-stu-id="0a66f-104">Each Azure Cosmos DB Database Account is able to support multiple independent named databases, with the database being the logical container for data.</span></span>


    <span data-ttu-id="0a66f-105">Каждая база данных состоит из одного или нескольких контейнеров, в свою очередь, каждая из которых содержит один или несколько документов.</span><span class="sxs-lookup"><span data-stu-id="0a66f-105">Each Database consists of one or more containers, each of which in turn contain one or more documents.</span></span> <span data-ttu-id="0a66f-106">Так как базы данных являются ресурс администратора главного ключа службы потребуется для получения доступа и успешно выполнить любое действие, с помощью API-интерфейсы пользователя.</span><span class="sxs-lookup"><span data-stu-id="0a66f-106">Since databases are an an administrative resource, the Service Master Key will be required in order to access and successfully complete any action using the User APIs.</span></span>
  syntax:
    content: 'function create(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: <span data-ttu-id="0a66f-107"><xref:DatabaseDefinition> , Представляющий <xref:Database> должен быть создан.</span><span class="sxs-lookup"><span data-stu-id="0a66f-107">The <xref:DatabaseDefinition> that represents the <xref:Database> to be created.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="0a66f-108">Используйте, чтобы задать параметры, такие как размер страницы ответов, маркеры продолжения и т. д.</span><span class="sxs-lookup"><span data-stu-id="0a66f-108">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.createIfNotExists'
  name: createIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="0a66f-109">Проверьте, если база данных существует, и если он не создает его.</span><span class="sxs-lookup"><span data-stu-id="0a66f-109">Check if a database exists, and if it doesn't, create it.</span></span>

    <span data-ttu-id="0a66f-110">Это сделает операцией чтения, на основе идентификатора в `body`, затем, если он не найден, операция создания.</span><span class="sxs-lookup"><span data-stu-id="0a66f-110">This will make a read operation based on the id in the `body`, then if it is not found, a create operation.</span></span>

    <span data-ttu-id="0a66f-111">Базы данных управляет пользователями, разрешениями и контейнеры.</span><span class="sxs-lookup"><span data-stu-id="0a66f-111">A database manages users, permissions and a set of containers.</span></span>

    <span data-ttu-id="0a66f-112">Каждая учетная запись базы данных Azure Cosmos DB поддерживает несколько независимых именованных баз данных, база данных находится логический контейнер для данных.</span><span class="sxs-lookup"><span data-stu-id="0a66f-112">Each Azure Cosmos DB Database Account is able to support multiple independent named databases, with the database being the logical container for data.</span></span>


    <span data-ttu-id="0a66f-113">Каждая база данных состоит из одного или нескольких контейнеров, в свою очередь, каждая из которых содержит один или несколько документов.</span><span class="sxs-lookup"><span data-stu-id="0a66f-113">Each Database consists of one or more containers, each of which in turn contain one or more documents.</span></span> <span data-ttu-id="0a66f-114">Так как базы данных являются ресурс администратора главного ключа службы потребуется для получения доступа и успешно выполнить любое действие, с помощью API-интерфейсы пользователя.</span><span class="sxs-lookup"><span data-stu-id="0a66f-114">Since databases are an an administrative resource, the Service Master Key will be required in order to access and successfully complete any action using the User APIs.</span></span>
  syntax:
    content: 'function createIfNotExists(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: <span data-ttu-id="0a66f-115"><xref:DatabaseDefinition> , Представляющий <xref:Database> должен быть создан.</span><span class="sxs-lookup"><span data-stu-id="0a66f-115">The <xref:DatabaseDefinition> that represents the <xref:Database> to be created.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: "\n"
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.constructor'
  name: Databases
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Databases(client: CosmosClient)'
    parameters:
    - id: client
      type:
      - '@azure/cosmos.CosmosClient'
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.query'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="0a66f-116">Запрос всех баз данных.</span><span class="sxs-lookup"><span data-stu-id="0a66f-116">Queries all databases.</span></span>
  syntax:
    content: 'function query(query: string | SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - string | @azure/cosmos.SqlQuerySpec
      description: <span data-ttu-id="0a66f-117">Настройка запроса для операции.</span><span class="sxs-lookup"><span data-stu-id="0a66f-117">Query configuration for the operation.</span></span> <span data-ttu-id="0a66f-118">См. в разделе <xref:SqlQuerySpec> Дополнительные сведения о том, как настроить запрос.</span><span class="sxs-lookup"><span data-stu-id="0a66f-118">See <xref:SqlQuerySpec> for more info on how to configure a query.</span></span>
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="0a66f-119">Используйте, чтобы задать параметры, такие как размер страницы ответов, маркеры продолжения и т. д.</span><span class="sxs-lookup"><span data-stu-id="0a66f-119">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.readAll'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="0a66f-120">Считывает все базы данных.</span><span class="sxs-lookup"><span data-stu-id="0a66f-120">Reads all databases.</span></span>
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="0a66f-121">Используйте, чтобы задать параметры, такие как размер страницы ответов, маркеры продолжения и т. д.</span><span class="sxs-lookup"><span data-stu-id="0a66f-121">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.CosmosClient'
  spec.typeScript:
  - name: CosmosClient
    fullName: CosmosClient
    uid: '@azure/cosmos.CosmosClient'
- uid: '@azure/cosmos.DatabaseDefinition'
  spec.typeScript:
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.DatabaseResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DatabaseResponse
    fullName: DatabaseResponse
    uid: '@azure/cosmos.DatabaseResponse'
  - name: '>'
    fullName: '>'
- uid: string | @azure/cosmos.SqlQuerySpec
  spec.typeScript:
  - name: 'string | '
    fullName: 'string | '
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
  - name: '>'
    fullName: '>'
