### YamlMime:UniversalReference
ms.openlocfilehash: ef0a15814adb8ac1c36af0e1f26ebfb7d4ea6fca
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 12/13/2018
ms.locfileid: "52062809"
items:
- uid: '@azure/cosmos.QueryIterator'
  name: QueryIterator
  fullName: QueryIterator<T>
  children:
  - '@azure/cosmos.QueryIterator.current'
  - '@azure/cosmos.QueryIterator.executeNext'
  - '@azure/cosmos.QueryIterator.forEach'
  - '@azure/cosmos.QueryIterator.getAsyncIterator'
  - '@azure/cosmos.QueryIterator.hasMoreResults'
  - '@azure/cosmos.QueryIterator.nextItem'
  - '@azure/cosmos.QueryIterator.reset'
  - '@azure/cosmos.QueryIterator.toArray'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="68f41-101">Представляет объект QueryIterator implmenetation веб-канал или ответ на запрос, позволяющий обхода и прохода ответ в службу базы данных Azure Cosmos DB.</span><span class="sxs-lookup"><span data-stu-id="68f41-101">Represents a QueryIterator Object, an implmenetation of feed or query response that enables traversal and iterating over the response in the Azure Cosmos DB database service.</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.current'
  name: current()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="68f41-102">Извлечь текущий элемент на QueryIterator.</span><span class="sxs-lookup"><span data-stu-id="68f41-102">Retrieve the current element on the QueryIterator.</span></span>
  syntax:
    content: function current()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.executeNext'
  name: executeNext()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="68f41-103">Получение следующего пакета веб-канала и передать их в виде массива в функцию</span><span class="sxs-lookup"><span data-stu-id="68f41-103">Retrieve the next batch of the feed and pass them as an array to a function</span></span>
  syntax:
    content: function executeNext()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.forEach'
  name: 'forEach((result: T, headers?: IHeaders, index?: number) => boolean | void)'
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    <span data-ttu-id="68f41-104">Вызывает заданный обратный вызов для каждого элемента, возвращенные из запроса.</span><span class="sxs-lookup"><span data-stu-id="68f41-104">Calls a specified callback for each item returned from the query.</span></span>

    <span data-ttu-id="68f41-105">Выполняется последовательно; каждый обратный вызов блокирует следующего.</span><span class="sxs-lookup"><span data-stu-id="68f41-105">Runs serially; each callback blocks the next.</span></span>
  syntax:
    content: 'function forEach(callback: (result: T, headers?: IHeaders, index?: number) => boolean | void)'
    parameters:
    - id: callback
      type:
      - '(result: T, headers?: IHeaders, index?: number) => boolean | void'
      description: >
        <span data-ttu-id="68f41-106">Заданный обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="68f41-106">Specified callback.</span></span>

        <span data-ttu-id="68f41-107">Тип первого параметра является результатом, тип второго параметра (необязательно) является текущим состоянием объекта заголовки, третий параметр (необязательно) является текущим индексом.</span><span class="sxs-lookup"><span data-stu-id="68f41-107">First param is the result, second param (optional) is the current headers object state, third param (optional) is current index.</span></span>

        <span data-ttu-id="68f41-108">Дальнейшие обратные вызовы не будет вызываться, если один из них приводит значение false.</span><span class="sxs-lookup"><span data-stu-id="68f41-108">No more callbacks will be called if one of them results false.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.getAsyncIterator'
  name: getAsyncIterator()
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="68f41-109">Возвращает асинхронный итератор, который вернет результаты до ее завершения.</span><span class="sxs-lookup"><span data-stu-id="68f41-109">Gets an async iterator that will yield results until completion.</span></span>

    <span data-ttu-id="68f41-110">Примечание. AsyncIterators — это очень новая функция, и может потребоваться использовать polyfils и т.д. Чтобы использовать их в коде.</span><span class="sxs-lookup"><span data-stu-id="68f41-110">NOTE: AsyncIterators are a very new feature and you might need to use polyfils/etc. in order to use them in your code.</span></span>


    <span data-ttu-id="68f41-111">Если вы используете TypeScript, вы можно использовать следующие polyfill, как долго в качестве цели ES6 или более поздней версии и выполняемых в узел 6 или более поздней версии.</span><span class="sxs-lookup"><span data-stu-id="68f41-111">If you're using TypeScript, you can use the following polyfill as long as you target ES6 or higher and are running on Node 6 or higher.</span></span>


    ```typescript

    if (!Symbol || !Symbol.asyncIterator) {
      (Symbol as any).asyncIterator = Symbol.for("Symbol.asyncIterator");
    }

    ```
  syntax:
    content: function getAsyncIterator()
    parameters: []
    return:
      type:
      - AsyncIterable<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.hasMoreResults'
  name: hasMoreResults()
  children: []
  type: method
  langs:
  - typeScript
  summary: ''
  syntax:
    content: function hasMoreResults()
    parameters: []
    return:
      type:
      - boolean
  package: '@azure/cosmos'
  deprecated:
    content: >-
      Instead check if nextItem() or current() returns undefined.


      Determine if there are still remaining resources to processs based on the value of the continuation token or the\

      elements remaining on the current batch in the QueryIterator.
- uid: '@azure/cosmos.QueryIterator.nextItem'
  name: nextItem()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="68f41-112">Выполните указанный функцию на следующий элемент в QueryIterator.</span><span class="sxs-lookup"><span data-stu-id="68f41-112">Execute a provided function on the next element in the QueryIterator.</span></span>
  syntax:
    content: function nextItem()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.reset'
  name: reset()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="68f41-113">Сброс QueryIterator в начало и очистить все ресурсы внутри него</span><span class="sxs-lookup"><span data-stu-id="68f41-113">Reset the QueryIterator to the beginning and clear all the resources inside it</span></span>
  syntax:
    content: function reset()
    parameters: []
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.toArray'
  name: toArray()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="68f41-114">Получить все элементы веб-канала и передать их в виде массива в функцию</span><span class="sxs-lookup"><span data-stu-id="68f41-114">Retrieve all the elements of the feed and pass them as an array to a function</span></span>
  syntax:
    content: function toArray()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T[]>>
  package: '@azure/cosmos'
references:
- uid: Promise<@azure/cosmos.Response<T>>
  name: Response<T>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T>>
    fullName: <T>>
- uid: AsyncIterable<@azure/cosmos.Response<T>>
  name: Response<T>>
  spec.typeScript:
  - name: AsyncIterable<
    fullName: AsyncIterable<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T>>
    fullName: <T>>
- uid: Promise<@azure/cosmos.Response<T[]>>
  name: Response<T[]>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T[]>>
    fullName: <T[]>>
