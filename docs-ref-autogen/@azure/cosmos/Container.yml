### YamlMime:UniversalReference
ms.openlocfilehash: 8d085c8c928b40486992ef118d6155a39853015e
ms.sourcegitcommit: 87f95d58ec8de16e115bc344efeb084afc346b74
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 08/12/2018
ms.locfileid: "40073196"
items:
- uid: '@azure/cosmos.Container'
  name: Container
  fullName: Container
  children:
  - '@azure/cosmos.Container.conflict'
  - '@azure/cosmos.Container.database'
  - '@azure/cosmos.Container.delete'
  - '@azure/cosmos.Container.id'
  - '@azure/cosmos.Container.item'
  - '@azure/cosmos.Container.items'
  - '@azure/cosmos.Container.read'
  - '@azure/cosmos.Container.replace'
  - '@azure/cosmos.Container.storedProcedure'
  - '@azure/cosmos.Container.storedProcedures'
  - '@azure/cosmos.Container.trigger'
  - '@azure/cosmos.Container.triggers'
  - '@azure/cosmos.Container.url'
  - '@azure/cosmos.Container.userDefinedFunction'
  - '@azure/cosmos.Container.userDefinedFunctions'
  langs:
  - typeScript
  type: class
  summary: Операции чтения, замены или удаления контейнера определенной, существующий по идентификатору.
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.conflict'
  name: conflict
  children: []
  type: method
  langs:
  - typeScript
  summary: Используется для чтения, замены или удаления конкретного, существующие <xref:Conflict> по идентификатору. Используйте `.conflicts` для создания новых конфликтов или запросов/чтения все конфликты.
  syntax:
    content: 'function conflict(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Идентификатор <xref:Conflict>.
    return:
      type:
      - '@azure/cosmos.Conflict'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.database'
  name: database
  fullName: database
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'database: Database'
    return:
      type:
      - '@azure/cosmos.Database'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.delete'
  name: delete
  children: []
  type: method
  langs:
  - typeScript
  summary: Удаление контейнера
  syntax:
    content: 'function delete(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.id'
  name: id
  fullName: id
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'id: string'
    return:
      type:
      - string
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.item'
  name: item
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Используется для чтения, замены или удаления конкретного, существующие <xref:Item> по идентификатору. Используйте `.items` для создания новых элементов или запросов/чтения всех элементов.
  syntax:
    content: 'function item(id: string, partitionKey?: string)'
    parameters:
    - id: id
      type:
      - string
      description: Идентификатор <xref:Item>.
    - id: partitionKey
      type:
      - string
      description: Ключ раздела <xref:Item>. (Требуется для секционированных контейнеров).
      optional: true
    return:
      type:
      - '@azure/cosmos.Item'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.items'
  name: items
  fullName: items
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    Операции для создания новых элементов и чтения/запроса все элементы для чтения, замене или удалении существующего элемента, используют `.item(id)`.
  syntax:
    content: 'items: Items'
    return:
      type:
      - '@azure/cosmos.Items'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.read'
  name: read
  children: []
  type: method
  langs:
  - typeScript
  summary: Считывание определения контейнера
  syntax:
    content: 'function read(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.replace'
  name: replace
  children: []
  type: method
  langs:
  - typeScript
  summary: Замените определение контейнера
  syntax:
    content: 'function replace(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: ''
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.storedProcedure'
  name: storedProcedure
  children: []
  type: method
  langs:
  - typeScript
  summary: Используется для чтения, замены или удаления конкретного, существующие <xref:StoredProcedure> по идентификатору. Используйте `.storedProcedures` для создания новых хранимых процедур или запросов/чтения все хранимые процедуры.
  syntax:
    content: 'function storedProcedure(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Идентификатор <xref:StoredProcedure>.
    return:
      type:
      - '@azure/cosmos.StoredProcedure'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.storedProcedures'
  name: storedProcedures
  fullName: storedProcedures
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    Операции для создания новых хранимых процедур и чтения/запроса все хранимые процедуры.

    Для чтения, замены или удаления существующей хранимой процедуры, используйте `.storedProcedure(id)`.
  syntax:
    content: 'storedProcedures: StoredProcedures'
    return:
      type:
      - '@azure/cosmos.StoredProcedures'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.trigger'
  name: trigger
  children: []
  type: method
  langs:
  - typeScript
  summary: Используется для чтения, замены или удаления конкретного, существующие <xref:Trigger> по идентификатору. Используйте `.triggers` для создания новых триггеров или запросов/чтения всех триггеров.
  syntax:
    content: 'function trigger(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Идентификатор <xref:Trigger>.
    return:
      type:
      - '@azure/cosmos.Trigger'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.triggers'
  name: triggers
  fullName: triggers
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    Операции для создания новых триггеров и чтения/запроса всех триггеров.

    Для чтения, замены или удаления существующего триггера, используйте `.trigger(id)`.
  syntax:
    content: 'triggers: Triggers'
    return:
      type:
      - '@azure/cosmos.Triggers'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.url'
  name: url
  fullName: url
  children: []
  langs:
  - typeScript
  type: property
  summary: Возвращает URL-адрес ссылки на ресурс. Используется для связывания в разрешениях.
  syntax:
    content: 'url: string'
    return:
      type:
      - string
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.userDefinedFunction'
  name: userDefinedFunction
  children: []
  type: method
  langs:
  - typeScript
  summary: Используется для чтения, замены или удаления конкретного, существующие <xref:UserDefinedFunction> по идентификатору. Используйте `.userDefinedFunctions` для создания новых определяемых пользователем функций или запросов/чтения все определяемые пользователем функции.
  syntax:
    content: 'function userDefinedFunction(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Идентификатор <xref:UserDefinedFunction>.
    return:
      type:
      - '@azure/cosmos.UserDefinedFunction'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.userDefinedFunctions'
  name: userDefinedFunctions
  fullName: userDefinedFunctions
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    Функции определяются операции для создания нового пользователя и чтения/запросов всех пользователей определенные функции.

    Для чтения, замены или удаления существующей определяемой пользователем функции, используйте `.userDefinedFunction(id)`.
  syntax:
    content: 'userDefinedFunctions: UserDefinedFunctions'
    return:
      type:
      - '@azure/cosmos.UserDefinedFunctions'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Database'
  spec.typeScript:
  - name: Database
    fullName: Database
    uid: '@azure/cosmos.Database'
- uid: '@azure/cosmos.Items'
  spec.typeScript:
  - name: Items
    fullName: Items
    uid: '@azure/cosmos.Items'
- uid: '@azure/cosmos.StoredProcedures'
  spec.typeScript:
  - name: StoredProcedures
    fullName: StoredProcedures
    uid: '@azure/cosmos.StoredProcedures'
- uid: '@azure/cosmos.Triggers'
  spec.typeScript:
  - name: Triggers
    fullName: Triggers
    uid: '@azure/cosmos.Triggers'
- uid: '@azure/cosmos.UserDefinedFunctions'
  spec.typeScript:
  - name: UserDefinedFunctions
    fullName: UserDefinedFunctions
    uid: '@azure/cosmos.UserDefinedFunctions'
- uid: '@azure/cosmos.Conflict'
  spec.typeScript:
  - name: Conflict
    fullName: Conflict
    uid: '@azure/cosmos.Conflict'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ContainerResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContainerResponse
    fullName: ContainerResponse
    uid: '@azure/cosmos.ContainerResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.Item'
  spec.typeScript:
  - name: Item
    fullName: Item
    uid: '@azure/cosmos.Item'
- uid: '@azure/cosmos.ContainerDefinition'
  spec.typeScript:
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
- uid: '@azure/cosmos.StoredProcedure'
  spec.typeScript:
  - name: StoredProcedure
    fullName: StoredProcedure
    uid: '@azure/cosmos.StoredProcedure'
- uid: '@azure/cosmos.Trigger'
  spec.typeScript:
  - name: Trigger
    fullName: Trigger
    uid: '@azure/cosmos.Trigger'
- uid: '@azure/cosmos.UserDefinedFunction'
  spec.typeScript:
  - name: UserDefinedFunction
    fullName: UserDefinedFunction
    uid: '@azure/cosmos.UserDefinedFunction'
