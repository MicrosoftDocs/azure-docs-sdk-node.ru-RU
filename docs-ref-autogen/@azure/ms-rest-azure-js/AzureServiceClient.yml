### YamlMime:UniversalReference
items:
  - uid: '@azure/ms-rest-azure-js.AzureServiceClient'
    name: AzureServiceClient
    fullName: AzureServiceClient
    children:
      - '@azure/ms-rest-azure-js.AzureServiceClient.acceptLanguage'
      - '@azure/ms-rest-azure-js.AzureServiceClient.constructor'
      - '@azure/ms-rest-azure-js.AzureServiceClient.beginLongRunningRequest'
      - '@azure/ms-rest-azure-js.AzureServiceClient.longRunningOperationRetryTimeout'
      - '@azure/ms-rest-azure-js.AzureServiceClient.restoreLROPoller'
      - '@azure/ms-rest-azure-js.AzureServiceClient.sendLongRunningRequest'
      - '@azure/ms-rest-azure-js.AzureServiceClient.sendLRORequest'
      - '@azure/ms-rest-azure-js.AzureServiceClient.sendOperationRequest'
      - '@azure/ms-rest-azure-js.AzureServiceClient.sendRequest'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: ServiceClient
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.AzureServiceClient.acceptLanguage'
    name: acceptLanguage
    fullName: acceptLanguage
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'acceptLanguage: string'
      return:
        type:
          - string
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.AzureServiceClient.constructor'
    name: 'AzureServiceClient(ServiceClientCredentials, AzureServiceClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new AzureServiceClient(credentials: ServiceClientCredentials, options?: AzureServiceClientOptions)'
      parameters:
        - id: credentials
          type:
            - ServiceClientCredentials
          description: ''
        - id: options
          type:
            - '@azure/ms-rest-azure-js.AzureServiceClientOptions'
          description: ''
          optional: true
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.AzureServiceClient.beginLongRunningRequest'
    name: 'beginLongRunningRequest(RequestPrepareOptions | WebResource, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Отправить первоначальный запрос LRO (длительные операции) и получить обратно HttpLongRunningOperationResponse, который предоставляет методы для опроса LRO и проверки, если завершения LRO при выполнении.'
    syntax:
      content: 'function beginLongRunningRequest(request: RequestPrepareOptions | WebResource, options?: RequestOptionsBase)'
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: Объект запроса
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/ms-rest-azure-js.LROPoller>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.AzureServiceClient.longRunningOperationRetryTimeout'
    name: longRunningOperationRetryTimeout
    fullName: longRunningOperationRetryTimeout
    children: []
    langs:
      - typeScript
    type: property
    summary: Время ожидания в секундах для длительных операций повтора. Значение по умолчанию — 30.
    optional: true
    syntax:
      content: 'longRunningOperationRetryTimeout?: number'
      return:
        type:
          - number
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.AzureServiceClient.restoreLROPoller'
    name: restoreLROPoller(LROPollState)
    children: []
    type: method
    langs:
      - typeScript
    summary: Восстановите LROPoller из предоставленного LROPollState. Этот метод может использоваться для повторного создания LROPoller на другом процессе или компьютере.
    syntax:
      content: 'function restoreLROPoller(lroPollState: LROPollState)'
      parameters:
        - id: lroPollState
          type:
            - '@azure/ms-rest-azure-js.LROPollState'
          description: ''
      return:
        type:
          - '@azure/ms-rest-azure-js.LROPoller'
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.AzureServiceClient.sendLongRunningRequest'
    name: 'sendLongRunningRequest(RequestPrepareOptions | WebResource, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Предоставляет механизм для выполнения запроса, которая будет опрашивать и предоставляют результат.'
    syntax:
      content: 'function sendLongRunningRequest(request: RequestPrepareOptions | WebResource, options?: RequestOptionsBase)'
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: Объект запроса
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.AzureServiceClient.sendLRORequest'
    name: 'sendLRORequest(OperationArguments, OperationSpec, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Отправить первоначальный запрос LRO (длительные операции) и получить обратно LROPoller, который предоставляет методы для опроса LRO и проверки, если завершения LRO при выполнении.'
    syntax:
      content: 'function sendLRORequest(operationArguments: OperationArguments, operationSpec: OperationSpec, options?: RequestOptionsBase)'
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: Аргументы операции.
        - id: operationSpec
          type:
            - OperationSpec
          description: Спецификация для операции.
        - id: options
          type:
            - RequestOptionsBase
          description: Дополнительные параметры для отправляться при создании запроса.
          optional: true
      return:
        type:
          - Promise<@azure/ms-rest-azure-js.LROPoller>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.AzureServiceClient.sendOperationRequest'
    name: 'sendOperationRequest(OperationArguments, OperationSpec, ServiceCallback<any>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Отправьте запрос HTTP, который заполняется с помощью предоставленного OperationSpec.'
    syntax:
      content: 'function sendOperationRequest(operationArguments: OperationArguments, operationSpec: OperationSpec, callback?: ServiceCallback<any>)'
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: 'Аргументы, которые будут заполнены шаблонного значения HTTP-запроса из.'
        - id: operationSpec
          type:
            - OperationSpec
          description: 'OperationSpec, используемые для заполнения httpRequest.'
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            Обратный вызов, вызываемый после получения ответа.
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.AzureServiceClient.sendRequest'
    name: sendRequest(RequestPrepareOptions | WebResource)
    children: []
    type: method
    langs:
      - typeScript
    summary: Отправьте предоставленный httpRequest.
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResource)'
      parameters:
        - id: options
          type:
            - RequestPrepareOptions | WebResource
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/ms-rest-azure-js'
references:
  - uid: '@azure/ms-rest-azure-js.AzureServiceClientOptions'
    name: AzureServiceClientOptions
    spec.typeScript:
      - name: AzureServiceClientOptions
        fullName: AzureServiceClientOptions
        uid: '@azure/ms-rest-azure-js.AzureServiceClientOptions'
  - uid: Promise<@azure/ms-rest-azure-js.LROPoller>
    name: LROPoller>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: LROPoller
        fullName: LROPoller
        uid: '@azure/ms-rest-azure-js.LROPoller'
      - name: '>'
        fullName: '>'
  - uid: '@azure/ms-rest-azure-js.LROPollState'
    name: LROPollState
    spec.typeScript:
      - name: LROPollState
        fullName: LROPollState
        uid: '@azure/ms-rest-azure-js.LROPollState'
  - uid: '@azure/ms-rest-azure-js.LROPoller'
    name: LROPoller
    spec.typeScript:
      - name: LROPoller
        fullName: LROPoller
        uid: '@azure/ms-rest-azure-js.LROPoller'