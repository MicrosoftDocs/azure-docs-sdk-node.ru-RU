### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-face.Face'
    name: Face
    fullName: Face
    children:
      - '@azure/cognitiveservices-face.Face.detectWithStream_2'
      - '@azure/cognitiveservices-face.Face.detectWithStream'
      - '@azure/cognitiveservices-face.Face.detectWithStream_1'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_2'
      - '@azure/cognitiveservices-face.Face.detectWithUrl'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_1'
      - '@azure/cognitiveservices-face.Face.constructor'
      - '@azure/cognitiveservices-face.Face.findSimilar_2'
      - '@azure/cognitiveservices-face.Face.findSimilar'
      - '@azure/cognitiveservices-face.Face.findSimilar_1'
      - '@azure/cognitiveservices-face.Face.group'
      - '@azure/cognitiveservices-face.Face.group_2'
      - '@azure/cognitiveservices-face.Face.group_1'
      - '@azure/cognitiveservices-face.Face.identify_2'
      - '@azure/cognitiveservices-face.Face.identify'
      - '@azure/cognitiveservices-face.Face.identify_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    langs:
      - typeScript
    type: class
    summary: 'Класс, представляющий фрагмент.'
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_2'
    name: 'detectWithStream(msRest.HttpRequestBody, FaceDetectWithStreamOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options: FaceDetectWithStreamOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Поток данных изображения.
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream'
    name: 'detectWithStream(msRest.HttpRequestBody, Models.FaceDetectWithStreamOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options?: Models.FaceDetectWithStreamOptionalParams)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Поток данных изображения.
        - id: options
          type:
            - Models.FaceDetectWithStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_1'
    name: 'detectWithStream(msRest.HttpRequestBody, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Поток данных изображения.
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_2'
    name: 'detectWithUrl(string, FaceDetectWithUrlOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, options: FaceDetectWithUrlOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: Публично доступную URL-адрес изображения
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl'
    name: 'detectWithUrl(string, Models.FaceDetectWithUrlOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Обнаружения лиц на изображении, возвращаемое лицевым прямоугольникам и, при необходимости, с faceIds ориентиров и атрибуты.<br />
      * Необязательные параметры, включая faceId ориентиров и атрибуты. Атрибуты включают возраст, пол, headPose, одобрение, facialHair, очков, распознавания эмоций, волосы, состав, перекрытия, "Стандартные", размытия, раскрытия и шума.
      * Средство извлечения лиц вместо реальное изображение, будут храниться на сервере. FaceId это идентификатор функции распознавания лиц, который будет использоваться в [сталкиваются - Идентификация](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [сталкиваются - проверка](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)и [лицо
      - Найти Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Ее действия истекает 24 часа после вызова метода обнаружения.
      * Более высоким качеством изображения лиц означает, что лучше обнаружения и точности распознавания. Попробуйте высокого качества лиц: в анфас, clear и лиц размер составляет 200 x 200 пикселей (100 пикселей между глаза) или больше.
      * Поддерживаются JPEG, PNG, GIF (первый кадр) и формат BMP. Допустимый размер файла — 6 МБ из 1 КБ.
      * Лиц обнаруживаются, если его размер — 36 x 36 к 4096 x 4096 пикселей. Если необходимо выполнить обнаружение лиц очень небольшую, но снимите, попробуйте увеличить размер изображения.
      * До 64 лиц могут быть возвращены для изображения. Лиц ранжируются по размеру прямоугольник лиц от больших к меньшему.
      * Обнаружение лиц предпочитают анфас или практически в анфас лиц. Бывают случаи, которые лица могут быть не обнаружено, например чрезвычайно большого лицевой угол (головы) или что перекрыто или неправильное изображение ориентации.
      * Атрибуты (возраст, пол, headPose, одобрение, facialHair, очков, распознавания эмоций, волосы, состав, перекрытия, "Стандартные", размытия, раскрытия и шума) может оказаться вполне неточным. Значение отклонения HeadPose зарезервированное поле и всегда возвращает 0.
      * Предоставляет значения различных «recognitionModel». Если последующие операции, такие как проверка, идентификация, поиск похожих необходимы, укажите модель распознавания с параметром «recognitionModel». Значение по умолчанию для «recognitionModel» — «recognition_01», если последняя модель необходимо явно указать модели, необходимые в этом параметре. После указания обнаруженных faceIds будет связан с моделью указанного распознавания. Дополнительные сведения см. на [способы указания моделей распознавания](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
    syntax:
      content: 'function detectWithUrl(url: string, options?: Models.FaceDetectWithUrlOptionalParams)'
      parameters:
        - id: url
          type:
            - string
          description: Публично доступную URL-адрес изображения
        - id: options
          type:
            - Models.FaceDetectWithUrlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_1'
    name: 'detectWithUrl(string, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: Публично доступную URL-адрес изображения
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.constructor'
    name: Face(FaceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Создайте фрагмент.
    syntax:
      content: 'new Face(client: FaceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/cognitiveservices-face.FaceClientContext'
          description: |
            Ссылка на клиента службы.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_2'
    name: 'findSimilar(string, FaceFindSimilarOptionalParams, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, options: FaceFindSimilarOptionalParams, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId поверхности запроса. Пользователь должен вызвать лиц — обнаруживать первым допустимым faceId. Обратите внимание, что этот faceId не сохраняется и заканчивается через 24 часа после вызова метода обнаружения'
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar'
    name: 'findSimilar(string, Models.FaceFindSimilarOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Учитывая faceId лиц запроса, чтобы найти похожие лица из массива faceId, список лиц или большой лицевой. faceId массив содержит фрагменты, созданные [лиц — обнаруживать](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), окончания срока действия 24 часа после ее создания. «faceListId» создается путем [FaceList - создание](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b) содержащий persistedFaceIds, не истекает. И «largeFaceListId» создается путем [LargeFaceList - создание](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) содержащий persistedFaceIds, также не истекает. В зависимости от входных данных аналогично возвращаемый список лиц содержит faceIds или persistedFaceIds, упорядоченных по сходству.
      <br/>Найти сходные имеет два режима работы, «matchPerson» и «matchFace». «matchPerson» — это режим по умолчанию, он пытается найти лиц и то же лицо можно с помощью внутренних пороговых значений же лицо. Это полезно для поиска других фотографии человека известная. Обратите внимание, что пустой список, будет возвращено в том случае, если лица не передать внутренние пороговые значения. режим «matchFace» игнорирует же лицо пороговые значения и возвращает отсортированные похожих лиц в любом случае, даже подобия мал. Его можно использовать в случаях, например, поиск выглядящих знаменитостей лиц.
      <br/>Связанные с faceId запроса лиц «recognitionModel» должен быть таким же, как использовать faceId целевого массива, список лиц или списка больших лиц «recognitionModel».
    syntax:
      content: 'function findSimilar(faceId: string, options?: Models.FaceFindSimilarOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId поверхности запроса. Пользователь должен вызвать лиц — обнаруживать первым допустимым faceId. Обратите внимание, что этот faceId не сохраняется и заканчивается через 24 часа после вызова метода обнаружения'
        - id: options
          type:
            - Models.FaceFindSimilarOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_1'
    name: 'findSimilar(string, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId поверхности запроса. Пользователь должен вызвать лиц — обнаруживать первым допустимым faceId. Обратите внимание, что этот faceId не сохраняется и заканчивается через 24 часа после вызова метода обнаружения'
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group'
    name: 'group(string[], msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Разделите по сходству лиц кандидата лиц.<br />
      * Выходные данные — одну или несколько групп несвязанном лиц и messyGroup. Группа лиц содержит лиц, имеющих аналогичные нужна, часто из одного человека. Группы упорядочены по размеру группы, т. е. количество лиц. Обратите внимание на то, что лица, принадлежащих одному человеку может быть разбито на несколько групп, в результате.
      * MessyGroup — это специальные лиц группа, содержащая лиц, которые не удается найти любой аналогичные грани какой из исходного лиц. MessyGroup будет отсутствовать в результате, если всех лиц найти их аналоги.
      * API группы требуется по крайней мере два кандидата лиц и 1000 не более. Мы рекомендуем попробовать [сталкиваются - проверка](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a) при наличии только 2 кандидата лиц.
      * «RecognitionModel», связанные с faceIds лиц запроса должны быть одинаковыми.
    syntax:
      content: 'function group(faceIds: string[], options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: Массив faceId кандидата созданные лиц - обнаружения. Максимальное значение — 1000 лиц
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_2'
    name: 'group(string[], RequestOptionsBase, ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], options: RequestOptionsBase, callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: Массив faceId кандидата созданные лиц - обнаружения. Максимальное значение — 1000 лиц
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_1'
    name: 'group(string[], ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: Массив faceId кандидата созданные лиц - обнаружения. Максимальное значение — 1000 лиц
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_2'
    name: 'identify(string[], FaceIdentifyOptionalParams, ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], options: FaceIdentifyOptionalParams, callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 'Массив запросов сталкивается faceIds, созданные поверхности - обнаружения. Каждая из сторон, определяются независимо друг от друга. Допустимый диапазон faceIds — от [1, 10].'
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify'
    name: 'identify(string[], Models.FaceIdentifyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      1-ко многим код для поиска ближайшего поверхности конкретного запроса пользователя из группы пользователя или группы больших person.
      <br/> Для каждой грани в массиве faceIds определить лиц будет вычислять сходство лиц запроса и всех лиц в группе person (выданный personGroupId) или больших person группе (предоставленное largePersonGroupId), а потенциальных сотрудников для, с которыми сталкиваются рангом с уверенностью подобия. Чтобы подготовить ее для идентификации должны пройти обучение личность пользователя, группы или большого размера группа. См. в разделе, см. в [каждой группе людей — Обучение](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) и [LargePersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4).
      <br/>
      Примечания:<br />
      * Алгоритм позволяет более чем одной грани идентифицировать независимо друг от друга в одном запросе, но не более 10 лиц.
      * Каждый пользователь в группе person лица группу или большого размера может иметь более чем одной грани, но не более чем 248 лиц.
      * Более высоким качеством изображения лиц означает более высокую точность идентификации. Попробуйте высокого качества лиц: в анфас, clear и лиц размер составляет 200 x 200 пикселей (100 пикселей между глаза) или больше.
      * Число возвращаемых потенциальных ограничен maxNumOfCandidatesReturned и confidenceThreshold. Если никто определяется, возвращенный кандидатов будет пустой массив.
      * Попробуйте [лиц - поиск похожих](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) для поиска похожих лиц из списка или большого размера списка лиц лиц вместо группы лица группу или большого размера person.
      * «RecognitionModel», связанные с faceIds запроса лиц должно быть таким же, как используемые person целевых группы или пользователей больших групп «recognitionModel».
    syntax:
      content: 'function identify(faceIds: string[], options?: Models.FaceIdentifyOptionalParams)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 'Массив запросов сталкивается faceIds, созданные поверхности - обнаружения. Каждая из сторон, определяются независимо друг от друга. Допустимый диапазон faceIds — от [1, 10].'
        - id: options
          type:
            - Models.FaceIdentifyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_1'
    name: 'identify(string[], ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 'Массив запросов сталкивается faceIds, созданные поверхности - обнаружения. Каждая из сторон, определяются независимо друг от друга. Допустимый диапазон faceIds — от [1, 10].'
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace'
    name: 'verifyFaceToFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Проверьте ли два портрета принадлежат одному человеку или от того, принадлежит ли одной грани пользователю.
      <br/>
      Примечания:<br />
      * Более высоким качеством изображения лиц означает более высокую точность идентификации. Попробуйте высокого качества лиц: в анфас, clear и лиц размер составляет 200 x 200 пикселей (100 пикселей между глаза) или больше.
      * В сценариях, чувствительных к точности убедитесь рассудительны.
      * «RecognitionModel», связанные с faceIds запроса лиц должно быть таким же, как использовать целевой лиц, пользователей групп или пользователей больших групп «recognitionModel».
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceId1
          type:
            - string
          description: 'faceId первой грани, поступает из лиц — обнаружения'
        - id: faceId2
          type:
            - string
          description: 'faceId второй поверхности, поступает из лиц — обнаружения'
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
    name: 'verifyFaceToFace(string, string, RequestOptionsBase, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options: RequestOptionsBase, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: 'faceId первой грани, поступает из лиц — обнаружения'
        - id: faceId2
          type:
            - string
          description: 'faceId второй поверхности, поступает из лиц — обнаружения'
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
    name: 'verifyFaceToFace(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: 'faceId первой грани, поступает из лиц — обнаружения'
        - id: faceId2
          type:
            - string
          description: 'faceId второй поверхности, поступает из лиц — обнаружения'
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
    name: 'verifyFaceToPerson(string, string, FaceVerifyFaceToPersonOptionalParams, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options: FaceVerifyFaceToPersonOptionalParams, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId поверхности, поступает из лиц — обнаружения'
        - id: personId
          type:
            - string
          description: Укажите конкретным лицом в группу пользователя или группы больших person. personId создается в каждой группе людей человека — создать или LargePersonGroup Person.
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
    name: 'verifyFaceToPerson(string, string, Models.FaceVerifyFaceToPersonOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Проверьте, принадлежат ли два портрета одному человеку. Сравнивает грани идентификатор с идентификатором пользователя'
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options?: Models.FaceVerifyFaceToPersonOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId поверхности, поступает из лиц — обнаружения'
        - id: personId
          type:
            - string
          description: Укажите конкретным лицом в группу пользователя или группы больших person. personId создается в каждой группе людей человека — создать или LargePersonGroup Person.
        - id: options
          type:
            - Models.FaceVerifyFaceToPersonOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    name: 'verifyFaceToPerson(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId поверхности, поступает из лиц — обнаружения'
        - id: personId
          type:
            - string
          description: Укажите конкретным лицом в группу пользователя или группы больших person. personId создается в каждой группе людей человека — создать или LargePersonGroup Person.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
references:
  - uid: '@azure/cognitiveservices-face.FaceClientContext'
    name: FaceClientContext
    spec.typeScript:
      - name: FaceClientContext
        fullName: FaceClientContext
        uid: '@azure/cognitiveservices-face.FaceClientContext'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
    name: 'DetectedFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DetectedFace
        fullName: DetectedFace
        uid: '@azure/cognitiveservices-face.DetectedFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
    name: FaceDetectWithStreamOptionalParams
    spec.typeScript:
      - name: FaceDetectWithStreamOptionalParams
        fullName: FaceDetectWithStreamOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
    name: FaceDetectWithUrlOptionalParams
    spec.typeScript:
      - name: FaceDetectWithUrlOptionalParams
        fullName: FaceDetectWithUrlOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
    name: 'SimilarFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SimilarFace
        fullName: SimilarFace
        uid: '@azure/cognitiveservices-face.SimilarFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
    name: FaceFindSimilarOptionalParams
    spec.typeScript:
      - name: FaceFindSimilarOptionalParams
        fullName: FaceFindSimilarOptionalParams
        uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.GroupResult>
    name: GroupResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: GroupResult
        fullName: GroupResult
        uid: '@azure/cognitiveservices-face.GroupResult'
      - name: '>'
        fullName: '>'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
    name: 'IdentifyResult[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: IdentifyResult
        fullName: IdentifyResult
        uid: '@azure/cognitiveservices-face.IdentifyResult'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
    name: FaceIdentifyOptionalParams
    spec.typeScript:
      - name: FaceIdentifyOptionalParams
        fullName: FaceIdentifyOptionalParams
        uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
    name: VerifyResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: VerifyResult
        fullName: VerifyResult
        uid: '@azure/cognitiveservices-face.VerifyResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
    name: FaceVerifyFaceToPersonOptionalParams
    spec.typeScript:
      - name: FaceVerifyFaceToPersonOptionalParams
        fullName: FaceVerifyFaceToPersonOptionalParams
        uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'