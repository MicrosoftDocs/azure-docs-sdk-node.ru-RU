### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-face.Face'
    name: Face
    fullName: Face
    children:
      - '@azure/cognitiveservices-face.Face.detectWithStream_2'
      - '@azure/cognitiveservices-face.Face.detectWithStream'
      - '@azure/cognitiveservices-face.Face.detectWithStream_1'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_2'
      - '@azure/cognitiveservices-face.Face.detectWithUrl'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_1'
      - '@azure/cognitiveservices-face.Face.constructor'
      - '@azure/cognitiveservices-face.Face.findSimilar_2'
      - '@azure/cognitiveservices-face.Face.findSimilar'
      - '@azure/cognitiveservices-face.Face.findSimilar_1'
      - '@azure/cognitiveservices-face.Face.group'
      - '@azure/cognitiveservices-face.Face.group_2'
      - '@azure/cognitiveservices-face.Face.group_1'
      - '@azure/cognitiveservices-face.Face.identify_2'
      - '@azure/cognitiveservices-face.Face.identify'
      - '@azure/cognitiveservices-face.Face.identify_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    langs:
      - typeScript
    type: class
    summary: '<span data-ttu-id="36e8f-101">Класс, представляющий фрагмент.</span><span class="sxs-lookup"><span data-stu-id="36e8f-101">Class representing a Face.</span></span>'
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_2'
    name: 'detectWithStream(msRest.HttpRequestBody, FaceDetectWithStreamOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options: FaceDetectWithStreamOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: <span data-ttu-id="36e8f-102">Поток данных изображения.</span><span class="sxs-lookup"><span data-stu-id="36e8f-102">An image stream.</span></span>
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
          description: <span data-ttu-id="36e8f-103">Возможно использование необязательных параметров</span><span class="sxs-lookup"><span data-stu-id="36e8f-103">The optional parameters</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            <span data-ttu-id="36e8f-104">Функция обратного вызова</span><span class="sxs-lookup"><span data-stu-id="36e8f-104">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream'
    name: 'detectWithStream(msRest.HttpRequestBody, Models.FaceDetectWithStreamOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="36e8f-105">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="36e8f-105">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>'
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options?: Models.FaceDetectWithStreamOptionalParams)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: <span data-ttu-id="36e8f-106">Поток данных изображения.</span><span class="sxs-lookup"><span data-stu-id="36e8f-106">An image stream.</span></span>
        - id: options
          type:
            - Models.FaceDetectWithStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_1'
    name: 'detectWithStream(msRest.HttpRequestBody, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: <span data-ttu-id="36e8f-107">Поток данных изображения.</span><span class="sxs-lookup"><span data-stu-id="36e8f-107">An image stream.</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            <span data-ttu-id="36e8f-108">Функция обратного вызова</span><span class="sxs-lookup"><span data-stu-id="36e8f-108">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_2'
    name: 'detectWithUrl(string, FaceDetectWithUrlOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, options: FaceDetectWithUrlOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: <span data-ttu-id="36e8f-109">Публично доступную URL-адрес изображения</span><span class="sxs-lookup"><span data-stu-id="36e8f-109">Publicly reachable URL of an image</span></span>
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
          description: <span data-ttu-id="36e8f-110">Возможно использование необязательных параметров</span><span class="sxs-lookup"><span data-stu-id="36e8f-110">The optional parameters</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            <span data-ttu-id="36e8f-111">Функция обратного вызова</span><span class="sxs-lookup"><span data-stu-id="36e8f-111">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl'
    name: 'detectWithUrl(string, Models.FaceDetectWithUrlOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="36e8f-112">Обнаружения лиц на изображении, возвращаемое лицевым прямоугольникам и, при необходимости, с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="36e8f-112">Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.</span></span><br />
      * <span data-ttu-id="36e8f-113">Необязательные параметры, включая faceId ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="36e8f-113">Optional parameters including faceId, landmarks, and attributes.</span></span> <span data-ttu-id="36e8f-114">Атрибуты включают возраст, пол, headPose, одобрение, facialHair, очков, распознавания эмоций, волосы, состав, перекрытия, "Стандартные", размытия, раскрытия и шума.</span><span class="sxs-lookup"><span data-stu-id="36e8f-114">Attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise.</span></span>
      * <span data-ttu-id="36e8f-115">Средство извлечения лиц вместо реальное изображение, будут храниться на сервере.</span><span class="sxs-lookup"><span data-stu-id="36e8f-115">The extracted face feature, instead of the actual image, will be stored on server.</span></span> <span data-ttu-id="36e8f-116">FaceId это идентификатор функции распознавания лиц, который будет использоваться в [сталкиваются - Идентификация](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [сталкиваются - проверка](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)и [лицо</span><span class="sxs-lookup"><span data-stu-id="36e8f-116">The faceId is an identifier of the face feature and will be used in [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [Face - Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a), and [Face</span></span>
      - <span data-ttu-id="36e8f-117">Найти Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).</span><span class="sxs-lookup"><span data-stu-id="36e8f-117">Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).</span></span> <span data-ttu-id="36e8f-118">Ее действия истекает 24 часа после вызова метода обнаружения.</span><span class="sxs-lookup"><span data-stu-id="36e8f-118">It will expire 24 hours after the detection call.</span></span>
      * <span data-ttu-id="36e8f-119">Более высоким качеством изображения лиц означает, что лучше обнаружения и точности распознавания.</span><span class="sxs-lookup"><span data-stu-id="36e8f-119">Higher face image quality means better detection and recognition precision.</span></span> <span data-ttu-id="36e8f-120">Попробуйте высокого качества лиц: в анфас, clear и лиц размер составляет 200 x 200 пикселей (100 пикселей между глаза) или больше.</span><span class="sxs-lookup"><span data-stu-id="36e8f-120">Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.</span></span>
      * <span data-ttu-id="36e8f-121">Поддерживаются JPEG, PNG, GIF (первый кадр) и формат BMP.</span><span class="sxs-lookup"><span data-stu-id="36e8f-121">JPEG, PNG, GIF (the first frame), and BMP format are supported.</span></span> <span data-ttu-id="36e8f-122">Допустимый размер файла — 6 МБ из 1 КБ.</span><span class="sxs-lookup"><span data-stu-id="36e8f-122">The allowed image file size is from 1KB to 6MB.</span></span>
      * <span data-ttu-id="36e8f-123">Лиц обнаруживаются, если его размер — 36 x 36 к 4096 x 4096 пикселей.</span><span class="sxs-lookup"><span data-stu-id="36e8f-123">Faces are detectable when its size is 36x36 to 4096x4096 pixels.</span></span> <span data-ttu-id="36e8f-124">Если необходимо выполнить обнаружение лиц очень небольшую, но снимите, попробуйте увеличить размер изображения.</span><span class="sxs-lookup"><span data-stu-id="36e8f-124">If need to detect very small but clear faces, please try to enlarge the input image.</span></span>
      * <span data-ttu-id="36e8f-125">До 64 лиц могут быть возвращены для изображения.</span><span class="sxs-lookup"><span data-stu-id="36e8f-125">Up to 64 faces can be returned for an image.</span></span> <span data-ttu-id="36e8f-126">Лиц ранжируются по размеру прямоугольник лиц от больших к меньшему.</span><span class="sxs-lookup"><span data-stu-id="36e8f-126">Faces are ranked by face rectangle size from large to small.</span></span>
      * <span data-ttu-id="36e8f-127">Обнаружение лиц предпочитают анфас или практически в анфас лиц.</span><span class="sxs-lookup"><span data-stu-id="36e8f-127">Face detector prefer frontal and near-frontal faces.</span></span> <span data-ttu-id="36e8f-128">Бывают случаи, которые лица могут быть не обнаружено, например чрезвычайно большого лицевой угол (головы) или что перекрыто или неправильное изображение ориентации.</span><span class="sxs-lookup"><span data-stu-id="36e8f-128">There are cases that faces may not be detected, e.g. exceptionally large face angles (head-pose) or being occluded, or wrong image orientation.</span></span>
      * <span data-ttu-id="36e8f-129">Атрибуты (возраст, пол, headPose, одобрение, facialHair, очков, распознавания эмоций, волосы, состав, перекрытия, "Стандартные", размытия, раскрытия и шума) может оказаться вполне неточным.</span><span class="sxs-lookup"><span data-stu-id="36e8f-129">Attributes (age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise) may not be perfectly accurate.</span></span> <span data-ttu-id="36e8f-130">Значение отклонения HeadPose зарезервированное поле и всегда возвращает 0.</span><span class="sxs-lookup"><span data-stu-id="36e8f-130">HeadPose's pitch value is a reserved field and will always return 0.</span></span>
      * <span data-ttu-id="36e8f-131">Предоставляет значения различных «recognitionModel».</span><span class="sxs-lookup"><span data-stu-id="36e8f-131">Different 'recognitionModel' values are provided.</span></span> <span data-ttu-id="36e8f-132">Если последующие операции, такие как проверка, идентификация, поиск похожих необходимы, укажите модель распознавания с параметром «recognitionModel».</span><span class="sxs-lookup"><span data-stu-id="36e8f-132">If follow-up operations like Verify, Identify, Find Similar are needed, please specify the recognition model with 'recognitionModel' parameter.</span></span> <span data-ttu-id="36e8f-133">Значение по умолчанию для «recognitionModel» — «recognition_01», если последняя модель необходимо явно указать модели, необходимые в этом параметре.</span><span class="sxs-lookup"><span data-stu-id="36e8f-133">The default value for 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in this parameter.</span></span> <span data-ttu-id="36e8f-134">После указания обнаруженных faceIds будет связан с моделью указанного распознавания.</span><span class="sxs-lookup"><span data-stu-id="36e8f-134">Once specified, the detected faceIds will be associated with the specified recognition model.</span></span> <span data-ttu-id="36e8f-135">Дополнительные сведения см. на [способы указания моделей распознавания](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)</span><span class="sxs-lookup"><span data-stu-id="36e8f-135">More details, please refer to [How to specify a recognition model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)</span></span>
    syntax:
      content: 'function detectWithUrl(url: string, options?: Models.FaceDetectWithUrlOptionalParams)'
      parameters:
        - id: url
          type:
            - string
          description: <span data-ttu-id="36e8f-136">Публично доступную URL-адрес изображения</span><span class="sxs-lookup"><span data-stu-id="36e8f-136">Publicly reachable URL of an image</span></span>
        - id: options
          type:
            - Models.FaceDetectWithUrlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_1'
    name: 'detectWithUrl(string, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: <span data-ttu-id="36e8f-137">Публично доступную URL-адрес изображения</span><span class="sxs-lookup"><span data-stu-id="36e8f-137">Publicly reachable URL of an image</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            <span data-ttu-id="36e8f-138">Функция обратного вызова</span><span class="sxs-lookup"><span data-stu-id="36e8f-138">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.constructor'
    name: Face(FaceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: <span data-ttu-id="36e8f-139">Создайте фрагмент.</span><span class="sxs-lookup"><span data-stu-id="36e8f-139">Create a Face.</span></span>
    syntax:
      content: 'new Face(client: FaceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/cognitiveservices-face.FaceClientContext'
          description: |
            <span data-ttu-id="36e8f-140">Ссылка на клиента службы.</span><span class="sxs-lookup"><span data-stu-id="36e8f-140">Reference to the service client.</span></span>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_2'
    name: 'findSimilar(string, FaceFindSimilarOptionalParams, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, options: FaceFindSimilarOptionalParams, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: '<span data-ttu-id="36e8f-141">FaceId поверхности запроса.</span><span class="sxs-lookup"><span data-stu-id="36e8f-141">FaceId of the query face.</span></span> <span data-ttu-id="36e8f-142">Пользователь должен вызвать лиц — обнаруживать первым допустимым faceId.</span><span class="sxs-lookup"><span data-stu-id="36e8f-142">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="36e8f-143">Обратите внимание, что этот faceId не сохраняется и заканчивается через 24 часа после вызова метода обнаружения</span><span class="sxs-lookup"><span data-stu-id="36e8f-143">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>'
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
          description: <span data-ttu-id="36e8f-144">Возможно использование необязательных параметров</span><span class="sxs-lookup"><span data-stu-id="36e8f-144">The optional parameters</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            <span data-ttu-id="36e8f-145">Функция обратного вызова</span><span class="sxs-lookup"><span data-stu-id="36e8f-145">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar'
    name: 'findSimilar(string, Models.FaceFindSimilarOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="36e8f-146">Учитывая faceId лиц запроса, чтобы найти похожие лица из массива faceId, список лиц или большой лицевой.</span><span class="sxs-lookup"><span data-stu-id="36e8f-146">Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face list.</span></span> <span data-ttu-id="36e8f-147">faceId массив содержит фрагменты, созданные [лиц — обнаруживать](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), окончания срока действия 24 часа после ее создания.</span><span class="sxs-lookup"><span data-stu-id="36e8f-147">faceId array contains the faces created by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), which will expire 24 hours after creation.</span></span> <span data-ttu-id="36e8f-148">«faceListId» создается путем [FaceList - создание](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b) содержащий persistedFaceIds, не истекает.</span><span class="sxs-lookup"><span data-stu-id="36e8f-148">A "faceListId" is created by [FaceList - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b) containing persistedFaceIds that will not expire.</span></span> <span data-ttu-id="36e8f-149">И «largeFaceListId» создается путем [LargeFaceList - создание](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) содержащий persistedFaceIds, также не истекает.</span><span class="sxs-lookup"><span data-stu-id="36e8f-149">And a "largeFaceListId" is created by [LargeFaceList - Create](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) containing persistedFaceIds that will also not expire.</span></span> <span data-ttu-id="36e8f-150">В зависимости от входных данных аналогично возвращаемый список лиц содержит faceIds или persistedFaceIds, упорядоченных по сходству.</span><span class="sxs-lookup"><span data-stu-id="36e8f-150">Depending on the input the returned similar faces list contains faceIds or persistedFaceIds ranked by similarity.</span></span>
      <br/><span data-ttu-id="36e8f-151">Найти сходные имеет два режима работы, «matchPerson» и «matchFace».</span><span class="sxs-lookup"><span data-stu-id="36e8f-151">Find similar has two working modes, "matchPerson" and "matchFace".</span></span> <span data-ttu-id="36e8f-152">«matchPerson» — это режим по умолчанию, он пытается найти лиц и то же лицо можно с помощью внутренних пороговых значений же лицо.</span><span class="sxs-lookup"><span data-stu-id="36e8f-152">"matchPerson" is the default mode that it tries to find faces of the same person as possible by using internal same-person thresholds.</span></span> <span data-ttu-id="36e8f-153">Это полезно для поиска других фотографии человека известная.</span><span class="sxs-lookup"><span data-stu-id="36e8f-153">It is useful to find a known person's other photos.</span></span> <span data-ttu-id="36e8f-154">Обратите внимание, что пустой список, будет возвращено в том случае, если лица не передать внутренние пороговые значения.</span><span class="sxs-lookup"><span data-stu-id="36e8f-154">Note that an empty list will be returned if no faces pass the internal thresholds.</span></span> <span data-ttu-id="36e8f-155">режим «matchFace» игнорирует же лицо пороговые значения и возвращает отсортированные похожих лиц в любом случае, даже подобия мал.</span><span class="sxs-lookup"><span data-stu-id="36e8f-155">"matchFace" mode ignores same-person thresholds and returns ranked similar faces anyway, even the similarity is low.</span></span> <span data-ttu-id="36e8f-156">Его можно использовать в случаях, например, поиск выглядящих знаменитостей лиц.</span><span class="sxs-lookup"><span data-stu-id="36e8f-156">It can be used in the cases like searching celebrity-looking faces.</span></span>
      <br/><span data-ttu-id="36e8f-157">Связанные с faceId запроса лиц «recognitionModel» должен быть таким же, как использовать faceId целевого массива, список лиц или списка больших лиц «recognitionModel».</span><span class="sxs-lookup"><span data-stu-id="36e8f-157">The 'recognitionModel' associated with the query face's faceId should be the same as the 'recognitionModel' used by the target faceId array, face list or large face list.</span></span>
    syntax:
      content: 'function findSimilar(faceId: string, options?: Models.FaceFindSimilarOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: '<span data-ttu-id="36e8f-158">FaceId поверхности запроса.</span><span class="sxs-lookup"><span data-stu-id="36e8f-158">FaceId of the query face.</span></span> <span data-ttu-id="36e8f-159">Пользователь должен вызвать лиц — обнаруживать первым допустимым faceId.</span><span class="sxs-lookup"><span data-stu-id="36e8f-159">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="36e8f-160">Обратите внимание, что этот faceId не сохраняется и заканчивается через 24 часа после вызова метода обнаружения</span><span class="sxs-lookup"><span data-stu-id="36e8f-160">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>'
        - id: options
          type:
            - Models.FaceFindSimilarOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_1'
    name: 'findSimilar(string, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: '<span data-ttu-id="36e8f-161">FaceId поверхности запроса.</span><span class="sxs-lookup"><span data-stu-id="36e8f-161">FaceId of the query face.</span></span> <span data-ttu-id="36e8f-162">Пользователь должен вызвать лиц — обнаруживать первым допустимым faceId.</span><span class="sxs-lookup"><span data-stu-id="36e8f-162">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="36e8f-163">Обратите внимание, что этот faceId не сохраняется и заканчивается через 24 часа после вызова метода обнаружения</span><span class="sxs-lookup"><span data-stu-id="36e8f-163">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>'
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            <span data-ttu-id="36e8f-164">Функция обратного вызова</span><span class="sxs-lookup"><span data-stu-id="36e8f-164">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group'
    name: 'group(string[], msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="36e8f-165">Разделите по сходству лиц кандидата лиц.</span><span class="sxs-lookup"><span data-stu-id="36e8f-165">Divide candidate faces into groups based on face similarity.</span></span><br />
      * <span data-ttu-id="36e8f-166">Выходные данные — одну или несколько групп несвязанном лиц и messyGroup.</span><span class="sxs-lookup"><span data-stu-id="36e8f-166">The output is one or more disjointed face groups and a messyGroup.</span></span> <span data-ttu-id="36e8f-167">Группа лиц содержит лиц, имеющих аналогичные нужна, часто из одного человека.</span><span class="sxs-lookup"><span data-stu-id="36e8f-167">A face group contains faces that have similar looking, often of the same person.</span></span> <span data-ttu-id="36e8f-168">Группы упорядочены по размеру группы, т. е. количество лиц.</span><span class="sxs-lookup"><span data-stu-id="36e8f-168">Face groups are ranked by group size, i.e. number of faces.</span></span> <span data-ttu-id="36e8f-169">Обратите внимание на то, что лица, принадлежащих одному человеку может быть разбито на несколько групп, в результате.</span><span class="sxs-lookup"><span data-stu-id="36e8f-169">Notice that faces belonging to a same person might be split into several groups in the result.</span></span>
      * <span data-ttu-id="36e8f-170">MessyGroup — это специальные лиц группа, содержащая лиц, которые не удается найти любой аналогичные грани какой из исходного лиц.</span><span class="sxs-lookup"><span data-stu-id="36e8f-170">MessyGroup is a special face group containing faces that cannot find any similar counterpart face from original faces.</span></span> <span data-ttu-id="36e8f-171">MessyGroup будет отсутствовать в результате, если всех лиц найти их аналоги.</span><span class="sxs-lookup"><span data-stu-id="36e8f-171">The messyGroup will not appear in the result if all faces found their counterparts.</span></span>
      * <span data-ttu-id="36e8f-172">API группы требуется по крайней мере два кандидата лиц и 1000 не более.</span><span class="sxs-lookup"><span data-stu-id="36e8f-172">Group API needs at least 2 candidate faces and 1000 at most.</span></span> <span data-ttu-id="36e8f-173">Мы рекомендуем попробовать [сталкиваются - проверка](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a) при наличии только 2 кандидата лиц.</span><span class="sxs-lookup"><span data-stu-id="36e8f-173">We suggest to try [Face - Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a) when you only have 2 candidate faces.</span></span>
      * <span data-ttu-id="36e8f-174">«RecognitionModel», связанные с faceIds лиц запроса должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="36e8f-174">The 'recognitionModel' associated with the query faces' faceIds should be the same.</span></span>
    syntax:
      content: 'function group(faceIds: string[], options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: <span data-ttu-id="36e8f-175">Массив faceId кандидата созданные лиц - обнаружения.</span><span class="sxs-lookup"><span data-stu-id="36e8f-175">Array of candidate faceId created by Face - Detect.</span></span> <span data-ttu-id="36e8f-176">Максимальное значение — 1000 лиц</span><span class="sxs-lookup"><span data-stu-id="36e8f-176">The maximum is 1000 faces</span></span>
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_2'
    name: 'group(string[], RequestOptionsBase, ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], options: RequestOptionsBase, callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: <span data-ttu-id="36e8f-177">Массив faceId кандидата созданные лиц - обнаружения.</span><span class="sxs-lookup"><span data-stu-id="36e8f-177">Array of candidate faceId created by Face - Detect.</span></span> <span data-ttu-id="36e8f-178">Максимальное значение — 1000 лиц</span><span class="sxs-lookup"><span data-stu-id="36e8f-178">The maximum is 1000 faces</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: <span data-ttu-id="36e8f-179">Возможно использование необязательных параметров</span><span class="sxs-lookup"><span data-stu-id="36e8f-179">The optional parameters</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            <span data-ttu-id="36e8f-180">Функция обратного вызова</span><span class="sxs-lookup"><span data-stu-id="36e8f-180">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_1'
    name: 'group(string[], ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: <span data-ttu-id="36e8f-181">Массив faceId кандидата созданные лиц - обнаружения.</span><span class="sxs-lookup"><span data-stu-id="36e8f-181">Array of candidate faceId created by Face - Detect.</span></span> <span data-ttu-id="36e8f-182">Максимальное значение — 1000 лиц</span><span class="sxs-lookup"><span data-stu-id="36e8f-182">The maximum is 1000 faces</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            <span data-ttu-id="36e8f-183">Функция обратного вызова</span><span class="sxs-lookup"><span data-stu-id="36e8f-183">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_2'
    name: 'identify(string[], FaceIdentifyOptionalParams, ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], options: FaceIdentifyOptionalParams, callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: '<span data-ttu-id="36e8f-184">Массив запросов сталкивается faceIds, созданные поверхности - обнаружения.</span><span class="sxs-lookup"><span data-stu-id="36e8f-184">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="36e8f-185">Каждая из сторон, определяются независимо друг от друга.</span><span class="sxs-lookup"><span data-stu-id="36e8f-185">Each of the faces are identified independently.</span></span> <span data-ttu-id="36e8f-186">Допустимый диапазон faceIds — от [1, 10].</span><span class="sxs-lookup"><span data-stu-id="36e8f-186">The valid number of faceIds is between [1, 10].</span></span>'
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
          description: <span data-ttu-id="36e8f-187">Возможно использование необязательных параметров</span><span class="sxs-lookup"><span data-stu-id="36e8f-187">The optional parameters</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            <span data-ttu-id="36e8f-188">Функция обратного вызова</span><span class="sxs-lookup"><span data-stu-id="36e8f-188">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify'
    name: 'identify(string[], Models.FaceIdentifyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="36e8f-189">1-ко многим код для поиска ближайшего поверхности конкретного запроса пользователя из группы пользователя или группы больших person.</span><span class="sxs-lookup"><span data-stu-id="36e8f-189">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
      <br/> <span data-ttu-id="36e8f-190">Для каждой грани в массиве faceIds определить лиц будет вычислять сходство лиц запроса и всех лиц в группе person (выданный personGroupId) или больших person группе (предоставленное largePersonGroupId), а потенциальных сотрудников для, с которыми сталкиваются рангом с уверенностью подобия.</span><span class="sxs-lookup"><span data-stu-id="36e8f-190">For each face in the faceIds array, Face Identify will compute similarities between the query face and all the faces in the person group (given by personGroupId) or large person group (given by largePersonGroupId), and return candidate person(s) for that face ranked by similarity confidence.</span></span> <span data-ttu-id="36e8f-191">Чтобы подготовить ее для идентификации должны пройти обучение личность пользователя, группы или большого размера группа.</span><span class="sxs-lookup"><span data-stu-id="36e8f-191">The person group/large person group should be trained to make it ready for identification.</span></span> <span data-ttu-id="36e8f-192">См. в разделе, см. в [каждой группе людей — Обучение](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) и [LargePersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4).</span><span class="sxs-lookup"><span data-stu-id="36e8f-192">See more in [PersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) and [LargePersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4).</span></span>
      <br/>
      <span data-ttu-id="36e8f-193">Примечания:</span><span class="sxs-lookup"><span data-stu-id="36e8f-193">Remarks:</span></span><br />
      * <span data-ttu-id="36e8f-194">Алгоритм позволяет более чем одной грани идентифицировать независимо друг от друга в одном запросе, но не более 10 лиц.</span><span class="sxs-lookup"><span data-stu-id="36e8f-194">The algorithm allows more than one face to be identified independently at the same request, but no more than 10 faces.</span></span>
      * <span data-ttu-id="36e8f-195">Каждый пользователь в группе person лица группу или большого размера может иметь более чем одной грани, но не более чем 248 лиц.</span><span class="sxs-lookup"><span data-stu-id="36e8f-195">Each person in the person group/large person group could have more than one face, but no more than 248 faces.</span></span>
      * <span data-ttu-id="36e8f-196">Более высоким качеством изображения лиц означает более высокую точность идентификации.</span><span class="sxs-lookup"><span data-stu-id="36e8f-196">Higher face image quality means better identification precision.</span></span> <span data-ttu-id="36e8f-197">Попробуйте высокого качества лиц: в анфас, clear и лиц размер составляет 200 x 200 пикселей (100 пикселей между глаза) или больше.</span><span class="sxs-lookup"><span data-stu-id="36e8f-197">Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.</span></span>
      * <span data-ttu-id="36e8f-198">Число возвращаемых потенциальных ограничен maxNumOfCandidatesReturned и confidenceThreshold.</span><span class="sxs-lookup"><span data-stu-id="36e8f-198">Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold.</span></span> <span data-ttu-id="36e8f-199">Если никто определяется, возвращенный кандидатов будет пустой массив.</span><span class="sxs-lookup"><span data-stu-id="36e8f-199">If no person is identified, the returned candidates will be an empty array.</span></span>
      * <span data-ttu-id="36e8f-200">Попробуйте [лиц - поиск похожих](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) для поиска похожих лиц из списка или большого размера списка лиц лиц вместо группы лица группу или большого размера person.</span><span class="sxs-lookup"><span data-stu-id="36e8f-200">Try [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) when you need to find similar faces from a face list/large face list instead of a person group/large person group.</span></span>
      * <span data-ttu-id="36e8f-201">«RecognitionModel», связанные с faceIds запроса лиц должно быть таким же, как используемые person целевых группы или пользователей больших групп «recognitionModel».</span><span class="sxs-lookup"><span data-stu-id="36e8f-201">The 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by the target person group or large person group.</span></span>
    syntax:
      content: 'function identify(faceIds: string[], options?: Models.FaceIdentifyOptionalParams)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: '<span data-ttu-id="36e8f-202">Массив запросов сталкивается faceIds, созданные поверхности - обнаружения.</span><span class="sxs-lookup"><span data-stu-id="36e8f-202">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="36e8f-203">Каждая из сторон, определяются независимо друг от друга.</span><span class="sxs-lookup"><span data-stu-id="36e8f-203">Each of the faces are identified independently.</span></span> <span data-ttu-id="36e8f-204">Допустимый диапазон faceIds — от [1, 10].</span><span class="sxs-lookup"><span data-stu-id="36e8f-204">The valid number of faceIds is between [1, 10].</span></span>'
        - id: options
          type:
            - Models.FaceIdentifyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_1'
    name: 'identify(string[], ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: '<span data-ttu-id="36e8f-205">Массив запросов сталкивается faceIds, созданные поверхности - обнаружения.</span><span class="sxs-lookup"><span data-stu-id="36e8f-205">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="36e8f-206">Каждая из сторон, определяются независимо друг от друга.</span><span class="sxs-lookup"><span data-stu-id="36e8f-206">Each of the faces are identified independently.</span></span> <span data-ttu-id="36e8f-207">Допустимый диапазон faceIds — от [1, 10].</span><span class="sxs-lookup"><span data-stu-id="36e8f-207">The valid number of faceIds is between [1, 10].</span></span>'
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            <span data-ttu-id="36e8f-208">Функция обратного вызова</span><span class="sxs-lookup"><span data-stu-id="36e8f-208">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace'
    name: 'verifyFaceToFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="36e8f-209">Проверьте ли два портрета принадлежат одному человеку или от того, принадлежит ли одной грани пользователю.</span><span class="sxs-lookup"><span data-stu-id="36e8f-209">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
      <br/>
      <span data-ttu-id="36e8f-210">Примечания:</span><span class="sxs-lookup"><span data-stu-id="36e8f-210">Remarks:</span></span><br />
      * <span data-ttu-id="36e8f-211">Более высоким качеством изображения лиц означает более высокую точность идентификации.</span><span class="sxs-lookup"><span data-stu-id="36e8f-211">Higher face image quality means better identification precision.</span></span> <span data-ttu-id="36e8f-212">Попробуйте высокого качества лиц: в анфас, clear и лиц размер составляет 200 x 200 пикселей (100 пикселей между глаза) или больше.</span><span class="sxs-lookup"><span data-stu-id="36e8f-212">Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.</span></span>
      * <span data-ttu-id="36e8f-213">В сценариях, чувствительных к точности убедитесь рассудительны.</span><span class="sxs-lookup"><span data-stu-id="36e8f-213">For the scenarios that are sensitive to accuracy please make your own judgment.</span></span>
      * <span data-ttu-id="36e8f-214">«RecognitionModel», связанные с faceIds запроса лиц должно быть таким же, как использовать целевой лиц, пользователей групп или пользователей больших групп «recognitionModel».</span><span class="sxs-lookup"><span data-stu-id="36e8f-214">The 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by the target face, person group or large person group.</span></span>
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceId1
          type:
            - string
          description: '<span data-ttu-id="36e8f-215">faceId первой грани, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="36e8f-215">FaceId of the first face, comes from Face - Detect</span></span>'
        - id: faceId2
          type:
            - string
          description: '<span data-ttu-id="36e8f-216">faceId второй поверхности, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="36e8f-216">FaceId of the second face, comes from Face - Detect</span></span>'
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
    name: 'verifyFaceToFace(string, string, RequestOptionsBase, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options: RequestOptionsBase, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: '<span data-ttu-id="36e8f-217">faceId первой грани, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="36e8f-217">FaceId of the first face, comes from Face - Detect</span></span>'
        - id: faceId2
          type:
            - string
          description: '<span data-ttu-id="36e8f-218">faceId второй поверхности, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="36e8f-218">FaceId of the second face, comes from Face - Detect</span></span>'
        - id: options
          type:
            - RequestOptionsBase
          description: <span data-ttu-id="36e8f-219">Возможно использование необязательных параметров</span><span class="sxs-lookup"><span data-stu-id="36e8f-219">The optional parameters</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            <span data-ttu-id="36e8f-220">Функция обратного вызова</span><span class="sxs-lookup"><span data-stu-id="36e8f-220">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
    name: 'verifyFaceToFace(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: '<span data-ttu-id="36e8f-221">faceId первой грани, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="36e8f-221">FaceId of the first face, comes from Face - Detect</span></span>'
        - id: faceId2
          type:
            - string
          description: '<span data-ttu-id="36e8f-222">faceId второй поверхности, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="36e8f-222">FaceId of the second face, comes from Face - Detect</span></span>'
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            <span data-ttu-id="36e8f-223">Функция обратного вызова</span><span class="sxs-lookup"><span data-stu-id="36e8f-223">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
    name: 'verifyFaceToPerson(string, string, FaceVerifyFaceToPersonOptionalParams, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options: FaceVerifyFaceToPersonOptionalParams, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: '<span data-ttu-id="36e8f-224">FaceId поверхности, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="36e8f-224">FaceId of the face, comes from Face - Detect</span></span>'
        - id: personId
          type:
            - string
          description: <span data-ttu-id="36e8f-225">Укажите конкретным лицом в группу пользователя или группы больших person.</span><span class="sxs-lookup"><span data-stu-id="36e8f-225">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="36e8f-226">personId создается в каждой группе людей человека — создать или LargePersonGroup Person.</span><span class="sxs-lookup"><span data-stu-id="36e8f-226">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
          description: <span data-ttu-id="36e8f-227">Возможно использование необязательных параметров</span><span class="sxs-lookup"><span data-stu-id="36e8f-227">The optional parameters</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            <span data-ttu-id="36e8f-228">Функция обратного вызова</span><span class="sxs-lookup"><span data-stu-id="36e8f-228">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
    name: 'verifyFaceToPerson(string, string, Models.FaceVerifyFaceToPersonOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="36e8f-229">Проверьте, принадлежат ли два портрета одному человеку.</span><span class="sxs-lookup"><span data-stu-id="36e8f-229">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="36e8f-230">Сравнивает грани идентификатор с идентификатором пользователя</span><span class="sxs-lookup"><span data-stu-id="36e8f-230">Compares a face Id with a Person Id</span></span>'
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options?: Models.FaceVerifyFaceToPersonOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: '<span data-ttu-id="36e8f-231">FaceId поверхности, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="36e8f-231">FaceId of the face, comes from Face - Detect</span></span>'
        - id: personId
          type:
            - string
          description: <span data-ttu-id="36e8f-232">Укажите конкретным лицом в группу пользователя или группы больших person.</span><span class="sxs-lookup"><span data-stu-id="36e8f-232">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="36e8f-233">personId создается в каждой группе людей человека — создать или LargePersonGroup Person.</span><span class="sxs-lookup"><span data-stu-id="36e8f-233">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
        - id: options
          type:
            - Models.FaceVerifyFaceToPersonOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    name: 'verifyFaceToPerson(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: '<span data-ttu-id="36e8f-234">FaceId поверхности, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="36e8f-234">FaceId of the face, comes from Face - Detect</span></span>'
        - id: personId
          type:
            - string
          description: <span data-ttu-id="36e8f-235">Укажите конкретным лицом в группу пользователя или группы больших person.</span><span class="sxs-lookup"><span data-stu-id="36e8f-235">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="36e8f-236">personId создается в каждой группе людей человека — создать или LargePersonGroup Person.</span><span class="sxs-lookup"><span data-stu-id="36e8f-236">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            <span data-ttu-id="36e8f-237">Функция обратного вызова</span><span class="sxs-lookup"><span data-stu-id="36e8f-237">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
references:
  - uid: '@azure/cognitiveservices-face.FaceClientContext'
    name: FaceClientContext
    spec.typeScript:
      - name: FaceClientContext
        fullName: FaceClientContext
        uid: '@azure/cognitiveservices-face.FaceClientContext'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
    name: 'DetectedFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DetectedFace
        fullName: DetectedFace
        uid: '@azure/cognitiveservices-face.DetectedFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
    name: FaceDetectWithStreamOptionalParams
    spec.typeScript:
      - name: FaceDetectWithStreamOptionalParams
        fullName: FaceDetectWithStreamOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
    name: FaceDetectWithUrlOptionalParams
    spec.typeScript:
      - name: FaceDetectWithUrlOptionalParams
        fullName: FaceDetectWithUrlOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
    name: 'SimilarFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SimilarFace
        fullName: SimilarFace
        uid: '@azure/cognitiveservices-face.SimilarFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
    name: FaceFindSimilarOptionalParams
    spec.typeScript:
      - name: FaceFindSimilarOptionalParams
        fullName: FaceFindSimilarOptionalParams
        uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.GroupResult>
    name: GroupResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: GroupResult
        fullName: GroupResult
        uid: '@azure/cognitiveservices-face.GroupResult'
      - name: '>'
        fullName: '>'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
    name: 'IdentifyResult[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: IdentifyResult
        fullName: IdentifyResult
        uid: '@azure/cognitiveservices-face.IdentifyResult'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
    name: FaceIdentifyOptionalParams
    spec.typeScript:
      - name: FaceIdentifyOptionalParams
        fullName: FaceIdentifyOptionalParams
        uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
    name: VerifyResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: VerifyResult
        fullName: VerifyResult
        uid: '@azure/cognitiveservices-face.VerifyResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
    name: FaceVerifyFaceToPersonOptionalParams
    spec.typeScript:
      - name: FaceVerifyFaceToPersonOptionalParams
        fullName: FaceVerifyFaceToPersonOptionalParams
        uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'