### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations'
    name: LargeFaceListOperations
    fullName: LargeFaceListOperations
    children:
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.create_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.create'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.create_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.get_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.get'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.get_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getFace'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getFace_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getFace_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.constructor'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.list_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.list'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.list_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.train'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.train_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.train_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.update_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.update'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.update_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace_1'
    langs:
      - typeScript
    type: class
    summary: 'Класс, представляющий LargeFaceListOperations.'
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_2'
    name: 'addFaceFromStream(string, msRest.HttpRequestBody, LargeFaceListAddFaceFromStreamOptionalParams, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromStream(largeFaceListId: string, image: msRest.HttpRequestBody, options: LargeFaceListAddFaceFromStreamOptionalParams, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Поток данных изображения.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListAddFaceFromStreamOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream'
    name: 'addFaceFromStream(string, msRest.HttpRequestBody, Models.LargeFaceListAddFaceFromStreamOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Добавьте фрагмент к списку указанный большой лицевой до 1 000 000 лиц.
      <br /> Для работы с изображением содержит несколько лиц, входной лиц можно указать в качестве образа с прямоугольником targetFace. Он возвращает persistedFaceId, представляющий добавленный лиц. Изображение не будут сохранены. Только компонент извлеченные лиц, которые будут храниться на сервере, пока не [LargeFaceList лиц - удалить](/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4) или [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) вызывается.
      <br /> Примечание persistedFaceId отличается от созданных faceId [лиц — обнаруживать](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
      * Более высоким качеством изображения лиц означает более высокую точность распознавания. Попробуйте высокого качества лиц: в анфас, clear и лиц размер составляет 200 x 200 пикселей (100 пикселей между глаза) или больше.
      * Поддерживаются JPEG, PNG, GIF (первый кадр) и формат BMP. Допустимый размер файла — 6 МБ из 1 КБ.
      * прямоугольник «targetFace» должен содержать одной грани. Ноль или несколько лиц будет рассматриваться как ошибка. Если предоставленный «targetFace» прямоугольник не возвращен из [лиц — обнаруживать](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), нет никакой гарантии, для обнаружения и успешно добавить начертание шрифта.
      * За пределы размера обнаруживаемых лиц (36 x 36-4096 x 4096 пикселей) больших occlusions головы или больших приведет к ошибкам.
      * Добавление или удаление лиц с тем же список лиц обрабатываются последовательно и с разных лиц списки являются в параллельном режиме.
      * Размер минимальное обнаруживаемых лиц — 36 x 36 пикселей изображения не больше 1920 x 1080 пикселей.
      Изображения с размерами, выше, чем 1920 x 1080 пикселей понадобится пропорционально большего размера минимальное лиц.
      * Можно указать значения различных «detectionModel». Использовать и сравнения моделей обнаружения см. в статье [способы указания модели обнаружения](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
      | Модель | Рекомендуемое использование-case(s) |
      | ---------- | -------- |
      | «detection_01»: | В модели обнаружения по умолчанию для [LargeFaceList - Добавление
      Face](/docs/Services/563879b61984550e40cbbe8d/Operations/5a158c10d2de3616c086f2d3). Рекомендуем использовать для практически обнаружение лиц в анфас. Для сценариев с чрезвычайно большого угол (головы) лица, перекрыто лиц или неправильное изображение ориентации лиц в таких случаях могут не обнаруживаться. | | «detection_02»: | Модель обнаружения, выпущенная в 2019 может с повышенную точность, особенно для небольших, сторона и становится нечетким лиц. | Квота:
      * Квота освободить уровня подписки: 1000 лиц в списке больших лиц.
      * Квота подписки уровня S0: 1 000 000 лиц в списке больших лиц.
    syntax:
      content: 'function addFaceFromStream(largeFaceListId: string, image: msRest.HttpRequestBody, options?: Models.LargeFaceListAddFaceFromStreamOptionalParams)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Поток данных изображения.
        - id: options
          type:
            - Models.LargeFaceListAddFaceFromStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_1'
    name: 'addFaceFromStream(string, msRest.HttpRequestBody, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromStream(largeFaceListId: string, image: msRest.HttpRequestBody, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Поток данных изображения.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_2'
    name: 'addFaceFromUrl(string, string, LargeFaceListAddFaceFromUrlOptionalParams, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromUrl(largeFaceListId: string, url: string, options: LargeFaceListAddFaceFromUrlOptionalParams, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: url
          type:
            - string
          description: Публично доступную URL-адрес изображения
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListAddFaceFromUrlOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl'
    name: 'addFaceFromUrl(string, string, Models.LargeFaceListAddFaceFromUrlOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Добавьте фрагмент к списку указанный большой лицевой до 1 000 000 лиц.
      <br /> Для работы с изображением содержит несколько лиц, входной лиц можно указать в качестве образа с прямоугольником targetFace. Он возвращает persistedFaceId, представляющий добавленный лиц. Изображение не будут сохранены. Только компонент извлеченные лиц, которые будут храниться на сервере, пока не [LargeFaceList лиц - удалить](/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4) или [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) вызывается.
      <br /> Примечание persistedFaceId отличается от созданных faceId [лиц — обнаруживать](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
      * Более высоким качеством изображения лиц означает более высокую точность распознавания. Попробуйте высокого качества лиц: в анфас, clear и лиц размер составляет 200 x 200 пикселей (100 пикселей между глаза) или больше.
      * Поддерживаются JPEG, PNG, GIF (первый кадр) и формат BMP. Допустимый размер файла — 6 МБ из 1 КБ.
      * прямоугольник «targetFace» должен содержать одной грани. Ноль или несколько лиц будет рассматриваться как ошибка. Если предоставленный «targetFace» прямоугольник не возвращен из [лиц — обнаруживать](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), нет никакой гарантии, для обнаружения и успешно добавить начертание шрифта.
      * За пределы размера обнаруживаемых лиц (36 x 36-4096 x 4096 пикселей) больших occlusions головы или больших приведет к ошибкам.
      * Добавление или удаление лиц с тем же список лиц обрабатываются последовательно и с разных лиц списки являются в параллельном режиме.
      * Размер минимальное обнаруживаемых лиц — 36 x 36 пикселей изображения не больше 1920 x 1080 пикселей.
      Изображения с размерами, выше, чем 1920 x 1080 пикселей понадобится пропорционально большего размера минимальное лиц.
      * Можно указать значения различных «detectionModel». Использовать и сравнения моделей обнаружения см. в статье [способы указания модели обнаружения](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
      | Модель | Рекомендуемое использование-case(s) |
      | ---------- | -------- |
      | «detection_01»: | В модели обнаружения по умолчанию для [LargeFaceList - Добавление
      Face](/docs/Services/563879b61984550e40cbbe8d/Operations/5a158c10d2de3616c086f2d3). Рекомендуем использовать для практически обнаружение лиц в анфас. Для сценариев с чрезвычайно большого угол (головы) лица, перекрыто лиц или неправильное изображение ориентации лиц в таких случаях могут не обнаруживаться. | | «detection_02»: | Модель обнаружения, выпущенная в 2019 может с повышенную точность, особенно для небольших, сторона и становится нечетким лиц. | Квота:
      * Квота освободить уровня подписки: 1000 лиц в списке больших лиц.
      * Квота подписки уровня S0: 1 000 000 лиц в списке больших лиц.
    syntax:
      content: 'function addFaceFromUrl(largeFaceListId: string, url: string, options?: Models.LargeFaceListAddFaceFromUrlOptionalParams)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: url
          type:
            - string
          description: Публично доступную URL-адрес изображения
        - id: options
          type:
            - Models.LargeFaceListAddFaceFromUrlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_1'
    name: 'addFaceFromUrl(string, string, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromUrl(largeFaceListId: string, url: string, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: url
          type:
            - string
          description: Публично доступную URL-адрес изображения
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.create_2'
    name: 'create(string, LargeFaceListCreateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function create(largeFaceListId: string, options: LargeFaceListCreateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListCreateOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.create'
    name: 'create(string, Models.LargeFaceListCreateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Создание списка пустой большой лиц с пользовательской largeFaceListId, именем, необязательно userData и recognitionModel.
      <br /> Список большой лицевой список лиц, до 1 000 000 лиц и используемые [лиц - поиск похожих](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
      <br /> После создания, пользователь должен использовать [LargeFaceList лиц — добавить](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) для импорта фрагменты и [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) его для подготовки к [лиц - поиск похожих](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Изображение не будут сохранены. Только компоненты извлеченные лиц хранятся на сервере, пока не [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) вызывается.
      <br /> Найти подобный используется для сценария, например для поиска по принципу знаменитостей лиц, аналогичные лиц фильтрации, или как света способом сталкиваются идентификации. Но если фактическое использование для идентификации пользователя, используйте [каждой группе людей](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) /
      [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) и [сталкиваются - Идентификация](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
      <br/>«recognitionModel» должно быть указано для связи с данным списком больших лиц. Значение по умолчанию для «recognitionModel» — «recognition_01», если последней модели необходимо явно указать модели, необходимые в этом параметре. Новые лица, которые добавляются в существующий список большой лицевой будет использовать модель распознавания, которая уже связана с коллекцией. Невозможно обновить существующие функции распознавания лиц в списке больших лиц к функциям, извлеченным в ходе другая версия модель распознавания.
      * «recognition_01»: Стандартная модель распознавания [LargeFaceList - создание](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc). Все эти списки больших лиц, созданных до марта 2019 связанные с этой моделью распознавания.
      * «recognition_02»: Модель распознавания, выпущенную в марте 2019 г. «recognition_02» рекомендуется, так как его общая точность улучшена по сравнению с «recognition_01».
      Квоту списка больших лиц:
      * Квота освободить уровня подписки: 64 лиц больших списков.
      * Квота подписки уровня S0: 1 000 000 списки больших лиц.
    syntax:
      content: 'function create(largeFaceListId: string, options?: Models.LargeFaceListCreateOptionalParams)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: options
          type:
            - Models.LargeFaceListCreateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.create_1'
    name: 'create(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function create(largeFaceListId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace'
    name: 'deleteFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Удалите фрагмент из списка больших лиц, указанный largeFaceListId и persistedFaceId.
      <br /> Добавление или удаление лиц из одного списка большой лицевой обрабатываются последовательно и с различных больших лиц, которые параллельно работают списки.
    syntax:
      content: 'function deleteFace(largeFaceListId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: persistedFaceId
          type:
            - string
          description: Идентификатор ссылки на определенный persistedFaceId существующей поверхности.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace_2'
    name: 'deleteFace(string, string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteFace(largeFaceListId: string, persistedFaceId: string, options: RequestOptionsBase, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: persistedFaceId
          type:
            - string
          description: Идентификатор ссылки на определенный persistedFaceId существующей поверхности.
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace_1'
    name: 'deleteFace(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteFace(largeFaceListId: string, persistedFaceId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: persistedFaceId
          type:
            - string
          description: Идентификатор ссылки на определенный persistedFaceId существующей поверхности.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod'
    name: 'deleteMethod(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Удаление указанного большого лиц списка.
    syntax:
      content: 'function deleteMethod(largeFaceListId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod_2'
    name: 'deleteMethod(string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(largeFaceListId: string, options: RequestOptionsBase, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod_1'
    name: 'deleteMethod(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(largeFaceListId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.get_2'
    name: 'get(string, LargeFaceListGetOptionalParams, ServiceCallback<LargeFaceList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(largeFaceListId: string, options: LargeFaceListGetOptionalParams, callback: ServiceCallback<LargeFaceList>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListGetOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.LargeFaceList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.LargeFaceListGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.get'
    name: 'get(string, Models.LargeFaceListGetOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Получение списка больших лиц largeFaceListId, имени, userData и recognitionModel.'
    syntax:
      content: 'function get(largeFaceListId: string, options?: Models.LargeFaceListGetOptionalParams)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: options
          type:
            - Models.LargeFaceListGetOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.get_1'
    name: 'get(string, ServiceCallback<LargeFaceList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(largeFaceListId: string, callback: ServiceCallback<LargeFaceList>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.LargeFaceList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.LargeFaceListGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getFace'
    name: 'getFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Получить сведения о сохраненных лиц, (как указано в persistedFaceId и его принадлежность largeFaceListId).'
    syntax:
      content: 'function getFace(largeFaceListId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: persistedFaceId
          type:
            - string
          description: Идентификатор ссылки на определенный persistedFaceId существующей поверхности.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListGetFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getFace_2'
    name: 'getFace(string, string, RequestOptionsBase, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getFace(largeFaceListId: string, persistedFaceId: string, options: RequestOptionsBase, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: persistedFaceId
          type:
            - string
          description: Идентификатор ссылки на определенный persistedFaceId существующей поверхности.
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.LargeFaceListGetFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getFace_1'
    name: 'getFace(string, string, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getFace(largeFaceListId: string, persistedFaceId: string, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: persistedFaceId
          type:
            - string
          description: Идентификатор ссылки на определенный persistedFaceId существующей поверхности.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.LargeFaceListGetFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus'
    name: 'getTrainingStatus(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Получить состояние обучение списка больших лиц ("завершенные" или "постоянная").
    syntax:
      content: 'function getTrainingStatus(largeFaceListId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListGetTrainingStatusResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_2'
    name: 'getTrainingStatus(string, RequestOptionsBase, ServiceCallback<TrainingStatus>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getTrainingStatus(largeFaceListId: string, options: RequestOptionsBase, callback: ServiceCallback<TrainingStatus>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.TrainingStatus>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.LargeFaceListGetTrainingStatusResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_1'
    name: 'getTrainingStatus(string, ServiceCallback<TrainingStatus>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getTrainingStatus(largeFaceListId: string, callback: ServiceCallback<TrainingStatus>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.TrainingStatus>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.LargeFaceListGetTrainingStatusResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.constructor'
    name: LargeFaceListOperations(FaceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Создайте LargeFaceListOperations.
    syntax:
      content: 'new LargeFaceListOperations(client: FaceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/cognitiveservices-face.FaceClientContext'
          description: |
            Ссылка на клиента службы.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.list_2'
    name: 'list(LargeFaceListListOptionalParams, ServiceCallback<LargeFaceList[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(options: LargeFaceListListOptionalParams, callback: ServiceCallback<LargeFaceList[]>)'
      parameters:
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.LargeFaceList[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.LargeFaceListListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.list'
    name: list(Models.LargeFaceListListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Список сведений списки большой лицевой largeFaceListId "," имя "," userData "и" recognitionModel. <br
      />
      Для получения сведений лиц внутри используйте largeFaceList [лиц LargeFaceList - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)<br />
      * Списки большой лицевой хранятся в алфавитном порядке по largeFaceListId.
      * параметр «start» (строка, необязательный) — это largeFaceListId предоставляемый пользователем значение, возвращаемое что записей больше идентификаторы, сравнения строк. «start» устанавливаются пустыми, чтобы указать после возврата из первого элемента.
      * параметр «top» (int, необязательный) указывает число возвращаемых записей. В одном вызове может быть возвращено максимум 1000 элементов. Чтобы получить более, можно указать «start» с идентификатором последнего возвращенного элемента текущего вызова.
      <br />
      Например, всего 5 больших людей списке: «list1»,..., «list5».
      <br /> "start=&top=" will return all 5 lists.
      <br /> "start=&top=2" will return "list1", "list2".
      <br /> "start=list2&top=3" will return "list3", "list4", "list5".
    syntax:
      content: 'function list(options?: Models.LargeFaceListListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.LargeFaceListListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.list_1'
    name: 'list(ServiceCallback<LargeFaceList[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(callback: ServiceCallback<LargeFaceList[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.LargeFaceList[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.LargeFaceListListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces_2'
    name: 'listFaces(string, LargeFaceListListFacesOptionalParams, ServiceCallback<PersistedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listFaces(largeFaceListId: string, options: LargeFaceListListFacesOptionalParams, callback: ServiceCallback<PersistedFace[]>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListListFacesOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.PersistedFace[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.LargeFaceListListFacesResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces'
    name: 'listFaces(string, Models.LargeFaceListListFacesOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Список всех лиц в списке больших лиц и получить сведения о лиц (включая userData и persistedFaceIds зарегистрированных лиц поверхности).
    syntax:
      content: 'function listFaces(largeFaceListId: string, options?: Models.LargeFaceListListFacesOptionalParams)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: options
          type:
            - Models.LargeFaceListListFacesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListListFacesResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces_1'
    name: 'listFaces(string, ServiceCallback<PersistedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listFaces(largeFaceListId: string, callback: ServiceCallback<PersistedFace[]>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.PersistedFace[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.LargeFaceListListFacesResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.train'
    name: 'train(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Задачей обучения списка больших лиц в очередь, немедленный запуск задачи обучения.'
    syntax:
      content: 'function train(largeFaceListId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.train_2'
    name: 'train(string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function train(largeFaceListId: string, options: RequestOptionsBase, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.train_1'
    name: 'train(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function train(largeFaceListId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.update_2'
    name: 'update(string, LargeFaceListUpdateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(largeFaceListId: string, options: LargeFaceListUpdateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListUpdateOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.update'
    name: 'update(string, Models.LargeFaceListUpdateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Обновите сведения о больших лиц списка.
    syntax:
      content: 'function update(largeFaceListId: string, options?: Models.LargeFaceListUpdateOptionalParams)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: options
          type:
            - Models.LargeFaceListUpdateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.update_1'
    name: 'update(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(largeFaceListId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace_2'
    name: 'updateFace(string, string, LargeFaceListUpdateFaceOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateFace(largeFaceListId: string, persistedFaceId: string, options: LargeFaceListUpdateFaceOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: persistedFaceId
          type:
            - string
          description: Идентификатор ссылки на определенный persistedFaceId существующей поверхности.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListUpdateFaceOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace'
    name: 'updateFace(string, string, Models.LargeFaceListUpdateFaceOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Обновите поле userData сохраненных лиц.
    syntax:
      content: 'function updateFace(largeFaceListId: string, persistedFaceId: string, options?: Models.LargeFaceListUpdateFaceOptionalParams)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: persistedFaceId
          type:
            - string
          description: Идентификатор ссылки на определенный persistedFaceId существующей поверхности.
        - id: options
          type:
            - Models.LargeFaceListUpdateFaceOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace_1'
    name: 'updateFace(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateFace(largeFaceListId: string, persistedFaceId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Идентификатор ссылки на список определенного большого лиц.
        - id: persistedFaceId
          type:
            - string
          description: Идентификатор ссылки на определенный persistedFaceId существующей поверхности.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
references:
  - uid: '@azure/cognitiveservices-face.FaceClientContext'
    name: FaceClientContext
    spec.typeScript:
      - name: FaceClientContext
        fullName: FaceClientContext
        uid: '@azure/cognitiveservices-face.FaceClientContext'
  - uid: ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
    name: PersistedFace>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PersistedFace
        fullName: PersistedFace
        uid: '@azure/cognitiveservices-face.PersistedFace'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.LargeFaceListAddFaceFromStreamOptionalParams'
    name: LargeFaceListAddFaceFromStreamOptionalParams
    spec.typeScript:
      - name: LargeFaceListAddFaceFromStreamOptionalParams
        fullName: LargeFaceListAddFaceFromStreamOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListAddFaceFromStreamOptionalParams'
  - uid: '@azure/cognitiveservices-face.LargeFaceListAddFaceFromUrlOptionalParams'
    name: LargeFaceListAddFaceFromUrlOptionalParams
    spec.typeScript:
      - name: LargeFaceListAddFaceFromUrlOptionalParams
        fullName: LargeFaceListAddFaceFromUrlOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListAddFaceFromUrlOptionalParams'
  - uid: '@azure/cognitiveservices-face.LargeFaceListCreateOptionalParams'
    name: LargeFaceListCreateOptionalParams
    spec.typeScript:
      - name: LargeFaceListCreateOptionalParams
        fullName: LargeFaceListCreateOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListCreateOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.LargeFaceList>
    name: LargeFaceList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: LargeFaceList
        fullName: LargeFaceList
        uid: '@azure/cognitiveservices-face.LargeFaceList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.LargeFaceListGetOptionalParams'
    name: LargeFaceListGetOptionalParams
    spec.typeScript:
      - name: LargeFaceListGetOptionalParams
        fullName: LargeFaceListGetOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListGetOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.TrainingStatus>
    name: TrainingStatus>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: TrainingStatus
        fullName: TrainingStatus
        uid: '@azure/cognitiveservices-face.TrainingStatus'
      - name: '>'
        fullName: '>'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.LargeFaceList[]>'
    name: 'LargeFaceList[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: LargeFaceList
        fullName: LargeFaceList
        uid: '@azure/cognitiveservices-face.LargeFaceList'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.LargeFaceListListOptionalParams'
    name: LargeFaceListListOptionalParams
    spec.typeScript:
      - name: LargeFaceListListOptionalParams
        fullName: LargeFaceListListOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListListOptionalParams'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.PersistedFace[]>'
    name: 'PersistedFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PersistedFace
        fullName: PersistedFace
        uid: '@azure/cognitiveservices-face.PersistedFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.LargeFaceListListFacesOptionalParams'
    name: LargeFaceListListFacesOptionalParams
    spec.typeScript:
      - name: LargeFaceListListFacesOptionalParams
        fullName: LargeFaceListListFacesOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListListFacesOptionalParams'
  - uid: '@azure/cognitiveservices-face.LargeFaceListUpdateOptionalParams'
    name: LargeFaceListUpdateOptionalParams
    spec.typeScript:
      - name: LargeFaceListUpdateOptionalParams
        fullName: LargeFaceListUpdateOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListUpdateOptionalParams'
  - uid: '@azure/cognitiveservices-face.LargeFaceListUpdateFaceOptionalParams'
    name: LargeFaceListUpdateFaceOptionalParams
    spec.typeScript:
      - name: LargeFaceListUpdateFaceOptionalParams
        fullName: LargeFaceListUpdateFaceOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListUpdateFaceOptionalParams'