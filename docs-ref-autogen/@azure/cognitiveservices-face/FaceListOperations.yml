### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-face.FaceListOperations'
    name: FaceListOperations
    fullName: FaceListOperations
    children:
      - '@azure/cognitiveservices-face.FaceListOperations.addFaceFromStream_2'
      - '@azure/cognitiveservices-face.FaceListOperations.addFaceFromStream'
      - '@azure/cognitiveservices-face.FaceListOperations.addFaceFromStream_1'
      - '@azure/cognitiveservices-face.FaceListOperations.addFaceFromUrl_2'
      - '@azure/cognitiveservices-face.FaceListOperations.addFaceFromUrl'
      - '@azure/cognitiveservices-face.FaceListOperations.addFaceFromUrl_1'
      - '@azure/cognitiveservices-face.FaceListOperations.create_2'
      - '@azure/cognitiveservices-face.FaceListOperations.create'
      - '@azure/cognitiveservices-face.FaceListOperations.create_1'
      - '@azure/cognitiveservices-face.FaceListOperations.deleteFace'
      - '@azure/cognitiveservices-face.FaceListOperations.deleteFace_2'
      - '@azure/cognitiveservices-face.FaceListOperations.deleteFace_1'
      - '@azure/cognitiveservices-face.FaceListOperations.deleteMethod'
      - '@azure/cognitiveservices-face.FaceListOperations.deleteMethod_2'
      - '@azure/cognitiveservices-face.FaceListOperations.deleteMethod_1'
      - '@azure/cognitiveservices-face.FaceListOperations.constructor'
      - '@azure/cognitiveservices-face.FaceListOperations.get_2'
      - '@azure/cognitiveservices-face.FaceListOperations.get'
      - '@azure/cognitiveservices-face.FaceListOperations.get_1'
      - '@azure/cognitiveservices-face.FaceListOperations.list_2'
      - '@azure/cognitiveservices-face.FaceListOperations.list'
      - '@azure/cognitiveservices-face.FaceListOperations.list_1'
      - '@azure/cognitiveservices-face.FaceListOperations.update_2'
      - '@azure/cognitiveservices-face.FaceListOperations.update'
      - '@azure/cognitiveservices-face.FaceListOperations.update_1'
    langs:
      - typeScript
    type: class
    summary: 'Класс, представляющий FaceListOperations.'
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.addFaceFromStream_2'
    name: 'addFaceFromStream(string, msRest.HttpRequestBody, FaceListAddFaceFromStreamOptionalParams, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromStream(faceListId: string, image: msRest.HttpRequestBody, options: FaceListAddFaceFromStreamOptionalParams, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Поток данных изображения.
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceListAddFaceFromStreamOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceListAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.addFaceFromStream'
    name: 'addFaceFromStream(string, msRest.HttpRequestBody, Models.FaceListAddFaceFromStreamOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Добавьте фрагмент списка указанного лиц, не более 1000 лиц.
      <br /> Для работы с изображением содержит несколько лиц, входной лиц можно указать в качестве образа с прямоугольником targetFace. Он возвращает persistedFaceId, представляющий добавленный лиц. Изображение не будут сохранены. Только компонент извлеченные лиц, которые будут храниться на сервере, пока не [FaceList - удалить лиц](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251) или [FaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) вызывается.
      <br /> Примечание persistedFaceId отличается от созданных faceId [лиц — обнаруживать](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
      * Более высоким качеством изображения лиц означает, что лучше обнаружения и точности распознавания. Попробуйте высокого качества лиц: в анфас, clear и лиц размер составляет 200 x 200 пикселей (100 пикселей между глаза) или больше.
      * Поддерживаются JPEG, PNG, GIF (первый кадр) и формат BMP. Допустимый размер файла — 6 МБ из 1 КБ.
      * прямоугольник «targetFace» должен содержать одной грани. Ноль или несколько лиц будет рассматриваться как ошибка. Если предоставленный «targetFace» прямоугольник не возвращен из [лиц — обнаруживать](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), нет никакой гарантии, для обнаружения и успешно добавить начертание шрифта.
      * За пределы размера обнаруживаемых лиц (36 x 36-4096 x 4096 пикселей) больших occlusions головы или больших приведет к ошибкам.
      * Добавление или удаление лиц с тем же список лиц обрабатываются последовательно и с разных лиц списки являются в параллельном режиме.
      * Размер минимальное обнаруживаемых лиц — 36 x 36 пикселей изображения не больше 1920 x 1080 пикселей.
      Изображения с размерами, выше, чем 1920 x 1080 пикселей понадобится пропорционально большего размера минимальное лиц.
      * Можно указать значения различных «detectionModel». Использовать и сравнения моделей обнаружения см. в статье [способы указания модели обнаружения](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
      | Модель | Рекомендуемое использование-case(s) |
      | ---------- | -------- |
      | «detection_01»: | В модели обнаружения по умолчанию для [FaceList - Добавление
      Face](/docs/Services/563879b61984550e40cbbe8d/Operations/563879b61984550f30395250). Рекомендуем использовать для практически обнаружение лиц в анфас. Для сценариев с чрезвычайно большого угол (головы) лица, перекрыто лиц или неправильное изображение ориентации лиц в таких случаях могут не обнаруживаться. | | «detection_02»: | Модель обнаружения, выпущенная в 2019 может с повышенную точность, особенно для небольших, сторона и становится нечетким лиц. |
    syntax:
      content: 'function addFaceFromStream(faceListId: string, image: msRest.HttpRequestBody, options?: Models.FaceListAddFaceFromStreamOptionalParams)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Поток данных изображения.
        - id: options
          type:
            - Models.FaceListAddFaceFromStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceListAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.addFaceFromStream_1'
    name: 'addFaceFromStream(string, msRest.HttpRequestBody, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromStream(faceListId: string, image: msRest.HttpRequestBody, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Поток данных изображения.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceListAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.addFaceFromUrl_2'
    name: 'addFaceFromUrl(string, string, FaceListAddFaceFromUrlOptionalParams, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromUrl(faceListId: string, url: string, options: FaceListAddFaceFromUrlOptionalParams, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: url
          type:
            - string
          description: Публично доступную URL-адрес изображения
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceListAddFaceFromUrlOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceListAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.addFaceFromUrl'
    name: 'addFaceFromUrl(string, string, Models.FaceListAddFaceFromUrlOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Добавьте фрагмент списка указанного лиц, не более 1000 лиц.
      <br /> Для работы с изображением содержит несколько лиц, входной лиц можно указать в качестве образа с прямоугольником targetFace. Он возвращает persistedFaceId, представляющий добавленный лиц. Изображение не будут сохранены. Только компонент извлеченные лиц, которые будут храниться на сервере, пока не [FaceList - удалить лиц](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251) или [FaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) вызывается.
      <br /> Примечание persistedFaceId отличается от созданных faceId [лиц — обнаруживать](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
      * Более высоким качеством изображения лиц означает, что лучше обнаружения и точности распознавания. Попробуйте высокого качества лиц: в анфас, clear и лиц размер составляет 200 x 200 пикселей (100 пикселей между глаза) или больше.
      * Поддерживаются JPEG, PNG, GIF (первый кадр) и формат BMP. Допустимый размер файла — 6 МБ из 1 КБ.
      * прямоугольник «targetFace» должен содержать одной грани. Ноль или несколько лиц будет рассматриваться как ошибка. Если предоставленный «targetFace» прямоугольник не возвращен из [лиц — обнаруживать](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), нет никакой гарантии, для обнаружения и успешно добавить начертание шрифта.
      * За пределы размера обнаруживаемых лиц (36 x 36-4096 x 4096 пикселей) больших occlusions головы или больших приведет к ошибкам.
      * Добавление или удаление лиц с тем же список лиц обрабатываются последовательно и с разных лиц списки являются в параллельном режиме.
      * Размер минимальное обнаруживаемых лиц — 36 x 36 пикселей изображения не больше 1920 x 1080 пикселей.
      Изображения с размерами, выше, чем 1920 x 1080 пикселей понадобится пропорционально большего размера минимальное лиц.
      * Можно указать значения различных «detectionModel». Использовать и сравнения моделей обнаружения см. в статье [способы указания модели обнаружения](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
      | Модель | Рекомендуемое использование-case(s) |
      | ---------- | -------- |
      | «detection_01»: | В модели обнаружения по умолчанию для [FaceList - Добавление
      Face](/docs/Services/563879b61984550e40cbbe8d/Operations/563879b61984550f30395250). Рекомендуем использовать для практически обнаружение лиц в анфас. Для сценариев с чрезвычайно большого угол (головы) лица, перекрыто лиц или неправильное изображение ориентации лиц в таких случаях могут не обнаруживаться. | | «detection_02»: | Модель обнаружения, выпущенная в 2019 может с повышенную точность, особенно для небольших, сторона и становится нечетким лиц. |
    syntax:
      content: 'function addFaceFromUrl(faceListId: string, url: string, options?: Models.FaceListAddFaceFromUrlOptionalParams)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: url
          type:
            - string
          description: Публично доступную URL-адрес изображения
        - id: options
          type:
            - Models.FaceListAddFaceFromUrlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceListAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.addFaceFromUrl_1'
    name: 'addFaceFromUrl(string, string, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromUrl(faceListId: string, url: string, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: url
          type:
            - string
          description: Публично доступную URL-адрес изображения
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceListAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.create_2'
    name: 'create(string, FaceListCreateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function create(faceListId: string, options: FaceListCreateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceListCreateOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.create'
    name: 'create(string, Models.FaceListCreateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Создание списка пустой лиц с пользовательской faceListId, именем, необязательно userData и recognitionModel. До 64 лиц списки разрешены в одной подписке.
      <br /> Список лиц список лиц, до 1000 лиц и используемые [лиц - поиск похожих](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
      <br /> После создания, пользователь должен использовать [FaceList — добавление распознавания лиц](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250) для импорта фрагменты. Изображение не будут сохранены. Только компоненты извлеченные лиц хранятся на сервере, пока не [FaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) вызывается.
      <br /> Найти подобный используется для сценария, например для поиска по принципу знаменитостей лиц, аналогичные лиц фильтрации, или как света способом сталкиваются идентификации. Но если фактическое использование для идентификации пользователя, используйте [каждой группе людей](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) /
      [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) и [сталкиваются - Идентификация](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
      <br /> Попробуйте [LargeFaceList](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) при велико число лиц. Он может поддерживать до 1 000 000 лиц.
      <br />«recognitionModel» должно быть указано для связи с данным списком лиц. Значение по умолчанию для «recognitionModel» — «recognition_01», если последней модели необходимо явно указать модели, необходимые в этом параметре. Новые лица, которые добавляются в существующий список лиц будет использовать модель распознавания, которая уже связана с коллекцией. Невозможно обновить существующие функции распознавания лиц в список лиц к функциям, извлеченным в ходе другая версия модель распознавания.
      * «recognition_01»: Стандартная модель распознавания [FaceList - создание](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b). Все эти списки лиц, созданных до марта 2019 связанные с этой моделью распознавания.
      * «recognition_02»: Модель распознавания, выпущенную в марте 2019 г. «recognition_02» рекомендуется, так как его общая точность улучшена по сравнению с «recognition_01».
    syntax:
      content: 'function create(faceListId: string, options?: Models.FaceListCreateOptionalParams)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: options
          type:
            - Models.FaceListCreateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.create_1'
    name: 'create(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function create(faceListId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.deleteFace'
    name: 'deleteFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Удалите фрагмент из списка лиц, указанный faceListId и persistedFaceId.
      <br /> Добавление или удаление лиц с тем же список лиц обрабатываются последовательно и с разных лиц списки являются в параллельном режиме.
    syntax:
      content: 'function deleteFace(faceListId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: persistedFaceId
          type:
            - string
          description: Идентификатор ссылки на определенный persistedFaceId существующей поверхности.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.deleteFace_2'
    name: 'deleteFace(string, string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteFace(faceListId: string, persistedFaceId: string, options: RequestOptionsBase, callback: ServiceCallback<void>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: persistedFaceId
          type:
            - string
          description: Идентификатор ссылки на определенный persistedFaceId существующей поверхности.
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.deleteFace_1'
    name: 'deleteFace(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteFace(faceListId: string, persistedFaceId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: persistedFaceId
          type:
            - string
          description: Идентификатор ссылки на определенный persistedFaceId существующей поверхности.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.deleteMethod'
    name: 'deleteMethod(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Удаление лиц указанного списка.
    syntax:
      content: 'function deleteMethod(faceListId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.deleteMethod_2'
    name: 'deleteMethod(string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(faceListId: string, options: RequestOptionsBase, callback: ServiceCallback<void>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: options
          type:
            - RequestOptionsBase
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.deleteMethod_1'
    name: 'deleteMethod(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(faceListId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.constructor'
    name: FaceListOperations(FaceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Создайте FaceListOperations.
    syntax:
      content: 'new FaceListOperations(client: FaceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/cognitiveservices-face.FaceClientContext'
          description: |
            Ссылка на клиента службы.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.get_2'
    name: 'get(string, FaceListGetOptionalParams, ServiceCallback<FaceList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(faceListId: string, options: FaceListGetOptionalParams, callback: ServiceCallback<FaceList>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceListGetOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.FaceList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceListGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.get'
    name: 'get(string, Models.FaceListGetOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Получить список лиц faceListId, имя, userData, recognitionModel и лиц, в списке лиц.'
    syntax:
      content: 'function get(faceListId: string, options?: Models.FaceListGetOptionalParams)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: options
          type:
            - Models.FaceListGetOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceListGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.get_1'
    name: 'get(string, ServiceCallback<FaceList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(faceListId: string, callback: ServiceCallback<FaceList>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.FaceList>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceListGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.list_2'
    name: 'list(FaceListListOptionalParams, ServiceCallback<FaceList[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(options: FaceListListOptionalParams, callback: ServiceCallback<FaceList[]>)'
      parameters:
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceListListOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.FaceList[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceListListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.list'
    name: list(Models.FaceListListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Список faceListId, имя, userData и recognitionModel списки лиц. <br />
      Для получения сведений лиц внутри используйте faceList [FaceList - Get](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c)
    syntax:
      content: 'function list(options?: Models.FaceListListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.FaceListListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceListListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.list_1'
    name: 'list(ServiceCallback<FaceList[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(callback: ServiceCallback<FaceList[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.FaceList[]>'
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<Models.FaceListListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.update_2'
    name: 'update(string, FaceListUpdateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(faceListId: string, options: FaceListUpdateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceListUpdateOptionalParams'
          description: Возможно использование необязательных параметров
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.update'
    name: 'update(string, Models.FaceListUpdateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Обновите сведения о списке лиц.
    syntax:
      content: 'function update(faceListId: string, options?: Models.FaceListUpdateOptionalParams)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: options
          type:
            - Models.FaceListUpdateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.FaceListOperations.update_1'
    name: 'update(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(faceListId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: Идентификатор ссылки на список конкретного лица.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Функция обратного вызова
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
references:
  - uid: '@azure/cognitiveservices-face.FaceClientContext'
    name: FaceClientContext
    spec.typeScript:
      - name: FaceClientContext
        fullName: FaceClientContext
        uid: '@azure/cognitiveservices-face.FaceClientContext'
  - uid: ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
    name: PersistedFace>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PersistedFace
        fullName: PersistedFace
        uid: '@azure/cognitiveservices-face.PersistedFace'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.FaceListAddFaceFromStreamOptionalParams'
    name: FaceListAddFaceFromStreamOptionalParams
    spec.typeScript:
      - name: FaceListAddFaceFromStreamOptionalParams
        fullName: FaceListAddFaceFromStreamOptionalParams
        uid: '@azure/cognitiveservices-face.FaceListAddFaceFromStreamOptionalParams'
  - uid: '@azure/cognitiveservices-face.FaceListAddFaceFromUrlOptionalParams'
    name: FaceListAddFaceFromUrlOptionalParams
    spec.typeScript:
      - name: FaceListAddFaceFromUrlOptionalParams
        fullName: FaceListAddFaceFromUrlOptionalParams
        uid: '@azure/cognitiveservices-face.FaceListAddFaceFromUrlOptionalParams'
  - uid: '@azure/cognitiveservices-face.FaceListCreateOptionalParams'
    name: FaceListCreateOptionalParams
    spec.typeScript:
      - name: FaceListCreateOptionalParams
        fullName: FaceListCreateOptionalParams
        uid: '@azure/cognitiveservices-face.FaceListCreateOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.FaceList>
    name: FaceList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: FaceList
        fullName: FaceList
        uid: '@azure/cognitiveservices-face.FaceList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.FaceListGetOptionalParams'
    name: FaceListGetOptionalParams
    spec.typeScript:
      - name: FaceListGetOptionalParams
        fullName: FaceListGetOptionalParams
        uid: '@azure/cognitiveservices-face.FaceListGetOptionalParams'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.FaceList[]>'
    name: 'FaceList[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: FaceList
        fullName: FaceList
        uid: '@azure/cognitiveservices-face.FaceList'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceListListOptionalParams'
    name: FaceListListOptionalParams
    spec.typeScript:
      - name: FaceListListOptionalParams
        fullName: FaceListListOptionalParams
        uid: '@azure/cognitiveservices-face.FaceListListOptionalParams'
  - uid: '@azure/cognitiveservices-face.FaceListUpdateOptionalParams'
    name: FaceListUpdateOptionalParams
    spec.typeScript:
      - name: FaceListUpdateOptionalParams
        fullName: FaceListUpdateOptionalParams
        uid: '@azure/cognitiveservices-face.FaceListUpdateOptionalParams'