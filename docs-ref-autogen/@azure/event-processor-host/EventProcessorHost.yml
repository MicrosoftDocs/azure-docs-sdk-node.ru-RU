### YamlMime:UniversalReference
ms.openlocfilehash: 6ba5ac3c693177f8af42e6a22afe2d7805016620
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 12/13/2018
ms.locfileid: "52095629"
items:
- uid: '@azure/event-processor-host.EventProcessorHost'
  name: EventProcessorHost
  fullName: EventProcessorHost
  children:
  - '@azure/event-processor-host.EventProcessorHost.consumerGroup'
  - '@azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentials'
  - '@azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager'
  - '@azure/event-processor-host.EventProcessorHost.createFromConnectionString'
  - '@azure/event-processor-host.EventProcessorHost.createFromConnectionStringWithCustomCheckpointAndLeaseManager'
  - '@azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionString'
  - '@azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager'
  - '@azure/event-processor-host.EventProcessorHost.createFromTokenProvider'
  - '@azure/event-processor-host.EventProcessorHost.createFromTokenProviderWithCustomCheckpointAndLeaseManager'
  - '@azure/event-processor-host.EventProcessorHost.createHostName'
  - '@azure/event-processor-host.EventProcessorHost.constructor'
  - '@azure/event-processor-host.EventProcessorHost.getHubRuntimeInformation'
  - '@azure/event-processor-host.EventProcessorHost.getPartitionIds'
  - '@azure/event-processor-host.EventProcessorHost.getPartitionInformation'
  - '@azure/event-processor-host.EventProcessorHost.hostName'
  - '@azure/event-processor-host.EventProcessorHost.receivingFromPartitions'
  - '@azure/event-processor-host.EventProcessorHost.start'
  - '@azure/event-processor-host.EventProcessorHost.stop'
  langs:
  - typeScript
  type: class
  summary: Описывает узел обработчика событий для обработки событий из концентратора событий.
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.consumerGroup'
  name: consumerGroup
  fullName: consumerGroup
  children: []
  langs:
  - typeScript
  type: property
  summary: Предоставляет потребителю имя группы для узла обработчика событий.
  syntax:
    content: 'consumerGroup: string'
    return:
      type:
      - string
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentials'
  name: createFromAadTokenCredentials(string, string, string, string, string, ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, FromTokenProviderOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Создает экземпляр EventProcessorHost из учетных данных токена AAD.
  syntax:
    content: 'static function createFromAadTokenCredentials(hostName: string, storageConnectionString: string, storageContainerName: string, namespace: string, eventHubPath: string, credentials: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, options?: FromTokenProviderOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Имя узла обработчика. ДОЛЖНО БЫТЬ УНИКАЛЬНЫМ.

        Настоятельно рекомендуется, включая идентификатор Guid или префикс с идентификатором guid, чтобы обеспечить его уникальность. Можно использовать `EventProcessorHost.createHostName("your-prefix")`; Значение по умолчанию — `js-host-${uuid()}`.
    - id: storageConnectionString
      type:
      - string
      description: Строка подключения к учетной записи хранилища Azure, используемой для аренды и создание контрольных точек. Пример DefaultEndpointsProtocol = https; AccountName = < имя учетной записи >; AccountKey = < ключ учетной записи >; EndpointSuffix=core.windows.net
    - id: storageContainerName
      type:
      - string
      description: Имя контейнера хранилища Azure для использования диспетчером встроенные аренды и контрольных точек.
    - id: namespace
      type:
      - string
      description: >-
        Полное доменное имя для концентраторов событий.

        Пример: «{your-sb-namespace}. servicebus.windows .net»
    - id: eventHubPath
      type:
      - string
      description: Имя концентратора событий.
    - id: credentials
      type:
      - ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials
      description: 'Учетные данные маркера AAD. Он может принимать одно из следующих: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials.'
    - id: options
      type:
      - '@azure/event-processor-host.FromTokenProviderOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager'
  name: createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager(string, string, string, ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, CheckpointManager, LeaseManager, FromTokenProviderOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Создает экземпляр EventProcessorHost из учетных данных токена AAD с заданной контрольной точки manager и диспетчер аренды.
  syntax:
    content: 'static function createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager(hostName: string, namespace: string, eventHubPath: string, credentials: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials, checkpointManager: CheckpointManager, leaseManager: LeaseManager, options?: FromTokenProviderOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Имя узла обработчика. ДОЛЖНО БЫТЬ УНИКАЛЬНЫМ.

        Настоятельно рекомендуется, включая идентификатор Guid или префикс с идентификатором guid, чтобы обеспечить его уникальность. Можно использовать `EventProcessorHost.createHostName("your-prefix")`; Значение по умолчанию — `js-host-${uuid()}`.
    - id: namespace
      type:
      - string
      description: >-
        Полное доменное имя для концентраторов событий.

        Пример: «{your-sb-namespace}. servicebus.windows .net»
    - id: eventHubPath
      type:
      - string
      description: Имя концентратора событий.
    - id: credentials
      type:
      - ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials
      description: 'Учетные данные маркера AAD. Он может принимать одно из следующих: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials.'
    - id: checkpointManager
      type:
      - '@azure/event-processor-host.CheckpointManager'
      description: Диспетчер управления контрольными точками.
    - id: leaseManager
      type:
      - '@azure/event-processor-host.LeaseManager'
      description: Диспетчер для управления аренды.
    - id: options
      type:
      - '@azure/event-processor-host.FromTokenProviderOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromConnectionString'
  name: createFromConnectionString(string, string, string, string, FromConnectionStringOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Создает экземпляр EventProcessorHost из строки подключения концентратора событий.
  syntax:
    content: 'static function createFromConnectionString(hostName: string, storageConnectionString: string, storageContainerName: string, eventHubConnectionString: string, options?: FromConnectionStringOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Имя узла обработчика. ДОЛЖНО БЫТЬ УНИКАЛЬНЫМ.

        Настоятельно рекомендуется, включая идентификатор Guid или префикс с идентификатором guid, чтобы обеспечить его уникальность. Можно использовать `EventProcessorHost.createHostName("your-prefix")`; Значение по умолчанию — `js-host-${uuid()}`.
    - id: storageConnectionString
      type:
      - string
      description: Строка подключения к учетной записи хранилища Azure, используемой для аренды и создание контрольных точек. Пример DefaultEndpointsProtocol = https; AccountName = < имя учетной записи >; AccountKey = < ключ учетной записи >; EndpointSuffix=core.windows.net
    - id: storageContainerName
      type:
      - string
      description: Имя контейнера хранилища Azure для использования диспетчером встроенные аренды и контрольных точек.
    - id: eventHubConnectionString
      type:
      - string
      description: >-
        Строка подключения для концентратора событий для получения от.

        Пример: "Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/; SharedAccessKeyName = my-SA-name; SharedAccessKey my-SA-key = "
    - id: options
      type:
      - '@azure/event-processor-host.FromConnectionStringOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromConnectionStringWithCustomCheckpointAndLeaseManager'
  name: createFromConnectionStringWithCustomCheckpointAndLeaseManager(string, string, CheckpointManager, LeaseManager, FromConnectionStringOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Создает экземпляр EventProcessorHost из строки подключения концентратора событий с помощью диспетчера предоставленный контрольных точек и диспетчер аренды.
  syntax:
    content: 'static function createFromConnectionStringWithCustomCheckpointAndLeaseManager(hostName: string, eventHubConnectionString: string, checkpointManager: CheckpointManager, leaseManager: LeaseManager, options?: FromConnectionStringOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Имя узла обработчика. ДОЛЖНО БЫТЬ УНИКАЛЬНЫМ.

        Настоятельно рекомендуется, включая идентификатор Guid или префикс с идентификатором guid, чтобы обеспечить его уникальность. Можно использовать `EventProcessorHost.createHostName("your-prefix")`; Значение по умолчанию — `js-host-${uuid()}`.
    - id: eventHubConnectionString
      type:
      - string
      description: >-
        Строка подключения для концентратора событий для получения от.

        Пример: "Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/; SharedAccessKeyName = my-SA-name; SharedAccessKey my-SA-key = "
    - id: checkpointManager
      type:
      - '@azure/event-processor-host.CheckpointManager'
      description: Диспетчер управления контрольными точками.
    - id: leaseManager
      type:
      - '@azure/event-processor-host.LeaseManager'
      description: Диспетчер для управления аренды.
    - id: options
      type:
      - '@azure/event-processor-host.FromConnectionStringOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionString'
  name: createFromIotHubConnectionString(string, string, string, string, FromIotHubConnectionStringOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Создает экземпляр EventProcessorHost из строки подключения центра Интернета вещей.
  syntax:
    content: 'static function createFromIotHubConnectionString(hostName: string, storageConnectionString: string, storageContainerName: string, iotHubConnectionString: string, options?: FromIotHubConnectionStringOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Имя узла обработчика. ДОЛЖНО БЫТЬ УНИКАЛЬНЫМ.

        Настоятельно рекомендуется, включая идентификатор Guid или префикс с идентификатором guid, чтобы обеспечить его уникальность. Можно использовать `EventProcessorHost.createHostName("your-prefix")`; Значение по умолчанию — `js-host-${uuid()}`.
    - id: storageConnectionString
      type:
      - string
      description: Строка подключения к учетной записи хранилища Azure, используемой для аренды и создание контрольных точек. Пример DefaultEndpointsProtocol = https; AccountName = < имя учетной записи >; AccountKey = < ключ учетной записи >; EndpointSuffix=core.windows.net
    - id: storageContainerName
      type:
      - string
      description: Имя контейнера хранилища Azure для использования диспетчером встроенные аренды и контрольных точек.
    - id: iotHubConnectionString
      type:
      - string
      description: >-
        Строка подключения для центра Интернета вещей.

        Пример: "Конечной точки = iot имя узла; SharedAccessKeyName = my-SA-name; SharedAccessKey my-SA-key = "
    - id: options
      type:
      - '@azure/event-processor-host.FromIotHubConnectionStringOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/event-processor-host.EventProcessorHost>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager'
  name: createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager(string, string, CheckpointManager, LeaseManager, FromIotHubConnectionStringOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Создает экземпляр EventProcessorHost из строки подключения центра Интернета вещей с помощью диспетчера заданной контрольной точки и диспетчер аренды.
  syntax:
    content: 'static function createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager(hostName: string, iotHubConnectionString: string, checkpointManager: CheckpointManager, leaseManager: LeaseManager, options?: FromIotHubConnectionStringOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Имя узла обработчика. ДОЛЖНО БЫТЬ УНИКАЛЬНЫМ.

        Настоятельно рекомендуется, включая идентификатор Guid или префикс с идентификатором guid, чтобы обеспечить его уникальность. Можно использовать `EventProcessorHost.createHostName("your-prefix")`; Значение по умолчанию — `js-host-${uuid()}`.
    - id: iotHubConnectionString
      type:
      - string
      description: >-
        Строка подключения для центра Интернета вещей.

        Пример: "Конечной точки = iot имя узла; SharedAccessKeyName = my-SA-name; SharedAccessKey my-SA-key = "
    - id: checkpointManager
      type:
      - '@azure/event-processor-host.CheckpointManager'
      description: Диспетчер управления контрольными точками.
    - id: leaseManager
      type:
      - '@azure/event-processor-host.LeaseManager'
      description: Диспетчер для управления аренды.
    - id: options
      type:
      - '@azure/event-processor-host.FromIotHubConnectionStringOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/event-processor-host.EventProcessorHost>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromTokenProvider'
  name: createFromTokenProvider(string, string, string, string, string, TokenProvider, FromTokenProviderOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Создает экземпляр EventProcessorHost из TokenProvider.
  syntax:
    content: 'static function createFromTokenProvider(hostName: string, storageConnectionString: string, storageContainerName: string, namespace: string, eventHubPath: string, tokenProvider: TokenProvider, options?: FromTokenProviderOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Имя узла обработчика. ДОЛЖНО БЫТЬ УНИКАЛЬНЫМ.

        Настоятельно рекомендуется, включая идентификатор Guid или префикс с идентификатором guid, чтобы обеспечить его уникальность. Можно использовать `EventProcessorHost.createHostName("your-prefix")`; Значение по умолчанию — `js-host-${uuid()}`.
    - id: storageConnectionString
      type:
      - string
      description: Строка подключения к учетной записи хранилища Azure, используемой для аренды и создание контрольных точек. Пример DefaultEndpointsProtocol = https; AccountName = < имя учетной записи >; AccountKey = < ключ учетной записи >; EndpointSuffix=core.windows.net
    - id: storageContainerName
      type:
      - string
      description: Имя контейнера хранилища Azure для использования диспетчером встроенные аренды и контрольных точек.
    - id: namespace
      type:
      - string
      description: >-
        Полное доменное имя для концентраторов событий.

        Пример: «{your-sb-namespace}. servicebus.windows .net»
    - id: eventHubPath
      type:
      - string
      description: Имя концентратора событий.
    - id: tokenProvider
      type:
      - TokenProvider
      description: Ваш поставщик маркеров, который реализует интерфейс TokenProvider.
    - id: options
      type:
      - '@azure/event-processor-host.FromTokenProviderOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createFromTokenProviderWithCustomCheckpointAndLeaseManager'
  name: createFromTokenProviderWithCustomCheckpointAndLeaseManager(string, string, string, TokenProvider, CheckpointManager, LeaseManager, FromTokenProviderOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: Создает экземпляр EventProcessorHost TokenProvider manager предоставленный контрольных точек и диспетчер аренды.
  syntax:
    content: 'static function createFromTokenProviderWithCustomCheckpointAndLeaseManager(hostName: string, namespace: string, eventHubPath: string, tokenProvider: TokenProvider, checkpointManager: CheckpointManager, leaseManager: LeaseManager, options?: FromTokenProviderOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Имя узла обработчика. ДОЛЖНО БЫТЬ УНИКАЛЬНЫМ.

        Настоятельно рекомендуется, включая идентификатор Guid или префикс с идентификатором guid, чтобы обеспечить его уникальность. Можно использовать `EventProcessorHost.createHostName("your-prefix")`; Значение по умолчанию — `js-host-${uuid()}`.
    - id: namespace
      type:
      - string
      description: >-
        Полное доменное имя для концентраторов событий.

        Пример: «{your-sb-namespace}. servicebus.windows .net»
    - id: eventHubPath
      type:
      - string
      description: Имя концентратора событий.
    - id: tokenProvider
      type:
      - TokenProvider
      description: Ваш поставщик маркеров, который реализует интерфейс TokenProvider.
    - id: checkpointManager
      type:
      - '@azure/event-processor-host.CheckpointManager'
      description: Диспетчер управления контрольными точками.
    - id: leaseManager
      type:
      - '@azure/event-processor-host.LeaseManager'
      description: Диспетчер для управления аренды.
    - id: options
      type:
      - '@azure/event-processor-host.FromTokenProviderOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/event-processor-host.EventProcessorHost'
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.createHostName'
  name: createHostName(undefined | string)
  children: []
  type: method
  langs:
  - typeScript
  summary: Удобный метод для генерации уникальное имя узла.
  syntax:
    content: 'static function createHostName(prefix?: undefined | string)'
    parameters:
    - id: prefix
      type:
      - undefined | string
      description: ''
      optional: true
    return:
      type:
      - string
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.constructor'
  name: EventProcessorHost(string, EventProcessorHostOptions)
  children: []
  type: constructor
  langs:
  - typeScript
  summary: Создает новый узел для обработки событий из концентратора событий.
  syntax:
    content: 'new EventProcessorHost(hostName: string, options?: EventProcessorHostOptions)'
    parameters:
    - id: hostName
      type:
      - string
      description: >-
        Имя узла обработчика. ДОЛЖНО БЫТЬ УНИКАЛЬНЫМ.

        Настоятельно рекомендуется, включая идентификатор Guid или префикс с идентификатором guid, чтобы обеспечить его уникальность. Можно использовать `EventProcessorHost.createHostName("your-prefix")`; Значение по умолчанию — `js-host-${uuid()}`.
    - id: options
      type:
      - '@azure/event-processor-host.EventProcessorHostOptions'
      description: ''
      optional: true
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.getHubRuntimeInformation'
  name: getHubRuntimeInformation()
  children: []
  type: method
  langs:
  - typeScript
  summary: Предоставляет сведения о среде выполнения концентратора событий.
  syntax:
    content: function getHubRuntimeInformation()
    parameters: []
    return:
      type:
      - Promise<EventHubRuntimeInformation>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.getPartitionIds'
  name: getPartitionIds()
  children: []
  type: method
  langs:
  - typeScript
  summary: Предоставляет целый ряд partitionIds.
  syntax:
    content: function getPartitionIds()
    parameters: []
    return:
      type:
      - Promise<string[]>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.getPartitionInformation'
  name: getPartitionInformation(string | number)
  children: []
  type: method
  langs:
  - typeScript
  summary: Сведения об указанной секции.
  syntax:
    content: 'function getPartitionInformation(partitionId: string | number)'
    parameters:
    - id: partitionId
      type:
      - string | number
      description: >
        Идентификатор секции, для какой раздел сведения не требуются.
    return:
      type:
      - Promise<EventHubPartitionRuntimeInformation>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.hostName'
  name: hostName
  fullName: hostName
  children: []
  langs:
  - typeScript
  type: property
  summary: Предоставляет имя узла для узла обработчика событий.
  syntax:
    content: 'hostName: string'
    return:
      type:
      - string
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.receivingFromPartitions'
  name: receivingFromPartitions
  fullName: receivingFromPartitions
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    Предоставляет список разделов, которые EPH получает сообщения от.

    EPH попытается получить аренду для нескольких секций во время каждого сканирования, что происходит после обновления каждые (настроенный) аренды секунд. Число экземпляров EPH, которые выполняются одновременно для получения сообщений из одной группы потребителей в концентраторе событий также влияет на число секций, этот экземпляр EPH активно получает сообщения от.
  syntax:
    content: 'receivingFromPartitions: string[]'
    return:
      type:
      - string[]
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.start'
  name: start(OnReceivedMessage, OnReceivedError)
  children: []
  type: method
  langs:
  - typeScript
  summary: Запускает узел обработчика событий, получение списка секций, и попытка получить аренду для каждого успешного аренды, он будет получить сведения из большого двоичного объекта и запускать приемником в момент, в котором она остановилась ранее.
  syntax:
    content: 'function start(onMessage: OnReceivedMessage, onError: OnReceivedError)'
    parameters:
    - id: onMessage
      type:
      - '@azure/event-processor-host.OnReceivedMessage'
      description: ''
    - id: onError
      type:
      - '@azure/event-processor-host.OnReceivedError'
      description: ''
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.EventProcessorHost.stop'
  name: stop()
  children: []
  type: method
  langs:
  - typeScript
  summary: Останавливает EventProcessorHost от обработки сообщений.
  syntax:
    content: function stop()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
references:
- uid: '@azure/event-processor-host.EventProcessorHostOptions'
  name: EventProcessorHostOptions
  spec.typeScript:
  - name: EventProcessorHostOptions
    fullName: EventProcessorHostOptions
    uid: '@azure/event-processor-host.EventProcessorHostOptions'
- uid: '@azure/event-processor-host.OnReceivedMessage'
  name: OnReceivedMessage
  spec.typeScript:
  - name: OnReceivedMessage
    fullName: OnReceivedMessage
    uid: '@azure/event-processor-host.OnReceivedMessage'
- uid: '@azure/event-processor-host.OnReceivedError'
  name: OnReceivedError
  spec.typeScript:
  - name: OnReceivedError
    fullName: OnReceivedError
    uid: '@azure/event-processor-host.OnReceivedError'
- uid: '@azure/event-processor-host.FromTokenProviderOptions'
  name: FromTokenProviderOptions
  spec.typeScript:
  - name: FromTokenProviderOptions
    fullName: FromTokenProviderOptions
    uid: '@azure/event-processor-host.FromTokenProviderOptions'
- uid: '@azure/event-processor-host.EventProcessorHost'
  name: EventProcessorHost
  spec.typeScript:
  - name: EventProcessorHost
    fullName: EventProcessorHost
    uid: '@azure/event-processor-host.EventProcessorHost'
- uid: '@azure/event-processor-host.CheckpointManager'
  name: CheckpointManager
  spec.typeScript:
  - name: CheckpointManager
    fullName: CheckpointManager
    uid: '@azure/event-processor-host.CheckpointManager'
- uid: '@azure/event-processor-host.LeaseManager'
  name: LeaseManager
  spec.typeScript:
  - name: LeaseManager
    fullName: LeaseManager
    uid: '@azure/event-processor-host.LeaseManager'
- uid: '@azure/event-processor-host.FromConnectionStringOptions'
  name: FromConnectionStringOptions
  spec.typeScript:
  - name: FromConnectionStringOptions
    fullName: FromConnectionStringOptions
    uid: '@azure/event-processor-host.FromConnectionStringOptions'
- uid: '@azure/event-processor-host.FromIotHubConnectionStringOptions'
  name: FromIotHubConnectionStringOptions
  spec.typeScript:
  - name: FromIotHubConnectionStringOptions
    fullName: FromIotHubConnectionStringOptions
    uid: '@azure/event-processor-host.FromIotHubConnectionStringOptions'
- uid: Promise<@azure/event-processor-host.EventProcessorHost>
  name: EventProcessorHost>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: EventProcessorHost
    fullName: EventProcessorHost
    uid: '@azure/event-processor-host.EventProcessorHost'
  - name: '>'
    fullName: '>'
