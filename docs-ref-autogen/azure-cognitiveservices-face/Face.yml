### YamlMime:UniversalReference
ms.openlocfilehash: 5b2dcbac70d3d42b4477c37100171c12991de94f
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 12/13/2018
ms.locfileid: "52150929"
items:
- uid: azure-cognitiveservices-face.Face
  name: Face
  fullName: Face
  children:
  - azure-cognitiveservices-face.Face.detectWithStream
  - azure-cognitiveservices-face.Face.detectWithStream_2
  - azure-cognitiveservices-face.Face.detectWithStream_1
  - azure-cognitiveservices-face.Face.detectWithStreamWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.detectWithUrl
  - azure-cognitiveservices-face.Face.detectWithUrl_2
  - azure-cognitiveservices-face.Face.detectWithUrl_1
  - azure-cognitiveservices-face.Face.detectWithUrlWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.findSimilar
  - azure-cognitiveservices-face.Face.findSimilar_2
  - azure-cognitiveservices-face.Face.findSimilar_1
  - azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.group
  - azure-cognitiveservices-face.Face.group_2
  - azure-cognitiveservices-face.Face.group_1
  - azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.identify
  - azure-cognitiveservices-face.Face.identify_2
  - azure-cognitiveservices-face.Face.identify_1
  - azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verifyFaceToFace
  - azure-cognitiveservices-face.Face.verifyFaceToFace_2
  - azure-cognitiveservices-face.Face.verifyFaceToFace_1
  - azure-cognitiveservices-face.Face.verifyFaceToFaceWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verifyFaceToPerson
  - azure-cognitiveservices-face.Face.verifyFaceToPerson_2
  - azure-cognitiveservices-face.Face.verifyFaceToPerson_1
  - azure-cognitiveservices-face.Face.verifyFaceToPersonWithHttpOperationResponse
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStream
  name: detectWithStream(stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-101">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="74eb8-101">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithStream(image: stream.Readable, options?: Object)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="74eb8-102">Поток данных изображения.</span><span class="sxs-lookup"><span data-stu-id="74eb8-102">An image stream.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStream_2
  name: detectWithStream(stream.Readable, Object, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-103">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="74eb8-103">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithStream(image: stream.Readable, options: Object, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStream_1
  name: detectWithStream(stream.Readable, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-104">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="74eb8-104">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithStream(image: stream.Readable, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStreamWithHttpOperationResponse
  name: detectWithStreamWithHttpOperationResponse(stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-105">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="74eb8-105">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithStreamWithHttpOperationResponse(image: stream.Readable, options?: Object)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="74eb8-106">Поток данных изображения.</span><span class="sxs-lookup"><span data-stu-id="74eb8-106">An image stream.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrl
  name: detectWithUrl(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-107">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="74eb8-107">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithUrl(url: string, options?: Object)'
    parameters:
    - id: url
      type:
      - string
      description: >
        <span data-ttu-id="74eb8-108">Публично доступную URL-адрес изображения</span><span class="sxs-lookup"><span data-stu-id="74eb8-108">Publicly reachable URL of an image</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrl_2
  name: detectWithUrl(string, Object, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-109">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="74eb8-109">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithUrl(url: string, options: Object, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrl_1
  name: detectWithUrl(string, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-110">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="74eb8-110">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithUrl(url: string, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrlWithHttpOperationResponse
  name: detectWithUrlWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-111">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="74eb8-111">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithUrlWithHttpOperationResponse(url: string, options?: Object)'
    parameters:
    - id: url
      type:
      - string
      description: >
        <span data-ttu-id="74eb8-112">Публично доступную URL-адрес изображения</span><span class="sxs-lookup"><span data-stu-id="74eb8-112">Publicly reachable URL of an image</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar
  name: findSimilar(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-113">Получив запрос лиц faceId, находит похожие лица из массива faceId, список лиц или списка больших лиц.</span><span class="sxs-lookup"><span data-stu-id="74eb8-113">Given query face's faceId, find the similar-looking faces from a faceId array, a face list or a large face list.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="74eb8-114">FaceId поверхности запроса.</span><span class="sxs-lookup"><span data-stu-id="74eb8-114">FaceId of the query face.</span></span> <span data-ttu-id="74eb8-115">Пользователь должен вызвать лиц — обнаруживать первым допустимым faceId.</span><span class="sxs-lookup"><span data-stu-id="74eb8-115">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="74eb8-116">Обратите внимание, что этот faceId не сохраняется и заканчивается через 24 часа после вызова метода обнаружения</span><span class="sxs-lookup"><span data-stu-id="74eb8-116">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_2
  name: findSimilar(string, Object, ServiceCallback<SimilarFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-117">Получив запрос лиц faceId, находит похожие лица из массива faceId, список лиц или списка больших лиц.</span><span class="sxs-lookup"><span data-stu-id="74eb8-117">Given query face's faceId, find the similar-looking faces from a faceId array, a face list or a large face list.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, options: Object, callback: ServiceCallback<SimilarFace[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_1
  name: findSimilar(string, ServiceCallback<SimilarFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-118">Получив запрос лиц faceId, находит похожие лица из массива faceId, список лиц или списка больших лиц.</span><span class="sxs-lookup"><span data-stu-id="74eb8-118">Given query face's faceId, find the similar-looking faces from a faceId array, a face list or a large face list.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFace[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  name: findSimilarWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-119">Получив запрос лиц faceId, находит похожие лица из массива faceId, список лиц или списка больших лиц.</span><span class="sxs-lookup"><span data-stu-id="74eb8-119">Given query face's faceId, find the similar-looking faces from a faceId array, a face list or a large face list.</span></span>
  syntax:
    content: 'function findSimilarWithHttpOperationResponse(faceId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="74eb8-120">FaceId поверхности запроса.</span><span class="sxs-lookup"><span data-stu-id="74eb8-120">FaceId of the query face.</span></span> <span data-ttu-id="74eb8-121">Пользователь должен вызвать лиц — обнаруживать первым допустимым faceId.</span><span class="sxs-lookup"><span data-stu-id="74eb8-121">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="74eb8-122">Обратите внимание, что этот faceId не сохраняется и заканчивается через 24 часа после вызова метода обнаружения</span><span class="sxs-lookup"><span data-stu-id="74eb8-122">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group
  name: group(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-123">Разделите по сходству лиц кандидата лиц.</span><span class="sxs-lookup"><span data-stu-id="74eb8-123">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="74eb8-124">Массив faceId кандидата созданные лиц - обнаружения.</span><span class="sxs-lookup"><span data-stu-id="74eb8-124">Array of candidate faceId created by Face - Detect.</span></span>

        <span data-ttu-id="74eb8-125">Максимальное значение — 1000 лиц</span><span class="sxs-lookup"><span data-stu-id="74eb8-125">The maximum is 1000 faces</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_2
  name: group(string[], Object, ServiceCallback<GroupResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-126">Разделите по сходству лиц кандидата лиц.</span><span class="sxs-lookup"><span data-stu-id="74eb8-126">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], options: Object, callback: ServiceCallback<GroupResult>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_1
  name: group(string[], ServiceCallback<GroupResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-127">Разделите по сходству лиц кандидата лиц.</span><span class="sxs-lookup"><span data-stu-id="74eb8-127">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResult>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  name: groupWithHttpOperationResponse(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-128">Разделите по сходству лиц кандидата лиц.</span><span class="sxs-lookup"><span data-stu-id="74eb8-128">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function groupWithHttpOperationResponse(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="74eb8-129">Массив faceId кандидата созданные лиц - обнаружения.</span><span class="sxs-lookup"><span data-stu-id="74eb8-129">Array of candidate faceId created by Face - Detect.</span></span>

        <span data-ttu-id="74eb8-130">Максимальное значение — 1000 лиц</span><span class="sxs-lookup"><span data-stu-id="74eb8-130">The maximum is 1000 faces</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify
  name: identify(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-131">1-ко многим код для поиска ближайшего поверхности конкретного запроса пользователя из группы пользователя или группы больших person.</span><span class="sxs-lookup"><span data-stu-id="74eb8-131">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
  syntax:
    content: 'function identify(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="74eb8-132">Массив запросов сталкивается faceIds, созданные поверхности - обнаружения.</span><span class="sxs-lookup"><span data-stu-id="74eb8-132">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="74eb8-133">Каждая из сторон, определяются независимо друг от друга.</span><span class="sxs-lookup"><span data-stu-id="74eb8-133">Each of the faces are identified independently.</span></span> <span data-ttu-id="74eb8-134">Допустимый диапазон faceIds — от [1, 10].</span><span class="sxs-lookup"><span data-stu-id="74eb8-134">The valid number of faceIds is between [1, 10].</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_2
  name: identify(string[], Object, ServiceCallback<IdentifyResult[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-135">1-ко многим код для поиска ближайшего поверхности конкретного запроса пользователя из группы пользователя или группы больших person.</span><span class="sxs-lookup"><span data-stu-id="74eb8-135">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
  syntax:
    content: 'function identify(faceIds: string[], options: Object, callback: ServiceCallback<IdentifyResult[]>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_1
  name: identify(string[], ServiceCallback<IdentifyResult[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-136">1-ко многим код для поиска ближайшего поверхности конкретного запроса пользователя из группы пользователя или группы больших person.</span><span class="sxs-lookup"><span data-stu-id="74eb8-136">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
  syntax:
    content: 'function identify(faceIds: string[], callback: ServiceCallback<IdentifyResult[]>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  name: identifyWithHttpOperationResponse(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-137">1-ко многим код для поиска ближайшего поверхности конкретного запроса пользователя из группы пользователя или группы больших person.</span><span class="sxs-lookup"><span data-stu-id="74eb8-137">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
  syntax:
    content: 'function identifyWithHttpOperationResponse(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="74eb8-138">Массив запросов сталкивается faceIds, созданные поверхности - обнаружения.</span><span class="sxs-lookup"><span data-stu-id="74eb8-138">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="74eb8-139">Каждая из сторон, определяются независимо друг от друга.</span><span class="sxs-lookup"><span data-stu-id="74eb8-139">Each of the faces are identified independently.</span></span> <span data-ttu-id="74eb8-140">Допустимый диапазон faceIds — от [1, 10].</span><span class="sxs-lookup"><span data-stu-id="74eb8-140">The valid number of faceIds is between [1, 10].</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResult[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFace
  name: verifyFaceToFace(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-141">Проверьте ли два портрета принадлежат одному человеку или от того, принадлежит ли одной грани пользователю.</span><span class="sxs-lookup"><span data-stu-id="74eb8-141">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options?: Object)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        <span data-ttu-id="74eb8-142">faceId первой грани, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="74eb8-142">FaceId of the first face, comes from Face - Detect</span></span>
    - id: faceId2
      type:
      - string
      description: >
        <span data-ttu-id="74eb8-143">faceId второй поверхности, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="74eb8-143">FaceId of the second face, comes from Face - Detect</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFace_2
  name: verifyFaceToFace(string, string, Object, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-144">Проверьте ли два портрета принадлежат одному человеку или от того, принадлежит ли одной грани пользователю.</span><span class="sxs-lookup"><span data-stu-id="74eb8-144">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options: Object, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFace_1
  name: verifyFaceToFace(string, string, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-145">Проверьте ли два портрета принадлежат одному человеку или от того, принадлежит ли одной грани пользователю.</span><span class="sxs-lookup"><span data-stu-id="74eb8-145">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyFaceToFace(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFaceWithHttpOperationResponse
  name: verifyFaceToFaceWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-146">Проверьте ли два портрета принадлежат одному человеку или от того, принадлежит ли одной грани пользователю.</span><span class="sxs-lookup"><span data-stu-id="74eb8-146">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyFaceToFaceWithHttpOperationResponse(faceId1: string, faceId2: string, options?: Object)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        <span data-ttu-id="74eb8-147">faceId первой грани, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="74eb8-147">FaceId of the first face, comes from Face - Detect</span></span>
    - id: faceId2
      type:
      - string
      description: >
        <span data-ttu-id="74eb8-148">faceId второй поверхности, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="74eb8-148">FaceId of the second face, comes from Face - Detect</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPerson
  name: verifyFaceToPerson(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-149">Проверьте, принадлежат ли два портрета одному человеку.</span><span class="sxs-lookup"><span data-stu-id="74eb8-149">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="74eb8-150">Сравнивает грани идентификатор с идентификатором пользователя</span><span class="sxs-lookup"><span data-stu-id="74eb8-150">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyFaceToPerson(faceId: string, personId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="74eb8-151">FaceId поверхности, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="74eb8-151">FaceId of the face, comes from Face - Detect</span></span>
    - id: personId
      type:
      - string
      description: >
        <span data-ttu-id="74eb8-152">Укажите конкретным лицом в группу пользователя или группы больших person.</span><span class="sxs-lookup"><span data-stu-id="74eb8-152">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="74eb8-153">personId создается в каждой группе людей человека — создать или LargePersonGroup Person.</span><span class="sxs-lookup"><span data-stu-id="74eb8-153">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPerson_2
  name: verifyFaceToPerson(string, string, Object, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-154">Проверьте, принадлежат ли два портрета одному человеку.</span><span class="sxs-lookup"><span data-stu-id="74eb8-154">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="74eb8-155">Сравнивает грани идентификатор с идентификатором пользователя</span><span class="sxs-lookup"><span data-stu-id="74eb8-155">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyFaceToPerson(faceId: string, personId: string, options: Object, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPerson_1
  name: verifyFaceToPerson(string, string, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-156">Проверьте, принадлежат ли два портрета одному человеку.</span><span class="sxs-lookup"><span data-stu-id="74eb8-156">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="74eb8-157">Сравнивает грани идентификатор с идентификатором пользователя</span><span class="sxs-lookup"><span data-stu-id="74eb8-157">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyFaceToPerson(faceId: string, personId: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPersonWithHttpOperationResponse
  name: verifyFaceToPersonWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="74eb8-158">Проверьте, принадлежат ли два портрета одному человеку.</span><span class="sxs-lookup"><span data-stu-id="74eb8-158">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="74eb8-159">Сравнивает грани идентификатор с идентификатором пользователя</span><span class="sxs-lookup"><span data-stu-id="74eb8-159">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyFaceToPersonWithHttpOperationResponse(faceId: string, personId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="74eb8-160">FaceId поверхности, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="74eb8-160">FaceId of the face, comes from Face - Detect</span></span>
    - id: personId
      type:
      - string
      description: >
        <span data-ttu-id="74eb8-161">Укажите конкретным лицом в группу пользователя или группы больших person.</span><span class="sxs-lookup"><span data-stu-id="74eb8-161">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="74eb8-162">personId создается в каждой группе людей человека — создать или LargePersonGroup Person.</span><span class="sxs-lookup"><span data-stu-id="74eb8-162">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
references:
- uid: Promise<azure-cognitiveservices-face.DetectedFace[]>
  name: DetectedFace[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
  name: DetectedFace[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  name: DetectedFace[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.SimilarFace[]>
  name: SimilarFace[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: SimilarFace
    fullName: SimilarFace
    uid: azure-cognitiveservices-face.SimilarFace
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.SimilarFace[]>
  name: SimilarFace[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: SimilarFace
    fullName: SimilarFace
    uid: azure-cognitiveservices-face.SimilarFace
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFace[]>>
  name: SimilarFace[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: SimilarFace
    fullName: SimilarFace
    uid: azure-cognitiveservices-face.SimilarFace
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.GroupResult>
  name: GroupResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: GroupResult
    fullName: GroupResult
    uid: azure-cognitiveservices-face.GroupResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.GroupResult>
  name: GroupResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: GroupResult
    fullName: GroupResult
    uid: azure-cognitiveservices-face.GroupResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResult>>
  name: GroupResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: GroupResult
    fullName: GroupResult
    uid: azure-cognitiveservices-face.GroupResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-cognitiveservices-face.IdentifyResult[]>
  name: IdentifyResult[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: IdentifyResult
    fullName: IdentifyResult
    uid: azure-cognitiveservices-face.IdentifyResult
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.IdentifyResult[]>
  name: IdentifyResult[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: IdentifyResult
    fullName: IdentifyResult
    uid: azure-cognitiveservices-face.IdentifyResult
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResult[]>>
  name: IdentifyResult[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: IdentifyResult
    fullName: IdentifyResult
    uid: azure-cognitiveservices-face.IdentifyResult
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.VerifyResult>
  name: VerifyResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.VerifyResult>
  name: VerifyResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  name: VerifyResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>>'
    fullName: '>>'
