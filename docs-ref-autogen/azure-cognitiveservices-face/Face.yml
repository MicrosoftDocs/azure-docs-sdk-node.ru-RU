### YamlMime:UniversalReference
ms.openlocfilehash: bed954b4ad093b9d7b51214336247d9673cd8b5a
ms.sourcegitcommit: 87f95d58ec8de16e115bc344efeb084afc346b74
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 08/12/2018
ms.locfileid: "40075341"
items:
- uid: azure-cognitiveservices-face.Face
  name: Face
  fullName: Face
  children:
  - azure-cognitiveservices-face.Face.detect
  - azure-cognitiveservices-face.Face.detect_1
  - azure-cognitiveservices-face.Face.detect_2
  - azure-cognitiveservices-face.Face.detectInStream_1
  - azure-cognitiveservices-face.Face.detectInStream_2
  - azure-cognitiveservices-face.Face.detectInStream
  - azure-cognitiveservices-face.Face.detectInStreamWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.detectWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.findSimilar
  - azure-cognitiveservices-face.Face.findSimilar_1
  - azure-cognitiveservices-face.Face.findSimilar_2
  - azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.group
  - azure-cognitiveservices-face.Face.group_1
  - azure-cognitiveservices-face.Face.group_2
  - azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.identify_1
  - azure-cognitiveservices-face.Face.identify_2
  - azure-cognitiveservices-face.Face.identify
  - azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verify
  - azure-cognitiveservices-face.Face.verify_1
  - azure-cognitiveservices-face.Face.verify_2
  - azure-cognitiveservices-face.Face.verifyWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verifyWithPersonGroup
  - azure-cognitiveservices-face.Face.verifyWithPersonGroup_1
  - azure-cognitiveservices-face.Face.verifyWithPersonGroup_2
  - azure-cognitiveservices-face.Face.verifyWithPersonGroupWithHttpOperationResponse
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detect
  name: detect
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-101">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="3949b-101">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detect(url: string, options?: function)'
    parameters:
    - id: url
      type:
      - string
      description: "\n"
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detect_1
  name: detect
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-102">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="3949b-102">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detect(url: string, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detect_2
  name: detect
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-103">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="3949b-103">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detect(url: string, options: function, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStream_1
  name: detectInStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-104">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="3949b-104">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStream(image: stream.Readable, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStream_2
  name: detectInStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-105">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="3949b-105">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStream(image: stream.Readable, options: function, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStream
  name: detectInStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-106">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="3949b-106">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStream(image: stream.Readable, options?: function)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="3949b-107">Поток данных изображения.</span><span class="sxs-lookup"><span data-stu-id="3949b-107">An image stream.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStreamWithHttpOperationResponse
  name: detectInStreamWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-108">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="3949b-108">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStreamWithHttpOperationResponse(image: stream.Readable, options?: function)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="3949b-109">Поток данных изображения.</span><span class="sxs-lookup"><span data-stu-id="3949b-109">An image stream.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithHttpOperationResponse
  name: detectWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-110">Определения человеческих лиц в образ и возвращает расположения лиц и при необходимости с faceIds ориентиров и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="3949b-110">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithHttpOperationResponse(url: string, options?: function)'
    parameters:
    - id: url
      type:
      - string
      description: "\n"
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar
  name: findSimilar
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-111">Получив запрос лиц faceId, находит похожие лица из массива faceId или faceListId.</span><span class="sxs-lookup"><span data-stu-id="3949b-111">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, options?: function)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="3949b-112">FaceId поверхности запроса.</span><span class="sxs-lookup"><span data-stu-id="3949b-112">FaceId of the query face.</span></span> <span data-ttu-id="3949b-113">Пользователь должен вызвать лиц — обнаруживать первым допустимым faceId.</span><span class="sxs-lookup"><span data-stu-id="3949b-113">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="3949b-114">Обратите внимание, что этот faceId не сохраняется и заканчивается через 24 часа после вызова метода обнаружения</span><span class="sxs-lookup"><span data-stu-id="3949b-114">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_1
  name: findSimilar
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-115">Получив запрос лиц faceId, находит похожие лица из массива faceId или faceListId.</span><span class="sxs-lookup"><span data-stu-id="3949b-115">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFaceResult[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_2
  name: findSimilar
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-116">Получив запрос лиц faceId, находит похожие лица из массива faceId или faceListId.</span><span class="sxs-lookup"><span data-stu-id="3949b-116">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, options: function, callback: ServiceCallback<SimilarFaceResult[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  name: findSimilarWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-117">Получив запрос лиц faceId, находит похожие лица из массива faceId или faceListId.</span><span class="sxs-lookup"><span data-stu-id="3949b-117">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilarWithHttpOperationResponse(faceId: string, options?: function)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="3949b-118">FaceId поверхности запроса.</span><span class="sxs-lookup"><span data-stu-id="3949b-118">FaceId of the query face.</span></span> <span data-ttu-id="3949b-119">Пользователь должен вызвать лиц — обнаруживать первым допустимым faceId.</span><span class="sxs-lookup"><span data-stu-id="3949b-119">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="3949b-120">Обратите внимание, что этот faceId не сохраняется и заканчивается через 24 часа после вызова метода обнаружения</span><span class="sxs-lookup"><span data-stu-id="3949b-120">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFaceResult[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group
  name: group
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-121">Разделите по сходству лиц кандидата лиц.</span><span class="sxs-lookup"><span data-stu-id="3949b-121">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], options?: function)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="3949b-122">Массив faceId кандидата созданные лиц - обнаружения.</span><span class="sxs-lookup"><span data-stu-id="3949b-122">Array of candidate faceId created by Face - Detect.</span></span>

        <span data-ttu-id="3949b-123">Максимальное значение — 1000 лиц</span><span class="sxs-lookup"><span data-stu-id="3949b-123">The maximum is 1000 faces</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResponse>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_1
  name: group
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-124">Разделите по сходству лиц кандидата лиц.</span><span class="sxs-lookup"><span data-stu-id="3949b-124">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResponse>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResponse>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResponse>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_2
  name: group
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-125">Разделите по сходству лиц кандидата лиц.</span><span class="sxs-lookup"><span data-stu-id="3949b-125">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], options: function, callback: ServiceCallback<GroupResponse>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResponse>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResponse>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  name: groupWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-126">Разделите по сходству лиц кандидата лиц.</span><span class="sxs-lookup"><span data-stu-id="3949b-126">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function groupWithHttpOperationResponse(faceIds: string[], options?: function)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="3949b-127">Массив faceId кандидата созданные лиц - обнаружения.</span><span class="sxs-lookup"><span data-stu-id="3949b-127">Array of candidate faceId created by Face - Detect.</span></span>

        <span data-ttu-id="3949b-128">Максимальное значение — 1000 лиц</span><span class="sxs-lookup"><span data-stu-id="3949b-128">The maximum is 1000 faces</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResponse>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_1
  name: identify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-129">Идентификация Неизвестный лиц из группы пользователя.</span><span class="sxs-lookup"><span data-stu-id="3949b-129">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identify(personGroupId: string, faceIds: string[], callback: ServiceCallback<IdentifyResultItem[]>)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: ''
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_2
  name: identify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-130">Идентификация Неизвестный лиц из группы пользователя.</span><span class="sxs-lookup"><span data-stu-id="3949b-130">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identify(personGroupId: string, faceIds: string[], options: function, callback: ServiceCallback<IdentifyResultItem[]>)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: ''
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify
  name: identify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-131">Идентификация Неизвестный лиц из группы пользователя.</span><span class="sxs-lookup"><span data-stu-id="3949b-131">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identify(personGroupId: string, faceIds: string[], options?: function)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="3949b-132">personGroupId person целевой группы, созданные PersonGroups.Create</span><span class="sxs-lookup"><span data-stu-id="3949b-132">personGroupId of the target person group, created by PersonGroups.Create</span></span>
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="3949b-133">Массив faceId кандидата созданные лиц - обнаружения.</span><span class="sxs-lookup"><span data-stu-id="3949b-133">Array of candidate faceId created by Face - Detect.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  name: identifyWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-134">Идентификация Неизвестный лиц из группы пользователя.</span><span class="sxs-lookup"><span data-stu-id="3949b-134">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identifyWithHttpOperationResponse(personGroupId: string, faceIds: string[], options?: function)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="3949b-135">personGroupId person целевой группы, созданные PersonGroups.Create</span><span class="sxs-lookup"><span data-stu-id="3949b-135">personGroupId of the target person group, created by PersonGroups.Create</span></span>
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="3949b-136">Массив faceId кандидата созданные лиц - обнаружения.</span><span class="sxs-lookup"><span data-stu-id="3949b-136">Array of candidate faceId created by Face - Detect.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResultItem[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verify
  name: verify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-137">Проверьте ли два портрета принадлежат одному человеку или от того, принадлежит ли одной грани пользователю.</span><span class="sxs-lookup"><span data-stu-id="3949b-137">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verify(faceId1: string, faceId2: string, options?: function)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        <span data-ttu-id="3949b-138">faceId первой грани, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="3949b-138">faceId of the first face, comes from Face - Detect</span></span>
    - id: faceId2
      type:
      - string
      description: >
        <span data-ttu-id="3949b-139">faceId второй поверхности, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="3949b-139">faceId of the second face, comes from Face - Detect</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verify_1
  name: verify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-140">Проверьте ли два портрета принадлежат одному человеку или от того, принадлежит ли одной грани пользователю.</span><span class="sxs-lookup"><span data-stu-id="3949b-140">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verify(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verify_2
  name: verify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-141">Проверьте ли два портрета принадлежат одному человеку или от того, принадлежит ли одной грани пользователю.</span><span class="sxs-lookup"><span data-stu-id="3949b-141">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verify(faceId1: string, faceId2: string, options: function, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithHttpOperationResponse
  name: verifyWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-142">Проверьте ли два портрета принадлежат одному человеку или от того, принадлежит ли одной грани пользователю.</span><span class="sxs-lookup"><span data-stu-id="3949b-142">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyWithHttpOperationResponse(faceId1: string, faceId2: string, options?: function)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        <span data-ttu-id="3949b-143">faceId первой грани, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="3949b-143">faceId of the first face, comes from Face - Detect</span></span>
    - id: faceId2
      type:
      - string
      description: >
        <span data-ttu-id="3949b-144">faceId второй поверхности, поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="3949b-144">faceId of the second face, comes from Face - Detect</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup
  name: verifyWithPersonGroup
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-145">Проверьте, принадлежат ли два портрета одному человеку.</span><span class="sxs-lookup"><span data-stu-id="3949b-145">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="3949b-146">Сравнивает грани идентификатор с идентификатором пользователя</span><span class="sxs-lookup"><span data-stu-id="3949b-146">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, options?: function)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="3949b-147">faceId лица поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="3949b-147">faceId the face, comes from Face - Detect</span></span>
    - id: personId
      type:
      - string
      description: >
        <span data-ttu-id="3949b-148">Укажите конкретным лицом person группы.</span><span class="sxs-lookup"><span data-stu-id="3949b-148">Specify a certain person in a person group.</span></span>

        <span data-ttu-id="3949b-149">personId создается в Persons.Create.</span><span class="sxs-lookup"><span data-stu-id="3949b-149">personId is created in Persons.Create.</span></span>
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="3949b-150">С помощью существующих personGroupId и personId быстрой загрузки указанного лица.</span><span class="sxs-lookup"><span data-stu-id="3949b-150">Using existing personGroupId and personId for fast loading a specified person.</span></span> <span data-ttu-id="3949b-151">personGroupId создается в Person Groups.Create.</span><span class="sxs-lookup"><span data-stu-id="3949b-151">personGroupId is created in Person Groups.Create.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup_1
  name: verifyWithPersonGroup
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-152">Проверьте, принадлежат ли два портрета одному человеку.</span><span class="sxs-lookup"><span data-stu-id="3949b-152">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="3949b-153">Сравнивает грани идентификатор с идентификатором пользователя</span><span class="sxs-lookup"><span data-stu-id="3949b-153">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: personGroupId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup_2
  name: verifyWithPersonGroup
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-154">Проверьте, принадлежат ли два портрета одному человеку.</span><span class="sxs-lookup"><span data-stu-id="3949b-154">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="3949b-155">Сравнивает грани идентификатор с идентификатором пользователя</span><span class="sxs-lookup"><span data-stu-id="3949b-155">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, options: function, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: personGroupId
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroupWithHttpOperationResponse
  name: verifyWithPersonGroupWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3949b-156">Проверьте, принадлежат ли два портрета одному человеку.</span><span class="sxs-lookup"><span data-stu-id="3949b-156">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="3949b-157">Сравнивает грани идентификатор с идентификатором пользователя</span><span class="sxs-lookup"><span data-stu-id="3949b-157">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroupWithHttpOperationResponse(faceId: string, personId: string, personGroupId: string, options?: function)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="3949b-158">faceId лица поступает из лиц — обнаружения</span><span class="sxs-lookup"><span data-stu-id="3949b-158">faceId the face, comes from Face - Detect</span></span>
    - id: personId
      type:
      - string
      description: >
        <span data-ttu-id="3949b-159">Укажите конкретным лицом person группы.</span><span class="sxs-lookup"><span data-stu-id="3949b-159">Specify a certain person in a person group.</span></span>

        <span data-ttu-id="3949b-160">personId создается в Persons.Create.</span><span class="sxs-lookup"><span data-stu-id="3949b-160">personId is created in Persons.Create.</span></span>
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="3949b-161">С помощью существующих personGroupId и personId быстрой загрузки указанного лица.</span><span class="sxs-lookup"><span data-stu-id="3949b-161">Using existing personGroupId and personId for fast loading a specified person.</span></span> <span data-ttu-id="3949b-162">personGroupId создается в Person Groups.Create.</span><span class="sxs-lookup"><span data-stu-id="3949b-162">personGroupId is created in Person Groups.Create.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
references:
- uid: Promise<azure-cognitiveservices-face.DetectedFace[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: SimilarFaceResult
    fullName: SimilarFaceResult
    uid: azure-cognitiveservices-face.SimilarFaceResult
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: SimilarFaceResult
    fullName: SimilarFaceResult
    uid: azure-cognitiveservices-face.SimilarFaceResult
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFaceResult[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: SimilarFaceResult
    fullName: SimilarFaceResult
    uid: azure-cognitiveservices-face.SimilarFaceResult
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.GroupResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: GroupResponse
    fullName: GroupResponse
    uid: azure-cognitiveservices-face.GroupResponse
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.GroupResponse>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: GroupResponse
    fullName: GroupResponse
    uid: azure-cognitiveservices-face.GroupResponse
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResponse>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: GroupResponse
    fullName: GroupResponse
    uid: azure-cognitiveservices-face.GroupResponse
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: IdentifyResultItem
    fullName: IdentifyResultItem
    uid: azure-cognitiveservices-face.IdentifyResultItem
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: IdentifyResultItem
    fullName: IdentifyResultItem
    uid: azure-cognitiveservices-face.IdentifyResultItem
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResultItem[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: IdentifyResultItem
    fullName: IdentifyResultItem
    uid: azure-cognitiveservices-face.IdentifyResultItem
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.VerifyResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.VerifyResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>>'
    fullName: '>>'
