### YamlMime:UniversalReference
ms.openlocfilehash: 2f68db2640bf5f18ec526b603a0c002bd8b3eb2f
ms.sourcegitcommit: 87f95d58ec8de16e115bc344efeb084afc346b74
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 08/12/2018
ms.locfileid: "40076780"
items:
- uid: azure-cognitiveservices-face.FaceList
  name: FaceList
  fullName: FaceList
  children:
  - azure-cognitiveservices-face.FaceList.addFace
  - azure-cognitiveservices-face.FaceList.addFace_1
  - azure-cognitiveservices-face.FaceList.addFace_2
  - azure-cognitiveservices-face.FaceList.addFaceFromStream_1
  - azure-cognitiveservices-face.FaceList.addFaceFromStream
  - azure-cognitiveservices-face.FaceList.addFaceFromStream_2
  - azure-cognitiveservices-face.FaceList.addFaceFromStreamWithHttpOperationResponse
  - azure-cognitiveservices-face.FaceList.addFaceWithHttpOperationResponse
  - azure-cognitiveservices-face.FaceList.create_1
  - azure-cognitiveservices-face.FaceList.create
  - azure-cognitiveservices-face.FaceList.create_2
  - azure-cognitiveservices-face.FaceList.createWithHttpOperationResponse
  - azure-cognitiveservices-face.FaceList.deleteFace
  - azure-cognitiveservices-face.FaceList.deleteFace_1
  - azure-cognitiveservices-face.FaceList.deleteFace_2
  - azure-cognitiveservices-face.FaceList.deleteFaceWithHttpOperationResponse
  - azure-cognitiveservices-face.FaceList.deleteMethod
  - azure-cognitiveservices-face.FaceList.deleteMethod_1
  - azure-cognitiveservices-face.FaceList.deleteMethod_2
  - azure-cognitiveservices-face.FaceList.deleteMethodWithHttpOperationResponse
  - azure-cognitiveservices-face.FaceList.get_1
  - azure-cognitiveservices-face.FaceList.get_2
  - azure-cognitiveservices-face.FaceList.get
  - azure-cognitiveservices-face.FaceList.getWithHttpOperationResponse
  - azure-cognitiveservices-face.FaceList.list
  - azure-cognitiveservices-face.FaceList.list_1
  - azure-cognitiveservices-face.FaceList.list_2
  - azure-cognitiveservices-face.FaceList.listWithHttpOperationResponse
  - azure-cognitiveservices-face.FaceList.update
  - azure-cognitiveservices-face.FaceList.update_1
  - azure-cognitiveservices-face.FaceList.update_2
  - azure-cognitiveservices-face.FaceList.updateWithHttpOperationResponse
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.addFace
  name: addFace
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-101">Добавьте фрагмент в список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-101">Add a face to a face list.</span></span> <span data-ttu-id="1edeb-102">Входной лиц указываются в виде изображения с прямоугольником targetFace.</span><span class="sxs-lookup"><span data-stu-id="1edeb-102">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="1edeb-103">Возвращает persistedFaceId, представляющий добавленный лиц и persistedFaceId не истекает.</span><span class="sxs-lookup"><span data-stu-id="1edeb-103">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFace(faceListId: string, url: string, options?: function)'
    parameters:
    - id: faceListId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-104">Идентификатор ссылки на список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-104">Id referencing a Face List.</span></span>
    - id: url
      type:
      - string
      description: "\n"
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFaceResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.addFace_1
  name: addFace
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-105">Добавьте фрагмент в список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-105">Add a face to a face list.</span></span> <span data-ttu-id="1edeb-106">Входной лиц указываются в виде изображения с прямоугольником targetFace.</span><span class="sxs-lookup"><span data-stu-id="1edeb-106">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="1edeb-107">Возвращает persistedFaceId, представляющий добавленный лиц и persistedFaceId не истекает.</span><span class="sxs-lookup"><span data-stu-id="1edeb-107">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFace(faceListId: string, url: string, callback: ServiceCallback<PersistedFaceResult>)'
    parameters:
    - id: faceListId
      type:
      - string
      description: ''
    - id: url
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.PersistedFaceResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFaceResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.addFace_2
  name: addFace
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-108">Добавьте фрагмент в список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-108">Add a face to a face list.</span></span> <span data-ttu-id="1edeb-109">Входной лиц указываются в виде изображения с прямоугольником targetFace.</span><span class="sxs-lookup"><span data-stu-id="1edeb-109">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="1edeb-110">Возвращает persistedFaceId, представляющий добавленный лиц и persistedFaceId не истекает.</span><span class="sxs-lookup"><span data-stu-id="1edeb-110">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFace(faceListId: string, url: string, options: function, callback: ServiceCallback<PersistedFaceResult>)'
    parameters:
    - id: faceListId
      type:
      - string
      description: ''
    - id: url
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.PersistedFaceResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFaceResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.addFaceFromStream_1
  name: addFaceFromStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-111">Добавьте фрагмент в список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-111">Add a face to a face list.</span></span> <span data-ttu-id="1edeb-112">Входной лиц указываются в виде изображения с прямоугольником targetFace.</span><span class="sxs-lookup"><span data-stu-id="1edeb-112">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="1edeb-113">Возвращает persistedFaceId, представляющий добавленный лиц и persistedFaceId не истекает.</span><span class="sxs-lookup"><span data-stu-id="1edeb-113">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFaceFromStream(faceListId: string, callback: ServiceCallback<PersistedFaceResult>)'
    parameters:
    - id: faceListId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.PersistedFaceResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFaceResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.addFaceFromStream
  name: addFaceFromStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-114">Добавьте фрагмент в список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-114">Add a face to a face list.</span></span> <span data-ttu-id="1edeb-115">Входной лиц указываются в виде изображения с прямоугольником targetFace.</span><span class="sxs-lookup"><span data-stu-id="1edeb-115">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="1edeb-116">Возвращает persistedFaceId, представляющий добавленный лиц и persistedFaceId не истекает.</span><span class="sxs-lookup"><span data-stu-id="1edeb-116">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFaceFromStream(faceListId: string, options?: function)'
    parameters:
    - id: faceListId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-117">Идентификатор ссылки на список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-117">Id referencing a Face List.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFaceResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.addFaceFromStream_2
  name: addFaceFromStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-118">Добавьте фрагмент в список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-118">Add a face to a face list.</span></span> <span data-ttu-id="1edeb-119">Входной лиц указываются в виде изображения с прямоугольником targetFace.</span><span class="sxs-lookup"><span data-stu-id="1edeb-119">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="1edeb-120">Возвращает persistedFaceId, представляющий добавленный лиц и persistedFaceId не истекает.</span><span class="sxs-lookup"><span data-stu-id="1edeb-120">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFaceFromStream(faceListId: string, options: function, callback: ServiceCallback<PersistedFaceResult>)'
    parameters:
    - id: faceListId
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.PersistedFaceResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.PersistedFaceResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.addFaceFromStreamWithHttpOperationResponse
  name: addFaceFromStreamWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-121">Добавьте фрагмент в список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-121">Add a face to a face list.</span></span> <span data-ttu-id="1edeb-122">Входной лиц указываются в виде изображения с прямоугольником targetFace.</span><span class="sxs-lookup"><span data-stu-id="1edeb-122">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="1edeb-123">Возвращает persistedFaceId, представляющий добавленный лиц и persistedFaceId не истекает.</span><span class="sxs-lookup"><span data-stu-id="1edeb-123">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFaceFromStreamWithHttpOperationResponse(faceListId: string, options?: function)'
    parameters:
    - id: faceListId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-124">Идентификатор ссылки на список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-124">Id referencing a Face List.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.PersistedFaceResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.addFaceWithHttpOperationResponse
  name: addFaceWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-125">Добавьте фрагмент в список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-125">Add a face to a face list.</span></span> <span data-ttu-id="1edeb-126">Входной лиц указываются в виде изображения с прямоугольником targetFace.</span><span class="sxs-lookup"><span data-stu-id="1edeb-126">The input face is specified as an image with a targetFace rectangle.</span></span> <span data-ttu-id="1edeb-127">Возвращает persistedFaceId, представляющий добавленный лиц и persistedFaceId не истекает.</span><span class="sxs-lookup"><span data-stu-id="1edeb-127">It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</span></span>
  syntax:
    content: 'function addFaceWithHttpOperationResponse(faceListId: string, url: string, options?: function)'
    parameters:
    - id: faceListId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-128">Идентификатор ссылки на список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-128">Id referencing a Face List.</span></span>
    - id: url
      type:
      - string
      description: "\n"
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.PersistedFaceResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.create_1
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-129">Создание списка пустой лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-129">Create an empty face list.</span></span> <span data-ttu-id="1edeb-130">До 64 лиц списки могут существовать в одной подписке.</span><span class="sxs-lookup"><span data-stu-id="1edeb-130">Up to 64 face lists are allowed to exist in one subscription.</span></span>
  syntax:
    content: 'function create(faceListId: string, callback: ServiceCallback<void>)'
    parameters:
    - id: faceListId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.create
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-131">Создание списка пустой лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-131">Create an empty face list.</span></span> <span data-ttu-id="1edeb-132">До 64 лиц списки могут существовать в одной подписке.</span><span class="sxs-lookup"><span data-stu-id="1edeb-132">Up to 64 face lists are allowed to exist in one subscription.</span></span>
  syntax:
    content: 'function create(faceListId: string, options?: function)'
    parameters:
    - id: faceListId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-133">Идентификатор ссылки на список конкретного лица.</span><span class="sxs-lookup"><span data-stu-id="1edeb-133">Id referencing a particular face list.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.create_2
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-134">Создание списка пустой лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-134">Create an empty face list.</span></span> <span data-ttu-id="1edeb-135">До 64 лиц списки могут существовать в одной подписке.</span><span class="sxs-lookup"><span data-stu-id="1edeb-135">Up to 64 face lists are allowed to exist in one subscription.</span></span>
  syntax:
    content: 'function create(faceListId: string, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: faceListId
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.createWithHttpOperationResponse
  name: createWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-136">Создание списка пустой лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-136">Create an empty face list.</span></span> <span data-ttu-id="1edeb-137">До 64 лиц списки могут существовать в одной подписке.</span><span class="sxs-lookup"><span data-stu-id="1edeb-137">Up to 64 face lists are allowed to exist in one subscription.</span></span>
  syntax:
    content: 'function createWithHttpOperationResponse(faceListId: string, options?: function)'
    parameters:
    - id: faceListId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-138">Идентификатор ссылки на список конкретного лица.</span><span class="sxs-lookup"><span data-stu-id="1edeb-138">Id referencing a particular face list.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.deleteFace
  name: deleteFace
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-139">Удаление существующего лиц из списка лиц (при наличии persisitedFaceId и faceListId).</span><span class="sxs-lookup"><span data-stu-id="1edeb-139">Delete an existing face from a face list (given by a persisitedFaceId and a faceListId).</span></span> <span data-ttu-id="1edeb-140">Также будут удалены постоянный образ, относящиеся к поверхности.</span><span class="sxs-lookup"><span data-stu-id="1edeb-140">Persisted image related to the face will also be deleted.</span></span>
  syntax:
    content: 'function deleteFace(faceListId: string, persistedFaceId: string, options?: function)'
    parameters:
    - id: faceListId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-141">faceListId существующий список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-141">faceListId of an existing face list.</span></span>
    - id: persistedFaceId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-142">persistedFaceId существующие лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-142">persistedFaceId of an existing face.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.deleteFace_1
  name: deleteFace
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-143">Удаление существующего лиц из списка лиц (при наличии persisitedFaceId и faceListId).</span><span class="sxs-lookup"><span data-stu-id="1edeb-143">Delete an existing face from a face list (given by a persisitedFaceId and a faceListId).</span></span> <span data-ttu-id="1edeb-144">Также будут удалены постоянный образ, относящиеся к поверхности.</span><span class="sxs-lookup"><span data-stu-id="1edeb-144">Persisted image related to the face will also be deleted.</span></span>
  syntax:
    content: 'function deleteFace(faceListId: string, persistedFaceId: string, callback: ServiceCallback<void>)'
    parameters:
    - id: faceListId
      type:
      - string
      description: ''
    - id: persistedFaceId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.deleteFace_2
  name: deleteFace
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-145">Удаление существующего лиц из списка лиц (при наличии persisitedFaceId и faceListId).</span><span class="sxs-lookup"><span data-stu-id="1edeb-145">Delete an existing face from a face list (given by a persisitedFaceId and a faceListId).</span></span> <span data-ttu-id="1edeb-146">Также будут удалены постоянный образ, относящиеся к поверхности.</span><span class="sxs-lookup"><span data-stu-id="1edeb-146">Persisted image related to the face will also be deleted.</span></span>
  syntax:
    content: 'function deleteFace(faceListId: string, persistedFaceId: string, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: faceListId
      type:
      - string
      description: ''
    - id: persistedFaceId
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.deleteFaceWithHttpOperationResponse
  name: deleteFaceWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-147">Удаление существующего лиц из списка лиц (при наличии persisitedFaceId и faceListId).</span><span class="sxs-lookup"><span data-stu-id="1edeb-147">Delete an existing face from a face list (given by a persisitedFaceId and a faceListId).</span></span> <span data-ttu-id="1edeb-148">Также будут удалены постоянный образ, относящиеся к поверхности.</span><span class="sxs-lookup"><span data-stu-id="1edeb-148">Persisted image related to the face will also be deleted.</span></span>
  syntax:
    content: 'function deleteFaceWithHttpOperationResponse(faceListId: string, persistedFaceId: string, options?: function)'
    parameters:
    - id: faceListId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-149">faceListId существующий список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-149">faceListId of an existing face list.</span></span>
    - id: persistedFaceId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-150">persistedFaceId существующие лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-150">persistedFaceId of an existing face.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.deleteMethod
  name: deleteMethod
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-151">Удалите существующий список лиц в соответствии с faceListId.</span><span class="sxs-lookup"><span data-stu-id="1edeb-151">Delete an existing face list according to faceListId.</span></span> <span data-ttu-id="1edeb-152">Сохраненных лиц, которые также будут удалены изображений в списке лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-152">Persisted face images in the face list will also be deleted.</span></span>
  syntax:
    content: 'function deleteMethod(faceListId: string, options?: function)'
    parameters:
    - id: faceListId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-153">Идентификатор ссылки на список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-153">Id referencing a Face List.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.deleteMethod_1
  name: deleteMethod
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-154">Удалите существующий список лиц в соответствии с faceListId.</span><span class="sxs-lookup"><span data-stu-id="1edeb-154">Delete an existing face list according to faceListId.</span></span> <span data-ttu-id="1edeb-155">Сохраненных лиц, которые также будут удалены изображений в списке лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-155">Persisted face images in the face list will also be deleted.</span></span>
  syntax:
    content: 'function deleteMethod(faceListId: string, callback: ServiceCallback<void>)'
    parameters:
    - id: faceListId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.deleteMethod_2
  name: deleteMethod
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-156">Удалите существующий список лиц в соответствии с faceListId.</span><span class="sxs-lookup"><span data-stu-id="1edeb-156">Delete an existing face list according to faceListId.</span></span> <span data-ttu-id="1edeb-157">Сохраненных лиц, которые также будут удалены изображений в списке лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-157">Persisted face images in the face list will also be deleted.</span></span>
  syntax:
    content: 'function deleteMethod(faceListId: string, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: faceListId
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.deleteMethodWithHttpOperationResponse
  name: deleteMethodWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-158">Удалите существующий список лиц в соответствии с faceListId.</span><span class="sxs-lookup"><span data-stu-id="1edeb-158">Delete an existing face list according to faceListId.</span></span> <span data-ttu-id="1edeb-159">Сохраненных лиц, которые также будут удалены изображений в списке лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-159">Persisted face images in the face list will also be deleted.</span></span>
  syntax:
    content: 'function deleteMethodWithHttpOperationResponse(faceListId: string, options?: function)'
    parameters:
    - id: faceListId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-160">Идентификатор ссылки на список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-160">Id referencing a Face List.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.get_1
  name: get
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-161">Получить сведения о список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-161">Retrieve a face list's information.</span></span>
  syntax:
    content: 'function get(faceListId: string, callback: ServiceCallback<GetFaceListResult>)'
    parameters:
    - id: faceListId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GetFaceListResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GetFaceListResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.get_2
  name: get
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-162">Получить сведения о список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-162">Retrieve a face list's information.</span></span>
  syntax:
    content: 'function get(faceListId: string, options: function, callback: ServiceCallback<GetFaceListResult>)'
    parameters:
    - id: faceListId
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GetFaceListResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GetFaceListResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.get
  name: get
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-163">Получить сведения о список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-163">Retrieve a face list's information.</span></span>
  syntax:
    content: 'function get(faceListId: string, options?: function)'
    parameters:
    - id: faceListId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-164">Идентификатор ссылки на список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-164">Id referencing a Face List.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.GetFaceListResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.getWithHttpOperationResponse
  name: getWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-165">Получить сведения о список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-165">Retrieve a face list's information.</span></span>
  syntax:
    content: 'function getWithHttpOperationResponse(faceListId: string, options?: function)'
    parameters:
    - id: faceListId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-166">Идентификатор ссылки на список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-166">Id referencing a Face List.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.GetFaceListResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.list
  name: list
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-167">Получение информации обо всех существующих списков лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-167">Retrieve information about all existing face lists.</span></span> <span data-ttu-id="1edeb-168">Возвращаются только faceListId, имя и userData.</span><span class="sxs-lookup"><span data-stu-id="1edeb-168">Only faceListId, name and userData will be returned.</span></span>
  syntax:
    content: 'function list(options?: function)'
    parameters:
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.GetFaceListResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.list_1
  name: list
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-169">Получение информации обо всех существующих списков лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-169">Retrieve information about all existing face lists.</span></span> <span data-ttu-id="1edeb-170">Возвращаются только faceListId, имя и userData.</span><span class="sxs-lookup"><span data-stu-id="1edeb-170">Only faceListId, name and userData will be returned.</span></span>
  syntax:
    content: 'function list(callback: ServiceCallback<GetFaceListResult[]>)'
    parameters:
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GetFaceListResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GetFaceListResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.list_2
  name: list
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-171">Получение информации обо всех существующих списков лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-171">Retrieve information about all existing face lists.</span></span> <span data-ttu-id="1edeb-172">Возвращаются только faceListId, имя и userData.</span><span class="sxs-lookup"><span data-stu-id="1edeb-172">Only faceListId, name and userData will be returned.</span></span>
  syntax:
    content: 'function list(options: function, callback: ServiceCallback<GetFaceListResult[]>)'
    parameters:
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GetFaceListResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GetFaceListResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.listWithHttpOperationResponse
  name: listWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-173">Получение информации обо всех существующих списков лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-173">Retrieve information about all existing face lists.</span></span> <span data-ttu-id="1edeb-174">Возвращаются только faceListId, имя и userData.</span><span class="sxs-lookup"><span data-stu-id="1edeb-174">Only faceListId, name and userData will be returned.</span></span>
  syntax:
    content: 'function listWithHttpOperationResponse(options?: function)'
    parameters:
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.GetFaceListResult[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.update
  name: update
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-175">Обновите сведения о списке лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-175">Update information of a face list.</span></span>
  syntax:
    content: 'function update(faceListId: string, options?: function)'
    parameters:
    - id: faceListId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-176">Идентификатор ссылки на список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-176">Id referencing a Face List.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.update_1
  name: update
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-177">Обновите сведения о списке лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-177">Update information of a face list.</span></span>
  syntax:
    content: 'function update(faceListId: string, callback: ServiceCallback<void>)'
    parameters:
    - id: faceListId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.update_2
  name: update
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-178">Обновите сведения о списке лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-178">Update information of a face list.</span></span>
  syntax:
    content: 'function update(faceListId: string, options: function, callback: ServiceCallback<void>)'
    parameters:
    - id: faceListId
      type:
      - string
      description: ''
    - id: options
      type:
      - function
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.FaceList.updateWithHttpOperationResponse
  name: updateWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1edeb-179">Обновите сведения о списке лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-179">Update information of a face list.</span></span>
  syntax:
    content: 'function updateWithHttpOperationResponse(faceListId: string, options?: function)'
    parameters:
    - id: faceListId
      type:
      - string
      description: >
        <span data-ttu-id="1edeb-180">Идентификатор ссылки на список лиц.</span><span class="sxs-lookup"><span data-stu-id="1edeb-180">Id referencing a Face List.</span></span>
    - id: options
      type:
      - function
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-cognitiveservices-face
references:
- uid: Promise<azure-cognitiveservices-face.PersistedFaceResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: PersistedFaceResult
    fullName: PersistedFaceResult
    uid: azure-cognitiveservices-face.PersistedFaceResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.PersistedFaceResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: PersistedFaceResult
    fullName: PersistedFaceResult
    uid: azure-cognitiveservices-face.PersistedFaceResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.PersistedFaceResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: PersistedFaceResult
    fullName: PersistedFaceResult
    uid: azure-cognitiveservices-face.PersistedFaceResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-cognitiveservices-face.GetFaceListResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: GetFaceListResult
    fullName: GetFaceListResult
    uid: azure-cognitiveservices-face.GetFaceListResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.GetFaceListResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: GetFaceListResult
    fullName: GetFaceListResult
    uid: azure-cognitiveservices-face.GetFaceListResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.GetFaceListResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: GetFaceListResult
    fullName: GetFaceListResult
    uid: azure-cognitiveservices-face.GetFaceListResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-cognitiveservices-face.GetFaceListResult[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: GetFaceListResult
    fullName: GetFaceListResult
    uid: azure-cognitiveservices-face.GetFaceListResult
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.GetFaceListResult[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: GetFaceListResult
    fullName: GetFaceListResult
    uid: azure-cognitiveservices-face.GetFaceListResult
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.GetFaceListResult[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: GetFaceListResult
    fullName: GetFaceListResult
    uid: azure-cognitiveservices-face.GetFaceListResult
  - name: '[]>>'
    fullName: '[]>>'
